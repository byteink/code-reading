// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto

#ifndef PROTOBUF_consensus_2eproto__INCLUDED
#define PROTOBUF_consensus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kudu/common/common.pb.h"
#include "kudu/common/wire_protocol.pb.h"
#include "kudu/consensus/metadata.pb.h"
#include "kudu/consensus/opid.pb.h"
#include "kudu/rpc/rpc_header.pb.h"
#include "kudu/tablet/metadata.pb.h"
#include "kudu/tablet/tablet.pb.h"
#include "kudu/tserver/tserver_admin.pb.h"
#include "kudu/tserver/tserver.pb.h"
// @@protoc_insertion_point(includes)
namespace kudu {
class AppStatusPB;
class AppStatusPBDefaultTypeInternal;
extern AppStatusPBDefaultTypeInternal _AppStatusPB_default_instance_;
class ColumnPredicatePB;
class ColumnPredicatePBDefaultTypeInternal;
extern ColumnPredicatePBDefaultTypeInternal _ColumnPredicatePB_default_instance_;
class ColumnPredicatePB_Equality;
class ColumnPredicatePB_EqualityDefaultTypeInternal;
extern ColumnPredicatePB_EqualityDefaultTypeInternal _ColumnPredicatePB_Equality_default_instance_;
class ColumnPredicatePB_InList;
class ColumnPredicatePB_InListDefaultTypeInternal;
extern ColumnPredicatePB_InListDefaultTypeInternal _ColumnPredicatePB_InList_default_instance_;
class ColumnPredicatePB_IsNotNull;
class ColumnPredicatePB_IsNotNullDefaultTypeInternal;
extern ColumnPredicatePB_IsNotNullDefaultTypeInternal _ColumnPredicatePB_IsNotNull_default_instance_;
class ColumnPredicatePB_IsNull;
class ColumnPredicatePB_IsNullDefaultTypeInternal;
extern ColumnPredicatePB_IsNullDefaultTypeInternal _ColumnPredicatePB_IsNull_default_instance_;
class ColumnPredicatePB_Range;
class ColumnPredicatePB_RangeDefaultTypeInternal;
extern ColumnPredicatePB_RangeDefaultTypeInternal _ColumnPredicatePB_Range_default_instance_;
class ColumnSchemaPB;
class ColumnSchemaPBDefaultTypeInternal;
extern ColumnSchemaPBDefaultTypeInternal _ColumnSchemaPB_default_instance_;
class HostPortPB;
class HostPortPBDefaultTypeInternal;
extern HostPortPBDefaultTypeInternal _HostPortPB_default_instance_;
class NodeInstancePB;
class NodeInstancePBDefaultTypeInternal;
extern NodeInstancePBDefaultTypeInternal _NodeInstancePB_default_instance_;
class PartitionPB;
class PartitionPBDefaultTypeInternal;
extern PartitionPBDefaultTypeInternal _PartitionPB_default_instance_;
class PartitionSchemaPB;
class PartitionSchemaPBDefaultTypeInternal;
extern PartitionSchemaPBDefaultTypeInternal _PartitionSchemaPB_default_instance_;
class PartitionSchemaPB_ColumnIdentifierPB;
class PartitionSchemaPB_ColumnIdentifierPBDefaultTypeInternal;
extern PartitionSchemaPB_ColumnIdentifierPBDefaultTypeInternal _PartitionSchemaPB_ColumnIdentifierPB_default_instance_;
class PartitionSchemaPB_HashBucketSchemaPB;
class PartitionSchemaPB_HashBucketSchemaPBDefaultTypeInternal;
extern PartitionSchemaPB_HashBucketSchemaPBDefaultTypeInternal _PartitionSchemaPB_HashBucketSchemaPB_default_instance_;
class PartitionSchemaPB_RangeSchemaPB;
class PartitionSchemaPB_RangeSchemaPBDefaultTypeInternal;
extern PartitionSchemaPB_RangeSchemaPBDefaultTypeInternal _PartitionSchemaPB_RangeSchemaPB_default_instance_;
class RowOperationsPB;
class RowOperationsPBDefaultTypeInternal;
extern RowOperationsPBDefaultTypeInternal _RowOperationsPB_default_instance_;
class RowwiseRowBlockPB;
class RowwiseRowBlockPBDefaultTypeInternal;
extern RowwiseRowBlockPBDefaultTypeInternal _RowwiseRowBlockPB_default_instance_;
class SchemaPB;
class SchemaPBDefaultTypeInternal;
extern SchemaPBDefaultTypeInternal _SchemaPB_default_instance_;
class ServerEntryPB;
class ServerEntryPBDefaultTypeInternal;
extern ServerEntryPBDefaultTypeInternal _ServerEntryPB_default_instance_;
class ServerRegistrationPB;
class ServerRegistrationPBDefaultTypeInternal;
extern ServerRegistrationPBDefaultTypeInternal _ServerRegistrationPB_default_instance_;
namespace consensus {
class ChangeConfigRecordPB;
class ChangeConfigRecordPBDefaultTypeInternal;
extern ChangeConfigRecordPBDefaultTypeInternal _ChangeConfigRecordPB_default_instance_;
class ChangeConfigRequestPB;
class ChangeConfigRequestPBDefaultTypeInternal;
extern ChangeConfigRequestPBDefaultTypeInternal _ChangeConfigRequestPB_default_instance_;
class ChangeConfigResponsePB;
class ChangeConfigResponsePBDefaultTypeInternal;
extern ChangeConfigResponsePBDefaultTypeInternal _ChangeConfigResponsePB_default_instance_;
class CommitMsg;
class CommitMsgDefaultTypeInternal;
extern CommitMsgDefaultTypeInternal _CommitMsg_default_instance_;
class ConsensusErrorPB;
class ConsensusErrorPBDefaultTypeInternal;
extern ConsensusErrorPBDefaultTypeInternal _ConsensusErrorPB_default_instance_;
class ConsensusMetadataPB;
class ConsensusMetadataPBDefaultTypeInternal;
extern ConsensusMetadataPBDefaultTypeInternal _ConsensusMetadataPB_default_instance_;
class ConsensusRequestPB;
class ConsensusRequestPBDefaultTypeInternal;
extern ConsensusRequestPBDefaultTypeInternal _ConsensusRequestPB_default_instance_;
class ConsensusResponsePB;
class ConsensusResponsePBDefaultTypeInternal;
extern ConsensusResponsePBDefaultTypeInternal _ConsensusResponsePB_default_instance_;
class ConsensusStatePB;
class ConsensusStatePBDefaultTypeInternal;
extern ConsensusStatePBDefaultTypeInternal _ConsensusStatePB_default_instance_;
class ConsensusStatusPB;
class ConsensusStatusPBDefaultTypeInternal;
extern ConsensusStatusPBDefaultTypeInternal _ConsensusStatusPB_default_instance_;
class GetConsensusStateRequestPB;
class GetConsensusStateRequestPBDefaultTypeInternal;
extern GetConsensusStateRequestPBDefaultTypeInternal _GetConsensusStateRequestPB_default_instance_;
class GetConsensusStateResponsePB;
class GetConsensusStateResponsePBDefaultTypeInternal;
extern GetConsensusStateResponsePBDefaultTypeInternal _GetConsensusStateResponsePB_default_instance_;
class GetLastOpIdRequestPB;
class GetLastOpIdRequestPBDefaultTypeInternal;
extern GetLastOpIdRequestPBDefaultTypeInternal _GetLastOpIdRequestPB_default_instance_;
class GetLastOpIdResponsePB;
class GetLastOpIdResponsePBDefaultTypeInternal;
extern GetLastOpIdResponsePBDefaultTypeInternal _GetLastOpIdResponsePB_default_instance_;
class GetNodeInstanceRequestPB;
class GetNodeInstanceRequestPBDefaultTypeInternal;
extern GetNodeInstanceRequestPBDefaultTypeInternal _GetNodeInstanceRequestPB_default_instance_;
class GetNodeInstanceResponsePB;
class GetNodeInstanceResponsePBDefaultTypeInternal;
extern GetNodeInstanceResponsePBDefaultTypeInternal _GetNodeInstanceResponsePB_default_instance_;
class LeaderStepDownRequestPB;
class LeaderStepDownRequestPBDefaultTypeInternal;
extern LeaderStepDownRequestPBDefaultTypeInternal _LeaderStepDownRequestPB_default_instance_;
class LeaderStepDownResponsePB;
class LeaderStepDownResponsePBDefaultTypeInternal;
extern LeaderStepDownResponsePBDefaultTypeInternal _LeaderStepDownResponsePB_default_instance_;
class NoOpRequestPB;
class NoOpRequestPBDefaultTypeInternal;
extern NoOpRequestPBDefaultTypeInternal _NoOpRequestPB_default_instance_;
class OpId;
class OpIdDefaultTypeInternal;
extern OpIdDefaultTypeInternal _OpId_default_instance_;
class RaftConfigPB;
class RaftConfigPBDefaultTypeInternal;
extern RaftConfigPBDefaultTypeInternal _RaftConfigPB_default_instance_;
class RaftPeerPB;
class RaftPeerPBDefaultTypeInternal;
extern RaftPeerPBDefaultTypeInternal _RaftPeerPB_default_instance_;
class ReplicateMsg;
class ReplicateMsgDefaultTypeInternal;
extern ReplicateMsgDefaultTypeInternal _ReplicateMsg_default_instance_;
class RunLeaderElectionRequestPB;
class RunLeaderElectionRequestPBDefaultTypeInternal;
extern RunLeaderElectionRequestPBDefaultTypeInternal _RunLeaderElectionRequestPB_default_instance_;
class RunLeaderElectionResponsePB;
class RunLeaderElectionResponsePBDefaultTypeInternal;
extern RunLeaderElectionResponsePBDefaultTypeInternal _RunLeaderElectionResponsePB_default_instance_;
class StartTabletCopyRequestPB;
class StartTabletCopyRequestPBDefaultTypeInternal;
extern StartTabletCopyRequestPBDefaultTypeInternal _StartTabletCopyRequestPB_default_instance_;
class StartTabletCopyResponsePB;
class StartTabletCopyResponsePBDefaultTypeInternal;
extern StartTabletCopyResponsePBDefaultTypeInternal _StartTabletCopyResponsePB_default_instance_;
class TransactionStatusPB;
class TransactionStatusPBDefaultTypeInternal;
extern TransactionStatusPBDefaultTypeInternal _TransactionStatusPB_default_instance_;
class VoteRequestPB;
class VoteRequestPBDefaultTypeInternal;
extern VoteRequestPBDefaultTypeInternal _VoteRequestPB_default_instance_;
class VoteResponsePB;
class VoteResponsePBDefaultTypeInternal;
extern VoteResponsePBDefaultTypeInternal _VoteResponsePB_default_instance_;
}  // namespace consensus
namespace rpc {
class AuthenticationTypePB;
class AuthenticationTypePBDefaultTypeInternal;
extern AuthenticationTypePBDefaultTypeInternal _AuthenticationTypePB_default_instance_;
class AuthenticationTypePB_Certificate;
class AuthenticationTypePB_CertificateDefaultTypeInternal;
extern AuthenticationTypePB_CertificateDefaultTypeInternal _AuthenticationTypePB_Certificate_default_instance_;
class AuthenticationTypePB_Sasl;
class AuthenticationTypePB_SaslDefaultTypeInternal;
extern AuthenticationTypePB_SaslDefaultTypeInternal _AuthenticationTypePB_Sasl_default_instance_;
class AuthenticationTypePB_Token;
class AuthenticationTypePB_TokenDefaultTypeInternal;
extern AuthenticationTypePB_TokenDefaultTypeInternal _AuthenticationTypePB_Token_default_instance_;
class ConnectionContextPB;
class ConnectionContextPBDefaultTypeInternal;
extern ConnectionContextPBDefaultTypeInternal _ConnectionContextPB_default_instance_;
class ErrorStatusPB;
class ErrorStatusPBDefaultTypeInternal;
extern ErrorStatusPBDefaultTypeInternal _ErrorStatusPB_default_instance_;
class NegotiatePB;
class NegotiatePBDefaultTypeInternal;
extern NegotiatePBDefaultTypeInternal _NegotiatePB_default_instance_;
class NegotiatePB_SaslMechanism;
class NegotiatePB_SaslMechanismDefaultTypeInternal;
extern NegotiatePB_SaslMechanismDefaultTypeInternal _NegotiatePB_SaslMechanism_default_instance_;
class RemoteMethodPB;
class RemoteMethodPBDefaultTypeInternal;
extern RemoteMethodPBDefaultTypeInternal _RemoteMethodPB_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class RequestIdPB;
class RequestIdPBDefaultTypeInternal;
extern RequestIdPBDefaultTypeInternal _RequestIdPB_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class UserInformationPB;
class UserInformationPBDefaultTypeInternal;
extern UserInformationPBDefaultTypeInternal _UserInformationPB_default_instance_;
}  // namespace rpc
namespace tablet {
class ColumnDataPB;
class ColumnDataPBDefaultTypeInternal;
extern ColumnDataPBDefaultTypeInternal _ColumnDataPB_default_instance_;
class DeltaDataPB;
class DeltaDataPBDefaultTypeInternal;
extern DeltaDataPBDefaultTypeInternal _DeltaDataPB_default_instance_;
class DeltaStatsPB;
class DeltaStatsPBDefaultTypeInternal;
extern DeltaStatsPBDefaultTypeInternal _DeltaStatsPB_default_instance_;
class DeltaStatsPB_ColumnStats;
class DeltaStatsPB_ColumnStatsDefaultTypeInternal;
extern DeltaStatsPB_ColumnStatsDefaultTypeInternal _DeltaStatsPB_ColumnStats_default_instance_;
class MemStoreTargetPB;
class MemStoreTargetPBDefaultTypeInternal;
extern MemStoreTargetPBDefaultTypeInternal _MemStoreTargetPB_default_instance_;
class OperationResultPB;
class OperationResultPBDefaultTypeInternal;
extern OperationResultPBDefaultTypeInternal _OperationResultPB_default_instance_;
class RowSetDataPB;
class RowSetDataPBDefaultTypeInternal;
extern RowSetDataPBDefaultTypeInternal _RowSetDataPB_default_instance_;
class TabletStatusPB;
class TabletStatusPBDefaultTypeInternal;
extern TabletStatusPBDefaultTypeInternal _TabletStatusPB_default_instance_;
class TabletSuperBlockPB;
class TabletSuperBlockPBDefaultTypeInternal;
extern TabletSuperBlockPBDefaultTypeInternal _TabletSuperBlockPB_default_instance_;
class TxResultPB;
class TxResultPBDefaultTypeInternal;
extern TxResultPBDefaultTypeInternal _TxResultPB_default_instance_;
}  // namespace tablet
namespace tserver {
class AlterSchemaRequestPB;
class AlterSchemaRequestPBDefaultTypeInternal;
extern AlterSchemaRequestPBDefaultTypeInternal _AlterSchemaRequestPB_default_instance_;
class AlterSchemaResponsePB;
class AlterSchemaResponsePBDefaultTypeInternal;
extern AlterSchemaResponsePBDefaultTypeInternal _AlterSchemaResponsePB_default_instance_;
class ColumnRangePredicateListPB;
class ColumnRangePredicateListPBDefaultTypeInternal;
extern ColumnRangePredicateListPBDefaultTypeInternal _ColumnRangePredicateListPB_default_instance_;
class ColumnRangePredicatePB;
class ColumnRangePredicatePBDefaultTypeInternal;
extern ColumnRangePredicatePBDefaultTypeInternal _ColumnRangePredicatePB_default_instance_;
class CreateTabletRequestPB;
class CreateTabletRequestPBDefaultTypeInternal;
extern CreateTabletRequestPBDefaultTypeInternal _CreateTabletRequestPB_default_instance_;
class CreateTabletResponsePB;
class CreateTabletResponsePBDefaultTypeInternal;
extern CreateTabletResponsePBDefaultTypeInternal _CreateTabletResponsePB_default_instance_;
class DeleteTabletRequestPB;
class DeleteTabletRequestPBDefaultTypeInternal;
extern DeleteTabletRequestPBDefaultTypeInternal _DeleteTabletRequestPB_default_instance_;
class DeleteTabletResponsePB;
class DeleteTabletResponsePBDefaultTypeInternal;
extern DeleteTabletResponsePBDefaultTypeInternal _DeleteTabletResponsePB_default_instance_;
class ListTabletsRequestPB;
class ListTabletsRequestPBDefaultTypeInternal;
extern ListTabletsRequestPBDefaultTypeInternal _ListTabletsRequestPB_default_instance_;
class ListTabletsResponsePB;
class ListTabletsResponsePBDefaultTypeInternal;
extern ListTabletsResponsePBDefaultTypeInternal _ListTabletsResponsePB_default_instance_;
class ListTabletsResponsePB_StatusAndSchemaPB;
class ListTabletsResponsePB_StatusAndSchemaPBDefaultTypeInternal;
extern ListTabletsResponsePB_StatusAndSchemaPBDefaultTypeInternal _ListTabletsResponsePB_StatusAndSchemaPB_default_instance_;
class NewScanRequestPB;
class NewScanRequestPBDefaultTypeInternal;
extern NewScanRequestPBDefaultTypeInternal _NewScanRequestPB_default_instance_;
class PingRequestPB;
class PingRequestPBDefaultTypeInternal;
extern PingRequestPBDefaultTypeInternal _PingRequestPB_default_instance_;
class PingResponsePB;
class PingResponsePBDefaultTypeInternal;
extern PingResponsePBDefaultTypeInternal _PingResponsePB_default_instance_;
class ResourceMetricsPB;
class ResourceMetricsPBDefaultTypeInternal;
extern ResourceMetricsPBDefaultTypeInternal _ResourceMetricsPB_default_instance_;
class ScanRequestPB;
class ScanRequestPBDefaultTypeInternal;
extern ScanRequestPBDefaultTypeInternal _ScanRequestPB_default_instance_;
class ScanResponsePB;
class ScanResponsePBDefaultTypeInternal;
extern ScanResponsePBDefaultTypeInternal _ScanResponsePB_default_instance_;
class ScannerKeepAliveRequestPB;
class ScannerKeepAliveRequestPBDefaultTypeInternal;
extern ScannerKeepAliveRequestPBDefaultTypeInternal _ScannerKeepAliveRequestPB_default_instance_;
class ScannerKeepAliveResponsePB;
class ScannerKeepAliveResponsePBDefaultTypeInternal;
extern ScannerKeepAliveResponsePBDefaultTypeInternal _ScannerKeepAliveResponsePB_default_instance_;
class TabletServerErrorPB;
class TabletServerErrorPBDefaultTypeInternal;
extern TabletServerErrorPBDefaultTypeInternal _TabletServerErrorPB_default_instance_;
class WriteRequestPB;
class WriteRequestPBDefaultTypeInternal;
extern WriteRequestPBDefaultTypeInternal _WriteRequestPB_default_instance_;
class WriteResponsePB;
class WriteResponsePBDefaultTypeInternal;
extern WriteResponsePBDefaultTypeInternal _WriteResponsePB_default_instance_;
class WriteResponsePB_PerRowErrorPB;
class WriteResponsePB_PerRowErrorPBDefaultTypeInternal;
extern WriteResponsePB_PerRowErrorPBDefaultTypeInternal _WriteResponsePB_PerRowErrorPB_default_instance_;
}  // namespace tserver
}  // namespace kudu

namespace kudu {
namespace consensus {

namespace protobuf_consensus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_consensus_2eproto

enum ConsensusErrorPB_Code {
  ConsensusErrorPB_Code_UNKNOWN = 0,
  ConsensusErrorPB_Code_INVALID_TERM = 2,
  ConsensusErrorPB_Code_LAST_OPID_TOO_OLD = 3,
  ConsensusErrorPB_Code_ALREADY_VOTED = 4,
  ConsensusErrorPB_Code_NOT_IN_QUORUM = 5,
  ConsensusErrorPB_Code_PRECEDING_ENTRY_DIDNT_MATCH = 6,
  ConsensusErrorPB_Code_LEADER_IS_ALIVE = 7,
  ConsensusErrorPB_Code_CONSENSUS_BUSY = 8,
  ConsensusErrorPB_Code_CANNOT_PREPARE = 9
};
bool ConsensusErrorPB_Code_IsValid(int value);
const ConsensusErrorPB_Code ConsensusErrorPB_Code_Code_MIN = ConsensusErrorPB_Code_UNKNOWN;
const ConsensusErrorPB_Code ConsensusErrorPB_Code_Code_MAX = ConsensusErrorPB_Code_CANNOT_PREPARE;
const int ConsensusErrorPB_Code_Code_ARRAYSIZE = ConsensusErrorPB_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConsensusErrorPB_Code_descriptor();
inline const ::std::string& ConsensusErrorPB_Code_Name(ConsensusErrorPB_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConsensusErrorPB_Code_descriptor(), value);
}
inline bool ConsensusErrorPB_Code_Parse(
    const ::std::string& name, ConsensusErrorPB_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsensusErrorPB_Code>(
    ConsensusErrorPB_Code_descriptor(), name, value);
}
enum OperationType {
  UNKNOWN_OP = 0,
  NO_OP = 1,
  WRITE_OP = 3,
  ALTER_SCHEMA_OP = 4,
  CHANGE_CONFIG_OP = 5
};
bool OperationType_IsValid(int value);
const OperationType OperationType_MIN = UNKNOWN_OP;
const OperationType OperationType_MAX = CHANGE_CONFIG_OP;
const int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperationType_descriptor();
inline const ::std::string& OperationType_Name(OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperationType_descriptor(), value);
}
inline bool OperationType_Parse(
    const ::std::string& name, OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
enum DriverType {
  UNKNOWN_DRIVER = 0,
  LEADER = 1,
  REPLICA = 2
};
bool DriverType_IsValid(int value);
const DriverType DriverType_MIN = UNKNOWN_DRIVER;
const DriverType DriverType_MAX = REPLICA;
const int DriverType_ARRAYSIZE = DriverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriverType_descriptor();
inline const ::std::string& DriverType_Name(DriverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriverType_descriptor(), value);
}
inline bool DriverType_Parse(
    const ::std::string& name, DriverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriverType>(
    DriverType_descriptor(), name, value);
}
enum ChangeConfigType {
  UNKNOWN_CHANGE = 0,
  ADD_SERVER = 1,
  REMOVE_SERVER = 2,
  CHANGE_ROLE = 3
};
bool ChangeConfigType_IsValid(int value);
const ChangeConfigType ChangeConfigType_MIN = UNKNOWN_CHANGE;
const ChangeConfigType ChangeConfigType_MAX = CHANGE_ROLE;
const int ChangeConfigType_ARRAYSIZE = ChangeConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeConfigType_descriptor();
inline const ::std::string& ChangeConfigType_Name(ChangeConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeConfigType_descriptor(), value);
}
inline bool ChangeConfigType_Parse(
    const ::std::string& name, ChangeConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeConfigType>(
    ChangeConfigType_descriptor(), name, value);
}
enum OpIdType {
  UNKNOWN_OPID_TYPE = 0,
  RECEIVED_OPID = 1,
  COMMITTED_OPID = 2
};
bool OpIdType_IsValid(int value);
const OpIdType OpIdType_MIN = UNKNOWN_OPID_TYPE;
const OpIdType OpIdType_MAX = COMMITTED_OPID;
const int OpIdType_ARRAYSIZE = OpIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpIdType_descriptor();
inline const ::std::string& OpIdType_Name(OpIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpIdType_descriptor(), value);
}
inline bool OpIdType_Parse(
    const ::std::string& name, OpIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpIdType>(
    OpIdType_descriptor(), name, value);
}
// ===================================================================

class ConsensusErrorPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusErrorPB) */ {
 public:
  ConsensusErrorPB();
  virtual ~ConsensusErrorPB();

  ConsensusErrorPB(const ConsensusErrorPB& from);

  inline ConsensusErrorPB& operator=(const ConsensusErrorPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusErrorPB& default_instance();

  static inline const ConsensusErrorPB* internal_default_instance() {
    return reinterpret_cast<const ConsensusErrorPB*>(
               &_ConsensusErrorPB_default_instance_);
  }

  void Swap(ConsensusErrorPB* other);

  // implements Message ----------------------------------------------

  inline ConsensusErrorPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusErrorPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusErrorPB& from);
  void MergeFrom(const ConsensusErrorPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusErrorPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConsensusErrorPB_Code Code;
  static const Code UNKNOWN =
    ConsensusErrorPB_Code_UNKNOWN;
  static const Code INVALID_TERM =
    ConsensusErrorPB_Code_INVALID_TERM;
  static const Code LAST_OPID_TOO_OLD =
    ConsensusErrorPB_Code_LAST_OPID_TOO_OLD;
  static const Code ALREADY_VOTED =
    ConsensusErrorPB_Code_ALREADY_VOTED;
  static const Code NOT_IN_QUORUM =
    ConsensusErrorPB_Code_NOT_IN_QUORUM;
  static const Code PRECEDING_ENTRY_DIDNT_MATCH =
    ConsensusErrorPB_Code_PRECEDING_ENTRY_DIDNT_MATCH;
  static const Code LEADER_IS_ALIVE =
    ConsensusErrorPB_Code_LEADER_IS_ALIVE;
  static const Code CONSENSUS_BUSY =
    ConsensusErrorPB_Code_CONSENSUS_BUSY;
  static const Code CANNOT_PREPARE =
    ConsensusErrorPB_Code_CANNOT_PREPARE;
  static inline bool Code_IsValid(int value) {
    return ConsensusErrorPB_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ConsensusErrorPB_Code_Code_MIN;
  static const Code Code_MAX =
    ConsensusErrorPB_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ConsensusErrorPB_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ConsensusErrorPB_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ConsensusErrorPB_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ConsensusErrorPB_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kudu.AppStatusPB status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::kudu::AppStatusPB& status() const;
  ::kudu::AppStatusPB* mutable_status();
  ::kudu::AppStatusPB* release_status();
  void set_allocated_status(::kudu::AppStatusPB* status);

  // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::kudu::consensus::ConsensusErrorPB_Code code() const;
  void set_code(::kudu::consensus::ConsensusErrorPB_Code value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusErrorPB)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::AppStatusPB* status_;
  int code_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeConfigRecordPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ChangeConfigRecordPB) */ {
 public:
  ChangeConfigRecordPB();
  virtual ~ChangeConfigRecordPB();

  ChangeConfigRecordPB(const ChangeConfigRecordPB& from);

  inline ChangeConfigRecordPB& operator=(const ChangeConfigRecordPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigRecordPB& default_instance();

  static inline const ChangeConfigRecordPB* internal_default_instance() {
    return reinterpret_cast<const ChangeConfigRecordPB*>(
               &_ChangeConfigRecordPB_default_instance_);
  }

  void Swap(ChangeConfigRecordPB* other);

  // implements Message ----------------------------------------------

  inline ChangeConfigRecordPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeConfigRecordPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeConfigRecordPB& from);
  void MergeFrom(const ChangeConfigRecordPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeConfigRecordPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // required .kudu.consensus.RaftConfigPB old_config = 2;
  bool has_old_config() const;
  void clear_old_config();
  static const int kOldConfigFieldNumber = 2;
  const ::kudu::consensus::RaftConfigPB& old_config() const;
  ::kudu::consensus::RaftConfigPB* mutable_old_config();
  ::kudu::consensus::RaftConfigPB* release_old_config();
  void set_allocated_old_config(::kudu::consensus::RaftConfigPB* old_config);

  // required .kudu.consensus.RaftConfigPB new_config = 3;
  bool has_new_config() const;
  void clear_new_config();
  static const int kNewConfigFieldNumber = 3;
  const ::kudu::consensus::RaftConfigPB& new_config() const;
  ::kudu::consensus::RaftConfigPB* mutable_new_config();
  ::kudu::consensus::RaftConfigPB* release_new_config();
  void set_allocated_new_config(::kudu::consensus::RaftConfigPB* new_config);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ChangeConfigRecordPB)
 private:
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_old_config();
  void clear_has_old_config();
  void set_has_new_config();
  void clear_has_new_config();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  ::kudu::consensus::RaftConfigPB* old_config_;
  ::kudu::consensus::RaftConfigPB* new_config_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeConfigRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ChangeConfigRequestPB) */ {
 public:
  ChangeConfigRequestPB();
  virtual ~ChangeConfigRequestPB();

  ChangeConfigRequestPB(const ChangeConfigRequestPB& from);

  inline ChangeConfigRequestPB& operator=(const ChangeConfigRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigRequestPB& default_instance();

  static inline const ChangeConfigRequestPB* internal_default_instance() {
    return reinterpret_cast<const ChangeConfigRequestPB*>(
               &_ChangeConfigRequestPB_default_instance_);
  }

  void Swap(ChangeConfigRequestPB* other);

  // implements Message ----------------------------------------------

  inline ChangeConfigRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeConfigRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeConfigRequestPB& from);
  void MergeFrom(const ChangeConfigRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeConfigRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 4;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 4;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .kudu.consensus.RaftPeerPB server = 3;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 3;
  const ::kudu::consensus::RaftPeerPB& server() const;
  ::kudu::consensus::RaftPeerPB* mutable_server();
  ::kudu::consensus::RaftPeerPB* release_server();
  void set_allocated_server(::kudu::consensus::RaftPeerPB* server);

  // optional int64 cas_config_opid_index = 5;
  bool has_cas_config_opid_index() const;
  void clear_cas_config_opid_index();
  static const int kCasConfigOpidIndexFieldNumber = 5;
  ::google::protobuf::int64 cas_config_opid_index() const;
  void set_cas_config_opid_index(::google::protobuf::int64 value);

  // optional .kudu.consensus.ChangeConfigType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::kudu::consensus::ChangeConfigType type() const;
  void set_type(::kudu::consensus::ChangeConfigType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ChangeConfigRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_type();
  void clear_has_type();
  void set_has_server();
  void clear_has_server();
  void set_has_cas_config_opid_index();
  void clear_has_cas_config_opid_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  ::kudu::consensus::RaftPeerPB* server_;
  ::google::protobuf::int64 cas_config_opid_index_;
  int type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeConfigResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ChangeConfigResponsePB) */ {
 public:
  ChangeConfigResponsePB();
  virtual ~ChangeConfigResponsePB();

  ChangeConfigResponsePB(const ChangeConfigResponsePB& from);

  inline ChangeConfigResponsePB& operator=(const ChangeConfigResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigResponsePB& default_instance();

  static inline const ChangeConfigResponsePB* internal_default_instance() {
    return reinterpret_cast<const ChangeConfigResponsePB*>(
               &_ChangeConfigResponsePB_default_instance_);
  }

  void Swap(ChangeConfigResponsePB* other);

  // implements Message ----------------------------------------------

  inline ChangeConfigResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeConfigResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeConfigResponsePB& from);
  void MergeFrom(const ChangeConfigResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeConfigResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // optional .kudu.consensus.RaftPeerPB new_config = 2;
  bool has_new_config() const;
  void clear_new_config();
  static const int kNewConfigFieldNumber = 2;
  const ::kudu::consensus::RaftPeerPB& new_config() const;
  ::kudu::consensus::RaftPeerPB* mutable_new_config();
  ::kudu::consensus::RaftPeerPB* release_new_config();
  void set_allocated_new_config(::kudu::consensus::RaftPeerPB* new_config);

  // optional fixed64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ChangeConfigResponsePB)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_new_config();
  void clear_has_new_config();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  ::kudu::consensus::RaftPeerPB* new_config_;
  ::google::protobuf::uint64 timestamp_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicateMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ReplicateMsg) */ {
 public:
  ReplicateMsg();
  virtual ~ReplicateMsg();

  ReplicateMsg(const ReplicateMsg& from);

  inline ReplicateMsg& operator=(const ReplicateMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicateMsg& default_instance();

  static inline const ReplicateMsg* internal_default_instance() {
    return reinterpret_cast<const ReplicateMsg*>(
               &_ReplicateMsg_default_instance_);
  }

  void Swap(ReplicateMsg* other);

  // implements Message ----------------------------------------------

  inline ReplicateMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplicateMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplicateMsg& from);
  void MergeFrom(const ReplicateMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplicateMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .kudu.consensus.OpId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::kudu::consensus::OpId& id() const;
  ::kudu::consensus::OpId* mutable_id();
  ::kudu::consensus::OpId* release_id();
  void set_allocated_id(::kudu::consensus::OpId* id);

  // optional .kudu.tserver.WriteRequestPB write_request = 5;
  bool has_write_request() const;
  void clear_write_request();
  static const int kWriteRequestFieldNumber = 5;
  const ::kudu::tserver::WriteRequestPB& write_request() const;
  ::kudu::tserver::WriteRequestPB* mutable_write_request();
  ::kudu::tserver::WriteRequestPB* release_write_request();
  void set_allocated_write_request(::kudu::tserver::WriteRequestPB* write_request);

  // optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
  bool has_alter_schema_request() const;
  void clear_alter_schema_request();
  static const int kAlterSchemaRequestFieldNumber = 6;
  const ::kudu::tserver::AlterSchemaRequestPB& alter_schema_request() const;
  ::kudu::tserver::AlterSchemaRequestPB* mutable_alter_schema_request();
  ::kudu::tserver::AlterSchemaRequestPB* release_alter_schema_request();
  void set_allocated_alter_schema_request(::kudu::tserver::AlterSchemaRequestPB* alter_schema_request);

  // optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
  bool has_change_config_record() const;
  void clear_change_config_record();
  static const int kChangeConfigRecordFieldNumber = 7;
  const ::kudu::consensus::ChangeConfigRecordPB& change_config_record() const;
  ::kudu::consensus::ChangeConfigRecordPB* mutable_change_config_record();
  ::kudu::consensus::ChangeConfigRecordPB* release_change_config_record();
  void set_allocated_change_config_record(::kudu::consensus::ChangeConfigRecordPB* change_config_record);

  // optional .kudu.rpc.RequestIdPB request_id = 8;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 8;
  const ::kudu::rpc::RequestIdPB& request_id() const;
  ::kudu::rpc::RequestIdPB* mutable_request_id();
  ::kudu::rpc::RequestIdPB* release_request_id();
  void set_allocated_request_id(::kudu::rpc::RequestIdPB* request_id);

  // optional .kudu.consensus.NoOpRequestPB noop_request = 999;
  bool has_noop_request() const;
  void clear_noop_request();
  static const int kNoopRequestFieldNumber = 999;
  const ::kudu::consensus::NoOpRequestPB& noop_request() const;
  ::kudu::consensus::NoOpRequestPB* mutable_noop_request();
  ::kudu::consensus::NoOpRequestPB* release_noop_request();
  void set_allocated_noop_request(::kudu::consensus::NoOpRequestPB* noop_request);

  // required fixed64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required .kudu.consensus.OperationType op_type = 4;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 4;
  ::kudu::consensus::OperationType op_type() const;
  void set_op_type(::kudu::consensus::OperationType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ReplicateMsg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_op_type();
  void clear_has_op_type();
  void set_has_write_request();
  void clear_has_write_request();
  void set_has_alter_schema_request();
  void clear_has_alter_schema_request();
  void set_has_change_config_record();
  void clear_has_change_config_record();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_noop_request();
  void clear_has_noop_request();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::consensus::OpId* id_;
  ::kudu::tserver::WriteRequestPB* write_request_;
  ::kudu::tserver::AlterSchemaRequestPB* alter_schema_request_;
  ::kudu::consensus::ChangeConfigRecordPB* change_config_record_;
  ::kudu::rpc::RequestIdPB* request_id_;
  ::kudu::consensus::NoOpRequestPB* noop_request_;
  ::google::protobuf::uint64 timestamp_;
  int op_type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.CommitMsg) */ {
 public:
  CommitMsg();
  virtual ~CommitMsg();

  CommitMsg(const CommitMsg& from);

  inline CommitMsg& operator=(const CommitMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitMsg& default_instance();

  static inline const CommitMsg* internal_default_instance() {
    return reinterpret_cast<const CommitMsg*>(
               &_CommitMsg_default_instance_);
  }

  void Swap(CommitMsg* other);

  // implements Message ----------------------------------------------

  inline CommitMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  CommitMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommitMsg& from);
  void MergeFrom(const CommitMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommitMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.consensus.OpId commited_op_id = 2;
  bool has_commited_op_id() const;
  void clear_commited_op_id();
  static const int kCommitedOpIdFieldNumber = 2;
  const ::kudu::consensus::OpId& commited_op_id() const;
  ::kudu::consensus::OpId* mutable_commited_op_id();
  ::kudu::consensus::OpId* release_commited_op_id();
  void set_allocated_commited_op_id(::kudu::consensus::OpId* commited_op_id);

  // optional .kudu.tablet.TxResultPB result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::kudu::tablet::TxResultPB& result() const;
  ::kudu::tablet::TxResultPB* mutable_result();
  ::kudu::tablet::TxResultPB* release_result();
  void set_allocated_result(::kudu::tablet::TxResultPB* result);

  // required .kudu.consensus.OperationType op_type = 1;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  ::kudu::consensus::OperationType op_type() const;
  void set_op_type(::kudu::consensus::OperationType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.CommitMsg)
 private:
  void set_has_op_type();
  void clear_has_op_type();
  void set_has_commited_op_id();
  void clear_has_commited_op_id();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::consensus::OpId* commited_op_id_;
  ::kudu::tablet::TxResultPB* result_;
  int op_type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoOpRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.NoOpRequestPB) */ {
 public:
  NoOpRequestPB();
  virtual ~NoOpRequestPB();

  NoOpRequestPB(const NoOpRequestPB& from);

  inline NoOpRequestPB& operator=(const NoOpRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoOpRequestPB& default_instance();

  static inline const NoOpRequestPB* internal_default_instance() {
    return reinterpret_cast<const NoOpRequestPB*>(
               &_NoOpRequestPB_default_instance_);
  }

  void Swap(NoOpRequestPB* other);

  // implements Message ----------------------------------------------

  inline NoOpRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  NoOpRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoOpRequestPB& from);
  void MergeFrom(const NoOpRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoOpRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes payload_for_tests = 1;
  bool has_payload_for_tests() const;
  void clear_payload_for_tests();
  static const int kPayloadForTestsFieldNumber = 1;
  const ::std::string& payload_for_tests() const;
  void set_payload_for_tests(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_for_tests(::std::string&& value);
  #endif
  void set_payload_for_tests(const char* value);
  void set_payload_for_tests(const void* value, size_t size);
  ::std::string* mutable_payload_for_tests();
  ::std::string* release_payload_for_tests();
  void set_allocated_payload_for_tests(::std::string* payload_for_tests);

  // @@protoc_insertion_point(class_scope:kudu.consensus.NoOpRequestPB)
 private:
  void set_has_payload_for_tests();
  void clear_has_payload_for_tests();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr payload_for_tests_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsensusStatusPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusStatusPB) */ {
 public:
  ConsensusStatusPB();
  virtual ~ConsensusStatusPB();

  ConsensusStatusPB(const ConsensusStatusPB& from);

  inline ConsensusStatusPB& operator=(const ConsensusStatusPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusStatusPB& default_instance();

  static inline const ConsensusStatusPB* internal_default_instance() {
    return reinterpret_cast<const ConsensusStatusPB*>(
               &_ConsensusStatusPB_default_instance_);
  }

  void Swap(ConsensusStatusPB* other);

  // implements Message ----------------------------------------------

  inline ConsensusStatusPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusStatusPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusStatusPB& from);
  void MergeFrom(const ConsensusStatusPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusStatusPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .kudu.consensus.OpId last_received = 1;
  bool has_last_received() const;
  void clear_last_received();
  static const int kLastReceivedFieldNumber = 1;
  const ::kudu::consensus::OpId& last_received() const;
  ::kudu::consensus::OpId* mutable_last_received();
  ::kudu::consensus::OpId* release_last_received();
  void set_allocated_last_received(::kudu::consensus::OpId* last_received);

  // optional .kudu.consensus.OpId last_received_current_leader = 4;
  bool has_last_received_current_leader() const;
  void clear_last_received_current_leader();
  static const int kLastReceivedCurrentLeaderFieldNumber = 4;
  const ::kudu::consensus::OpId& last_received_current_leader() const;
  ::kudu::consensus::OpId* mutable_last_received_current_leader();
  ::kudu::consensus::OpId* release_last_received_current_leader();
  void set_allocated_last_received_current_leader(::kudu::consensus::OpId* last_received_current_leader);

  // optional .kudu.consensus.ConsensusErrorPB error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::kudu::consensus::ConsensusErrorPB& error() const;
  ::kudu::consensus::ConsensusErrorPB* mutable_error();
  ::kudu::consensus::ConsensusErrorPB* release_error();
  void set_allocated_error(::kudu::consensus::ConsensusErrorPB* error);

  // optional int64 last_committed_idx = 2;
  bool has_last_committed_idx() const;
  void clear_last_committed_idx();
  static const int kLastCommittedIdxFieldNumber = 2;
  ::google::protobuf::int64 last_committed_idx() const;
  void set_last_committed_idx(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusStatusPB)
 private:
  void set_has_last_received();
  void clear_has_last_received();
  void set_has_last_received_current_leader();
  void clear_has_last_received_current_leader();
  void set_has_last_committed_idx();
  void clear_has_last_committed_idx();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::consensus::OpId* last_received_;
  ::kudu::consensus::OpId* last_received_current_leader_;
  ::kudu::consensus::ConsensusErrorPB* error_;
  ::google::protobuf::int64 last_committed_idx_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.VoteRequestPB) */ {
 public:
  VoteRequestPB();
  virtual ~VoteRequestPB();

  VoteRequestPB(const VoteRequestPB& from);

  inline VoteRequestPB& operator=(const VoteRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequestPB& default_instance();

  static inline const VoteRequestPB* internal_default_instance() {
    return reinterpret_cast<const VoteRequestPB*>(
               &_VoteRequestPB_default_instance_);
  }

  void Swap(VoteRequestPB* other);

  // implements Message ----------------------------------------------

  inline VoteRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteRequestPB& from);
  void MergeFrom(const VoteRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 6;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 6;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required string tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const char* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes candidate_uuid = 2;
  bool has_candidate_uuid() const;
  void clear_candidate_uuid();
  static const int kCandidateUuidFieldNumber = 2;
  const ::std::string& candidate_uuid() const;
  void set_candidate_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_uuid(::std::string&& value);
  #endif
  void set_candidate_uuid(const char* value);
  void set_candidate_uuid(const void* value, size_t size);
  ::std::string* mutable_candidate_uuid();
  ::std::string* release_candidate_uuid();
  void set_allocated_candidate_uuid(::std::string* candidate_uuid);

  // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
  bool has_candidate_status() const;
  void clear_candidate_status();
  static const int kCandidateStatusFieldNumber = 4;
  const ::kudu::consensus::ConsensusStatusPB& candidate_status() const;
  ::kudu::consensus::ConsensusStatusPB* mutable_candidate_status();
  ::kudu::consensus::ConsensusStatusPB* release_candidate_status();
  void set_allocated_candidate_status(::kudu::consensus::ConsensusStatusPB* candidate_status);

  // required int64 candidate_term = 3;
  bool has_candidate_term() const;
  void clear_candidate_term();
  static const int kCandidateTermFieldNumber = 3;
  ::google::protobuf::int64 candidate_term() const;
  void set_candidate_term(::google::protobuf::int64 value);

  // optional bool ignore_live_leader = 5 [default = false];
  bool has_ignore_live_leader() const;
  void clear_ignore_live_leader();
  static const int kIgnoreLiveLeaderFieldNumber = 5;
  bool ignore_live_leader() const;
  void set_ignore_live_leader(bool value);

  // optional bool is_pre_election = 7 [default = false];
  bool has_is_pre_election() const;
  void clear_is_pre_election();
  static const int kIsPreElectionFieldNumber = 7;
  bool is_pre_election() const;
  void set_is_pre_election(bool value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.VoteRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_candidate_uuid();
  void clear_has_candidate_uuid();
  void set_has_candidate_term();
  void clear_has_candidate_term();
  void set_has_candidate_status();
  void clear_has_candidate_status();
  void set_has_ignore_live_leader();
  void clear_has_ignore_live_leader();
  void set_has_is_pre_election();
  void clear_has_is_pre_election();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  ::google::protobuf::internal::ArenaStringPtr candidate_uuid_;
  ::kudu::consensus::ConsensusStatusPB* candidate_status_;
  ::google::protobuf::int64 candidate_term_;
  bool ignore_live_leader_;
  bool is_pre_election_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.VoteResponsePB) */ {
 public:
  VoteResponsePB();
  virtual ~VoteResponsePB();

  VoteResponsePB(const VoteResponsePB& from);

  inline VoteResponsePB& operator=(const VoteResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponsePB& default_instance();

  static inline const VoteResponsePB* internal_default_instance() {
    return reinterpret_cast<const VoteResponsePB*>(
               &_VoteResponsePB_default_instance_);
  }

  void Swap(VoteResponsePB* other);

  // implements Message ----------------------------------------------

  inline VoteResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteResponsePB& from);
  void MergeFrom(const VoteResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes responder_uuid = 1;
  bool has_responder_uuid() const;
  void clear_responder_uuid();
  static const int kResponderUuidFieldNumber = 1;
  const ::std::string& responder_uuid() const;
  void set_responder_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_responder_uuid(::std::string&& value);
  #endif
  void set_responder_uuid(const char* value);
  void set_responder_uuid(const void* value, size_t size);
  ::std::string* mutable_responder_uuid();
  ::std::string* release_responder_uuid();
  void set_allocated_responder_uuid(::std::string* responder_uuid);

  // optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
  bool has_consensus_error() const;
  void clear_consensus_error();
  static const int kConsensusErrorFieldNumber = 998;
  const ::kudu::consensus::ConsensusErrorPB& consensus_error() const;
  ::kudu::consensus::ConsensusErrorPB* mutable_consensus_error();
  ::kudu::consensus::ConsensusErrorPB* release_consensus_error();
  void set_allocated_consensus_error(::kudu::consensus::ConsensusErrorPB* consensus_error);

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 999;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // optional int64 responder_term = 2;
  bool has_responder_term() const;
  void clear_responder_term();
  static const int kResponderTermFieldNumber = 2;
  ::google::protobuf::int64 responder_term() const;
  void set_responder_term(::google::protobuf::int64 value);

  // optional bool vote_granted = 3;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 3;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.VoteResponsePB)
 private:
  void set_has_responder_uuid();
  void clear_has_responder_uuid();
  void set_has_responder_term();
  void clear_has_responder_term();
  void set_has_vote_granted();
  void clear_has_vote_granted();
  void set_has_consensus_error();
  void clear_has_consensus_error();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr responder_uuid_;
  ::kudu::consensus::ConsensusErrorPB* consensus_error_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  ::google::protobuf::int64 responder_term_;
  bool vote_granted_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsensusRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusRequestPB) */ {
 public:
  ConsensusRequestPB();
  virtual ~ConsensusRequestPB();

  ConsensusRequestPB(const ConsensusRequestPB& from);

  inline ConsensusRequestPB& operator=(const ConsensusRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusRequestPB& default_instance();

  static inline const ConsensusRequestPB* internal_default_instance() {
    return reinterpret_cast<const ConsensusRequestPB*>(
               &_ConsensusRequestPB_default_instance_);
  }

  void Swap(ConsensusRequestPB* other);

  // implements Message ----------------------------------------------

  inline ConsensusRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusRequestPB& from);
  void MergeFrom(const ConsensusRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kudu.consensus.ReplicateMsg ops = 6;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 6;
  const ::kudu::consensus::ReplicateMsg& ops(int index) const;
  ::kudu::consensus::ReplicateMsg* mutable_ops(int index);
  ::kudu::consensus::ReplicateMsg* add_ops();
  ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >*
      mutable_ops();
  const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >&
      ops() const;

  // optional bytes dest_uuid = 7;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 7;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required string tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const char* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes caller_uuid = 2;
  bool has_caller_uuid() const;
  void clear_caller_uuid();
  static const int kCallerUuidFieldNumber = 2;
  const ::std::string& caller_uuid() const;
  void set_caller_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_caller_uuid(::std::string&& value);
  #endif
  void set_caller_uuid(const char* value);
  void set_caller_uuid(const void* value, size_t size);
  ::std::string* mutable_caller_uuid();
  ::std::string* release_caller_uuid();
  void set_allocated_caller_uuid(::std::string* caller_uuid);

  // optional .kudu.consensus.OpId preceding_id = 4;
  bool has_preceding_id() const;
  void clear_preceding_id();
  static const int kPrecedingIdFieldNumber = 4;
  const ::kudu::consensus::OpId& preceding_id() const;
  ::kudu::consensus::OpId* mutable_preceding_id();
  ::kudu::consensus::OpId* release_preceding_id();
  void set_allocated_preceding_id(::kudu::consensus::OpId* preceding_id);

  // optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
  bool has_deprecated_committed_index() const;
  void clear_deprecated_committed_index();
  static const int kDEPRECATEDCommittedIndexFieldNumber = 5;
  const ::kudu::consensus::OpId& deprecated_committed_index() const;
  ::kudu::consensus::OpId* mutable_deprecated_committed_index();
  ::kudu::consensus::OpId* release_deprecated_committed_index();
  void set_allocated_deprecated_committed_index(::kudu::consensus::OpId* deprecated_committed_index);

  // required int64 caller_term = 3;
  bool has_caller_term() const;
  void clear_caller_term();
  static const int kCallerTermFieldNumber = 3;
  ::google::protobuf::int64 caller_term() const;
  void set_caller_term(::google::protobuf::int64 value);

  // optional int64 committed_index = 8;
  bool has_committed_index() const;
  void clear_committed_index();
  static const int kCommittedIndexFieldNumber = 8;
  ::google::protobuf::int64 committed_index() const;
  void set_committed_index(::google::protobuf::int64 value);

  // optional int64 all_replicated_index = 9;
  bool has_all_replicated_index() const;
  void clear_all_replicated_index();
  static const int kAllReplicatedIndexFieldNumber = 9;
  ::google::protobuf::int64 all_replicated_index() const;
  void set_all_replicated_index(::google::protobuf::int64 value);

  // optional fixed64 safe_timestamp = 10;
  bool has_safe_timestamp() const;
  void clear_safe_timestamp();
  static const int kSafeTimestampFieldNumber = 10;
  ::google::protobuf::uint64 safe_timestamp() const;
  void set_safe_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_caller_uuid();
  void clear_has_caller_uuid();
  void set_has_caller_term();
  void clear_has_caller_term();
  void set_has_preceding_id();
  void clear_has_preceding_id();
  void set_has_committed_index();
  void clear_has_committed_index();
  void set_has_deprecated_committed_index();
  void clear_has_deprecated_committed_index();
  void set_has_all_replicated_index();
  void clear_has_all_replicated_index();
  void set_has_safe_timestamp();
  void clear_has_safe_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg > ops_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  ::google::protobuf::internal::ArenaStringPtr caller_uuid_;
  ::kudu::consensus::OpId* preceding_id_;
  ::kudu::consensus::OpId* deprecated_committed_index_;
  ::google::protobuf::int64 caller_term_;
  ::google::protobuf::int64 committed_index_;
  ::google::protobuf::int64 all_replicated_index_;
  ::google::protobuf::uint64 safe_timestamp_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsensusResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusResponsePB) */ {
 public:
  ConsensusResponsePB();
  virtual ~ConsensusResponsePB();

  ConsensusResponsePB(const ConsensusResponsePB& from);

  inline ConsensusResponsePB& operator=(const ConsensusResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusResponsePB& default_instance();

  static inline const ConsensusResponsePB* internal_default_instance() {
    return reinterpret_cast<const ConsensusResponsePB*>(
               &_ConsensusResponsePB_default_instance_);
  }

  void Swap(ConsensusResponsePB* other);

  // implements Message ----------------------------------------------

  inline ConsensusResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusResponsePB& from);
  void MergeFrom(const ConsensusResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes responder_uuid = 1;
  bool has_responder_uuid() const;
  void clear_responder_uuid();
  static const int kResponderUuidFieldNumber = 1;
  const ::std::string& responder_uuid() const;
  void set_responder_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_responder_uuid(::std::string&& value);
  #endif
  void set_responder_uuid(const char* value);
  void set_responder_uuid(const void* value, size_t size);
  ::std::string* mutable_responder_uuid();
  ::std::string* release_responder_uuid();
  void set_allocated_responder_uuid(::std::string* responder_uuid);

  // optional .kudu.consensus.ConsensusStatusPB status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::kudu::consensus::ConsensusStatusPB& status() const;
  ::kudu::consensus::ConsensusStatusPB* mutable_status();
  ::kudu::consensus::ConsensusStatusPB* release_status();
  void set_allocated_status(::kudu::consensus::ConsensusStatusPB* status);

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 999;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // optional int64 responder_term = 2;
  bool has_responder_term() const;
  void clear_responder_term();
  static const int kResponderTermFieldNumber = 2;
  ::google::protobuf::int64 responder_term() const;
  void set_responder_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusResponsePB)
 private:
  void set_has_responder_uuid();
  void clear_has_responder_uuid();
  void set_has_responder_term();
  void clear_has_responder_term();
  void set_has_status();
  void clear_has_status();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr responder_uuid_;
  ::kudu::consensus::ConsensusStatusPB* status_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  ::google::protobuf::int64 responder_term_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionStatusPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.TransactionStatusPB) */ {
 public:
  TransactionStatusPB();
  virtual ~TransactionStatusPB();

  TransactionStatusPB(const TransactionStatusPB& from);

  inline TransactionStatusPB& operator=(const TransactionStatusPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionStatusPB& default_instance();

  static inline const TransactionStatusPB* internal_default_instance() {
    return reinterpret_cast<const TransactionStatusPB*>(
               &_TransactionStatusPB_default_instance_);
  }

  void Swap(TransactionStatusPB* other);

  // implements Message ----------------------------------------------

  inline TransactionStatusPB* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionStatusPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionStatusPB& from);
  void MergeFrom(const TransactionStatusPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionStatusPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string trace_buffer = 6;
  bool has_trace_buffer() const;
  void clear_trace_buffer();
  static const int kTraceBufferFieldNumber = 6;
  const ::std::string& trace_buffer() const;
  void set_trace_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_buffer(::std::string&& value);
  #endif
  void set_trace_buffer(const char* value);
  void set_trace_buffer(const char* value, size_t size);
  ::std::string* mutable_trace_buffer();
  ::std::string* release_trace_buffer();
  void set_allocated_trace_buffer(::std::string* trace_buffer);

  // required .kudu.consensus.OpId op_id = 1;
  bool has_op_id() const;
  void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  const ::kudu::consensus::OpId& op_id() const;
  ::kudu::consensus::OpId* mutable_op_id();
  ::kudu::consensus::OpId* release_op_id();
  void set_allocated_op_id(::kudu::consensus::OpId* op_id);

  // required int64 running_for_micros = 3;
  bool has_running_for_micros() const;
  void clear_running_for_micros();
  static const int kRunningForMicrosFieldNumber = 3;
  ::google::protobuf::int64 running_for_micros() const;
  void set_running_for_micros(::google::protobuf::int64 value);

  // required .kudu.consensus.OperationType tx_type = 2;
  bool has_tx_type() const;
  void clear_tx_type();
  static const int kTxTypeFieldNumber = 2;
  ::kudu::consensus::OperationType tx_type() const;
  void set_tx_type(::kudu::consensus::OperationType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.TransactionStatusPB)
 private:
  void set_has_op_id();
  void clear_has_op_id();
  void set_has_tx_type();
  void clear_has_tx_type();
  void set_has_running_for_micros();
  void clear_has_running_for_micros();
  void set_has_description();
  void clear_has_description();
  void set_has_trace_buffer();
  void clear_has_trace_buffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr trace_buffer_;
  ::kudu::consensus::OpId* op_id_;
  ::google::protobuf::int64 running_for_micros_;
  int tx_type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNodeInstanceRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetNodeInstanceRequestPB) */ {
 public:
  GetNodeInstanceRequestPB();
  virtual ~GetNodeInstanceRequestPB();

  GetNodeInstanceRequestPB(const GetNodeInstanceRequestPB& from);

  inline GetNodeInstanceRequestPB& operator=(const GetNodeInstanceRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeInstanceRequestPB& default_instance();

  static inline const GetNodeInstanceRequestPB* internal_default_instance() {
    return reinterpret_cast<const GetNodeInstanceRequestPB*>(
               &_GetNodeInstanceRequestPB_default_instance_);
  }

  void Swap(GetNodeInstanceRequestPB* other);

  // implements Message ----------------------------------------------

  inline GetNodeInstanceRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNodeInstanceRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNodeInstanceRequestPB& from);
  void MergeFrom(const GetNodeInstanceRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNodeInstanceRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetNodeInstanceRequestPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNodeInstanceResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetNodeInstanceResponsePB) */ {
 public:
  GetNodeInstanceResponsePB();
  virtual ~GetNodeInstanceResponsePB();

  GetNodeInstanceResponsePB(const GetNodeInstanceResponsePB& from);

  inline GetNodeInstanceResponsePB& operator=(const GetNodeInstanceResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeInstanceResponsePB& default_instance();

  static inline const GetNodeInstanceResponsePB* internal_default_instance() {
    return reinterpret_cast<const GetNodeInstanceResponsePB*>(
               &_GetNodeInstanceResponsePB_default_instance_);
  }

  void Swap(GetNodeInstanceResponsePB* other);

  // implements Message ----------------------------------------------

  inline GetNodeInstanceResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNodeInstanceResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNodeInstanceResponsePB& from);
  void MergeFrom(const GetNodeInstanceResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNodeInstanceResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .kudu.NodeInstancePB node_instance = 1;
  bool has_node_instance() const;
  void clear_node_instance();
  static const int kNodeInstanceFieldNumber = 1;
  const ::kudu::NodeInstancePB& node_instance() const;
  ::kudu::NodeInstancePB* mutable_node_instance();
  ::kudu::NodeInstancePB* release_node_instance();
  void set_allocated_node_instance(::kudu::NodeInstancePB* node_instance);

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetNodeInstanceResponsePB)
 private:
  void set_has_node_instance();
  void clear_has_node_instance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::NodeInstancePB* node_instance_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunLeaderElectionRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.RunLeaderElectionRequestPB) */ {
 public:
  RunLeaderElectionRequestPB();
  virtual ~RunLeaderElectionRequestPB();

  RunLeaderElectionRequestPB(const RunLeaderElectionRequestPB& from);

  inline RunLeaderElectionRequestPB& operator=(const RunLeaderElectionRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunLeaderElectionRequestPB& default_instance();

  static inline const RunLeaderElectionRequestPB* internal_default_instance() {
    return reinterpret_cast<const RunLeaderElectionRequestPB*>(
               &_RunLeaderElectionRequestPB_default_instance_);
  }

  void Swap(RunLeaderElectionRequestPB* other);

  // implements Message ----------------------------------------------

  inline RunLeaderElectionRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  RunLeaderElectionRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunLeaderElectionRequestPB& from);
  void MergeFrom(const RunLeaderElectionRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunLeaderElectionRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // @@protoc_insertion_point(class_scope:kudu.consensus.RunLeaderElectionRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunLeaderElectionResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.RunLeaderElectionResponsePB) */ {
 public:
  RunLeaderElectionResponsePB();
  virtual ~RunLeaderElectionResponsePB();

  RunLeaderElectionResponsePB(const RunLeaderElectionResponsePB& from);

  inline RunLeaderElectionResponsePB& operator=(const RunLeaderElectionResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunLeaderElectionResponsePB& default_instance();

  static inline const RunLeaderElectionResponsePB* internal_default_instance() {
    return reinterpret_cast<const RunLeaderElectionResponsePB*>(
               &_RunLeaderElectionResponsePB_default_instance_);
  }

  void Swap(RunLeaderElectionResponsePB* other);

  // implements Message ----------------------------------------------

  inline RunLeaderElectionResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  RunLeaderElectionResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunLeaderElectionResponsePB& from);
  void MergeFrom(const RunLeaderElectionResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunLeaderElectionResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // @@protoc_insertion_point(class_scope:kudu.consensus.RunLeaderElectionResponsePB)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderStepDownRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.LeaderStepDownRequestPB) */ {
 public:
  LeaderStepDownRequestPB();
  virtual ~LeaderStepDownRequestPB();

  LeaderStepDownRequestPB(const LeaderStepDownRequestPB& from);

  inline LeaderStepDownRequestPB& operator=(const LeaderStepDownRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderStepDownRequestPB& default_instance();

  static inline const LeaderStepDownRequestPB* internal_default_instance() {
    return reinterpret_cast<const LeaderStepDownRequestPB*>(
               &_LeaderStepDownRequestPB_default_instance_);
  }

  void Swap(LeaderStepDownRequestPB* other);

  // implements Message ----------------------------------------------

  inline LeaderStepDownRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderStepDownRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderStepDownRequestPB& from);
  void MergeFrom(const LeaderStepDownRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderStepDownRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // @@protoc_insertion_point(class_scope:kudu.consensus.LeaderStepDownRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderStepDownResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.LeaderStepDownResponsePB) */ {
 public:
  LeaderStepDownResponsePB();
  virtual ~LeaderStepDownResponsePB();

  LeaderStepDownResponsePB(const LeaderStepDownResponsePB& from);

  inline LeaderStepDownResponsePB& operator=(const LeaderStepDownResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderStepDownResponsePB& default_instance();

  static inline const LeaderStepDownResponsePB* internal_default_instance() {
    return reinterpret_cast<const LeaderStepDownResponsePB*>(
               &_LeaderStepDownResponsePB_default_instance_);
  }

  void Swap(LeaderStepDownResponsePB* other);

  // implements Message ----------------------------------------------

  inline LeaderStepDownResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderStepDownResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderStepDownResponsePB& from);
  void MergeFrom(const LeaderStepDownResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderStepDownResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // @@protoc_insertion_point(class_scope:kudu.consensus.LeaderStepDownResponsePB)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLastOpIdRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetLastOpIdRequestPB) */ {
 public:
  GetLastOpIdRequestPB();
  virtual ~GetLastOpIdRequestPB();

  GetLastOpIdRequestPB(const GetLastOpIdRequestPB& from);

  inline GetLastOpIdRequestPB& operator=(const GetLastOpIdRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastOpIdRequestPB& default_instance();

  static inline const GetLastOpIdRequestPB* internal_default_instance() {
    return reinterpret_cast<const GetLastOpIdRequestPB*>(
               &_GetLastOpIdRequestPB_default_instance_);
  }

  void Swap(GetLastOpIdRequestPB* other);

  // implements Message ----------------------------------------------

  inline GetLastOpIdRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLastOpIdRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLastOpIdRequestPB& from);
  void MergeFrom(const GetLastOpIdRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLastOpIdRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  bool has_opid_type() const;
  void clear_opid_type();
  static const int kOpidTypeFieldNumber = 3;
  ::kudu::consensus::OpIdType opid_type() const;
  void set_opid_type(::kudu::consensus::OpIdType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetLastOpIdRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_opid_type();
  void clear_has_opid_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  int opid_type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLastOpIdResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetLastOpIdResponsePB) */ {
 public:
  GetLastOpIdResponsePB();
  virtual ~GetLastOpIdResponsePB();

  GetLastOpIdResponsePB(const GetLastOpIdResponsePB& from);

  inline GetLastOpIdResponsePB& operator=(const GetLastOpIdResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastOpIdResponsePB& default_instance();

  static inline const GetLastOpIdResponsePB* internal_default_instance() {
    return reinterpret_cast<const GetLastOpIdResponsePB*>(
               &_GetLastOpIdResponsePB_default_instance_);
  }

  void Swap(GetLastOpIdResponsePB* other);

  // implements Message ----------------------------------------------

  inline GetLastOpIdResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLastOpIdResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLastOpIdResponsePB& from);
  void MergeFrom(const GetLastOpIdResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLastOpIdResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.consensus.OpId opid = 1;
  bool has_opid() const;
  void clear_opid();
  static const int kOpidFieldNumber = 1;
  const ::kudu::consensus::OpId& opid() const;
  ::kudu::consensus::OpId* mutable_opid();
  ::kudu::consensus::OpId* release_opid();
  void set_allocated_opid(::kudu::consensus::OpId* opid);

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetLastOpIdResponsePB)
 private:
  void set_has_opid();
  void clear_has_opid();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::consensus::OpId* opid_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConsensusStateRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetConsensusStateRequestPB) */ {
 public:
  GetConsensusStateRequestPB();
  virtual ~GetConsensusStateRequestPB();

  GetConsensusStateRequestPB(const GetConsensusStateRequestPB& from);

  inline GetConsensusStateRequestPB& operator=(const GetConsensusStateRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConsensusStateRequestPB& default_instance();

  static inline const GetConsensusStateRequestPB* internal_default_instance() {
    return reinterpret_cast<const GetConsensusStateRequestPB*>(
               &_GetConsensusStateRequestPB_default_instance_);
  }

  void Swap(GetConsensusStateRequestPB* other);

  // implements Message ----------------------------------------------

  inline GetConsensusStateRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConsensusStateRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConsensusStateRequestPB& from);
  void MergeFrom(const GetConsensusStateRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConsensusStateRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::kudu::consensus::ConsensusConfigType type() const;
  void set_type(::kudu::consensus::ConsensusConfigType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetConsensusStateRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  int type_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConsensusStateResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.GetConsensusStateResponsePB) */ {
 public:
  GetConsensusStateResponsePB();
  virtual ~GetConsensusStateResponsePB();

  GetConsensusStateResponsePB(const GetConsensusStateResponsePB& from);

  inline GetConsensusStateResponsePB& operator=(const GetConsensusStateResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConsensusStateResponsePB& default_instance();

  static inline const GetConsensusStateResponsePB* internal_default_instance() {
    return reinterpret_cast<const GetConsensusStateResponsePB*>(
               &_GetConsensusStateResponsePB_default_instance_);
  }

  void Swap(GetConsensusStateResponsePB* other);

  // implements Message ----------------------------------------------

  inline GetConsensusStateResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConsensusStateResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConsensusStateResponsePB& from);
  void MergeFrom(const GetConsensusStateResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConsensusStateResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.consensus.ConsensusStatePB cstate = 1;
  bool has_cstate() const;
  void clear_cstate();
  static const int kCstateFieldNumber = 1;
  const ::kudu::consensus::ConsensusStatePB& cstate() const;
  ::kudu::consensus::ConsensusStatePB* mutable_cstate();
  ::kudu::consensus::ConsensusStatePB* release_cstate();
  void set_allocated_cstate(::kudu::consensus::ConsensusStatePB* cstate);

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // @@protoc_insertion_point(class_scope:kudu.consensus.GetConsensusStateResponsePB)
 private:
  void set_has_cstate();
  void clear_has_cstate();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::consensus::ConsensusStatePB* cstate_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartTabletCopyRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.StartTabletCopyRequestPB) */ {
 public:
  StartTabletCopyRequestPB();
  virtual ~StartTabletCopyRequestPB();

  StartTabletCopyRequestPB(const StartTabletCopyRequestPB& from);

  inline StartTabletCopyRequestPB& operator=(const StartTabletCopyRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTabletCopyRequestPB& default_instance();

  static inline const StartTabletCopyRequestPB* internal_default_instance() {
    return reinterpret_cast<const StartTabletCopyRequestPB*>(
               &_StartTabletCopyRequestPB_default_instance_);
  }

  void Swap(StartTabletCopyRequestPB* other);

  // implements Message ----------------------------------------------

  inline StartTabletCopyRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  StartTabletCopyRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartTabletCopyRequestPB& from);
  void MergeFrom(const StartTabletCopyRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartTabletCopyRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 5;
  bool has_dest_uuid() const;
  void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 5;
  const ::std::string& dest_uuid() const;
  void set_dest_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_uuid(::std::string&& value);
  #endif
  void set_dest_uuid(const char* value);
  void set_dest_uuid(const void* value, size_t size);
  ::std::string* mutable_dest_uuid();
  ::std::string* release_dest_uuid();
  void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  bool has_tablet_id() const;
  void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  const ::std::string& tablet_id() const;
  void set_tablet_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tablet_id(::std::string&& value);
  #endif
  void set_tablet_id(const char* value);
  void set_tablet_id(const void* value, size_t size);
  ::std::string* mutable_tablet_id();
  ::std::string* release_tablet_id();
  void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes copy_peer_uuid = 2;
  bool has_copy_peer_uuid() const;
  void clear_copy_peer_uuid();
  static const int kCopyPeerUuidFieldNumber = 2;
  const ::std::string& copy_peer_uuid() const;
  void set_copy_peer_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_copy_peer_uuid(::std::string&& value);
  #endif
  void set_copy_peer_uuid(const char* value);
  void set_copy_peer_uuid(const void* value, size_t size);
  ::std::string* mutable_copy_peer_uuid();
  ::std::string* release_copy_peer_uuid();
  void set_allocated_copy_peer_uuid(::std::string* copy_peer_uuid);

  // required .kudu.HostPortPB copy_peer_addr = 3;
  bool has_copy_peer_addr() const;
  void clear_copy_peer_addr();
  static const int kCopyPeerAddrFieldNumber = 3;
  const ::kudu::HostPortPB& copy_peer_addr() const;
  ::kudu::HostPortPB* mutable_copy_peer_addr();
  ::kudu::HostPortPB* release_copy_peer_addr();
  void set_allocated_copy_peer_addr(::kudu::HostPortPB* copy_peer_addr);

  // optional int64 caller_term = 4 [default = -1];
  bool has_caller_term() const;
  void clear_caller_term();
  static const int kCallerTermFieldNumber = 4;
  ::google::protobuf::int64 caller_term() const;
  void set_caller_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.StartTabletCopyRequestPB)
 private:
  void set_has_dest_uuid();
  void clear_has_dest_uuid();
  void set_has_tablet_id();
  void clear_has_tablet_id();
  void set_has_copy_peer_uuid();
  void clear_has_copy_peer_uuid();
  void set_has_copy_peer_addr();
  void clear_has_copy_peer_addr();
  void set_has_caller_term();
  void clear_has_caller_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dest_uuid_;
  ::google::protobuf::internal::ArenaStringPtr tablet_id_;
  ::google::protobuf::internal::ArenaStringPtr copy_peer_uuid_;
  ::kudu::HostPortPB* copy_peer_addr_;
  ::google::protobuf::int64 caller_term_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartTabletCopyResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.StartTabletCopyResponsePB) */ {
 public:
  StartTabletCopyResponsePB();
  virtual ~StartTabletCopyResponsePB();

  StartTabletCopyResponsePB(const StartTabletCopyResponsePB& from);

  inline StartTabletCopyResponsePB& operator=(const StartTabletCopyResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTabletCopyResponsePB& default_instance();

  static inline const StartTabletCopyResponsePB* internal_default_instance() {
    return reinterpret_cast<const StartTabletCopyResponsePB*>(
               &_StartTabletCopyResponsePB_default_instance_);
  }

  void Swap(StartTabletCopyResponsePB* other);

  // implements Message ----------------------------------------------

  inline StartTabletCopyResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  StartTabletCopyResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartTabletCopyResponsePB& from);
  void MergeFrom(const StartTabletCopyResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartTabletCopyResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::kudu::tserver::TabletServerErrorPB& error() const;
  ::kudu::tserver::TabletServerErrorPB* mutable_error();
  ::kudu::tserver::TabletServerErrorPB* release_error();
  void set_allocated_error(::kudu::tserver::TabletServerErrorPB* error);

  // @@protoc_insertion_point(class_scope:kudu.consensus.StartTabletCopyResponsePB)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kudu::tserver::TabletServerErrorPB* error_;
  friend struct protobuf_consensus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusErrorPB

// required .kudu.consensus.ConsensusErrorPB.Code code = 1;
inline bool ConsensusErrorPB::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusErrorPB::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusErrorPB::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusErrorPB::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::kudu::consensus::ConsensusErrorPB_Code ConsensusErrorPB::code() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusErrorPB.code)
  return static_cast< ::kudu::consensus::ConsensusErrorPB_Code >(code_);
}
inline void ConsensusErrorPB::set_code(::kudu::consensus::ConsensusErrorPB_Code value) {
  assert(::kudu::consensus::ConsensusErrorPB_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusErrorPB.code)
}

// required .kudu.AppStatusPB status = 2;
inline bool ConsensusErrorPB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusErrorPB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusErrorPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusErrorPB::clear_status() {
  if (status_ != NULL) status_->::kudu::AppStatusPB::Clear();
  clear_has_status();
}
inline const ::kudu::AppStatusPB& ConsensusErrorPB::status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusErrorPB.status)
  return status_ != NULL ? *status_
                         : *::kudu::AppStatusPB::internal_default_instance();
}
inline ::kudu::AppStatusPB* ConsensusErrorPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::kudu::AppStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusErrorPB.status)
  return status_;
}
inline ::kudu::AppStatusPB* ConsensusErrorPB::release_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusErrorPB.status)
  clear_has_status();
  ::kudu::AppStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ConsensusErrorPB::set_allocated_status(::kudu::AppStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusErrorPB.status)
}

// -------------------------------------------------------------------

// ChangeConfigRecordPB

// required bytes tablet_id = 1;
inline bool ChangeConfigRecordPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigRecordPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigRecordPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigRecordPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& ChangeConfigRecordPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void ChangeConfigRecordPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
#if LANG_CXX11
inline void ChangeConfigRecordPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
#endif
inline void ChangeConfigRecordPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
inline void ChangeConfigRecordPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
inline ::std::string* ChangeConfigRecordPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeConfigRecordPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeConfigRecordPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}

// required .kudu.consensus.RaftConfigPB old_config = 2;
inline bool ChangeConfigRecordPB::has_old_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigRecordPB::set_has_old_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigRecordPB::clear_has_old_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigRecordPB::clear_old_config() {
  if (old_config_ != NULL) old_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_old_config();
}
inline const ::kudu::consensus::RaftConfigPB& ChangeConfigRecordPB::old_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.old_config)
  return old_config_ != NULL ? *old_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
inline ::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_old_config() {
  set_has_old_config();
  if (old_config_ == NULL) {
    old_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.old_config)
  return old_config_;
}
inline ::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::release_old_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.old_config)
  clear_has_old_config();
  ::kudu::consensus::RaftConfigPB* temp = old_config_;
  old_config_ = NULL;
  return temp;
}
inline void ChangeConfigRecordPB::set_allocated_old_config(::kudu::consensus::RaftConfigPB* old_config) {
  delete old_config_;
  old_config_ = old_config;
  if (old_config) {
    set_has_old_config();
  } else {
    clear_has_old_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.old_config)
}

// required .kudu.consensus.RaftConfigPB new_config = 3;
inline bool ChangeConfigRecordPB::has_new_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeConfigRecordPB::set_has_new_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeConfigRecordPB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeConfigRecordPB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_new_config();
}
inline const ::kudu::consensus::RaftConfigPB& ChangeConfigRecordPB::new_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.new_config)
  return new_config_ != NULL ? *new_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
inline ::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) {
    new_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.new_config)
  return new_config_;
}
inline ::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::release_new_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.new_config)
  clear_has_new_config();
  ::kudu::consensus::RaftConfigPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
inline void ChangeConfigRecordPB::set_allocated_new_config(::kudu::consensus::RaftConfigPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.new_config)
}

// -------------------------------------------------------------------

// ChangeConfigRequestPB

// optional bytes dest_uuid = 4;
inline bool ChangeConfigRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& ChangeConfigRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void ChangeConfigRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void ChangeConfigRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
#endif
inline void ChangeConfigRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
inline void ChangeConfigRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
inline ::std::string* ChangeConfigRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeConfigRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeConfigRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool ChangeConfigRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& ChangeConfigRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void ChangeConfigRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
#if LANG_CXX11
inline void ChangeConfigRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
#endif
inline void ChangeConfigRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
inline void ChangeConfigRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
inline ::std::string* ChangeConfigRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeConfigRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeConfigRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}

// optional .kudu.consensus.ChangeConfigType type = 2;
inline bool ChangeConfigRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeConfigRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeConfigRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeConfigRequestPB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::kudu::consensus::ChangeConfigType ChangeConfigRequestPB::type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.type)
  return static_cast< ::kudu::consensus::ChangeConfigType >(type_);
}
inline void ChangeConfigRequestPB::set_type(::kudu::consensus::ChangeConfigType value) {
  assert(::kudu::consensus::ChangeConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.type)
}

// optional .kudu.consensus.RaftPeerPB server = 3;
inline bool ChangeConfigRequestPB::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeConfigRequestPB::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeConfigRequestPB::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeConfigRequestPB::clear_server() {
  if (server_ != NULL) server_->::kudu::consensus::RaftPeerPB::Clear();
  clear_has_server();
}
inline const ::kudu::consensus::RaftPeerPB& ChangeConfigRequestPB::server() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.server)
  return server_ != NULL ? *server_
                         : *::kudu::consensus::RaftPeerPB::internal_default_instance();
}
inline ::kudu::consensus::RaftPeerPB* ChangeConfigRequestPB::mutable_server() {
  set_has_server();
  if (server_ == NULL) {
    server_ = new ::kudu::consensus::RaftPeerPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.server)
  return server_;
}
inline ::kudu::consensus::RaftPeerPB* ChangeConfigRequestPB::release_server() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.server)
  clear_has_server();
  ::kudu::consensus::RaftPeerPB* temp = server_;
  server_ = NULL;
  return temp;
}
inline void ChangeConfigRequestPB::set_allocated_server(::kudu::consensus::RaftPeerPB* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.server)
}

// optional int64 cas_config_opid_index = 5;
inline bool ChangeConfigRequestPB::has_cas_config_opid_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeConfigRequestPB::set_has_cas_config_opid_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeConfigRequestPB::clear_has_cas_config_opid_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeConfigRequestPB::clear_cas_config_opid_index() {
  cas_config_opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_cas_config_opid_index();
}
inline ::google::protobuf::int64 ChangeConfigRequestPB::cas_config_opid_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.cas_config_opid_index)
  return cas_config_opid_index_;
}
inline void ChangeConfigRequestPB::set_cas_config_opid_index(::google::protobuf::int64 value) {
  set_has_cas_config_opid_index();
  cas_config_opid_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.cas_config_opid_index)
}

// -------------------------------------------------------------------

// ChangeConfigResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
inline bool ChangeConfigResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& ChangeConfigResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* ChangeConfigResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* ChangeConfigResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ChangeConfigResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigResponsePB.error)
}

// optional .kudu.consensus.RaftPeerPB new_config = 2;
inline bool ChangeConfigResponsePB::has_new_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigResponsePB::set_has_new_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigResponsePB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigResponsePB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::kudu::consensus::RaftPeerPB::Clear();
  clear_has_new_config();
}
inline const ::kudu::consensus::RaftPeerPB& ChangeConfigResponsePB::new_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.new_config)
  return new_config_ != NULL ? *new_config_
                         : *::kudu::consensus::RaftPeerPB::internal_default_instance();
}
inline ::kudu::consensus::RaftPeerPB* ChangeConfigResponsePB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) {
    new_config_ = new ::kudu::consensus::RaftPeerPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigResponsePB.new_config)
  return new_config_;
}
inline ::kudu::consensus::RaftPeerPB* ChangeConfigResponsePB::release_new_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigResponsePB.new_config)
  clear_has_new_config();
  ::kudu::consensus::RaftPeerPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
inline void ChangeConfigResponsePB::set_allocated_new_config(::kudu::consensus::RaftPeerPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigResponsePB.new_config)
}

// optional fixed64 timestamp = 3;
inline bool ChangeConfigResponsePB::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeConfigResponsePB::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeConfigResponsePB::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeConfigResponsePB::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ChangeConfigResponsePB::timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.timestamp)
  return timestamp_;
}
inline void ChangeConfigResponsePB::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigResponsePB.timestamp)
}

// -------------------------------------------------------------------

// ReplicateMsg

// required .kudu.consensus.OpId id = 1;
inline bool ReplicateMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicateMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicateMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicateMsg::clear_id() {
  if (id_ != NULL) id_->::kudu::consensus::OpId::Clear();
  clear_has_id();
}
inline const ::kudu::consensus::OpId& ReplicateMsg::id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.id)
  return id_ != NULL ? *id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* ReplicateMsg::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.id)
  return id_;
}
inline ::kudu::consensus::OpId* ReplicateMsg::release_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.id)
  clear_has_id();
  ::kudu::consensus::OpId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_id(::kudu::consensus::OpId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.id)
}

// required fixed64 timestamp = 2;
inline bool ReplicateMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplicateMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplicateMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplicateMsg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ReplicateMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.timestamp)
  return timestamp_;
}
inline void ReplicateMsg::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ReplicateMsg.timestamp)
}

// required .kudu.consensus.OperationType op_type = 4;
inline bool ReplicateMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReplicateMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReplicateMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReplicateMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::kudu::consensus::OperationType ReplicateMsg::op_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.op_type)
  return static_cast< ::kudu::consensus::OperationType >(op_type_);
}
inline void ReplicateMsg::set_op_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ReplicateMsg.op_type)
}

// optional .kudu.tserver.WriteRequestPB write_request = 5;
inline bool ReplicateMsg::has_write_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicateMsg::set_has_write_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicateMsg::clear_has_write_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicateMsg::clear_write_request() {
  if (write_request_ != NULL) write_request_->::kudu::tserver::WriteRequestPB::Clear();
  clear_has_write_request();
}
inline const ::kudu::tserver::WriteRequestPB& ReplicateMsg::write_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.write_request)
  return write_request_ != NULL ? *write_request_
                         : *::kudu::tserver::WriteRequestPB::internal_default_instance();
}
inline ::kudu::tserver::WriteRequestPB* ReplicateMsg::mutable_write_request() {
  set_has_write_request();
  if (write_request_ == NULL) {
    write_request_ = new ::kudu::tserver::WriteRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.write_request)
  return write_request_;
}
inline ::kudu::tserver::WriteRequestPB* ReplicateMsg::release_write_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.write_request)
  clear_has_write_request();
  ::kudu::tserver::WriteRequestPB* temp = write_request_;
  write_request_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_write_request(::kudu::tserver::WriteRequestPB* write_request) {
  delete write_request_;
  write_request_ = write_request;
  if (write_request) {
    set_has_write_request();
  } else {
    clear_has_write_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.write_request)
}

// optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
inline bool ReplicateMsg::has_alter_schema_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicateMsg::set_has_alter_schema_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplicateMsg::clear_has_alter_schema_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplicateMsg::clear_alter_schema_request() {
  if (alter_schema_request_ != NULL) alter_schema_request_->::kudu::tserver::AlterSchemaRequestPB::Clear();
  clear_has_alter_schema_request();
}
inline const ::kudu::tserver::AlterSchemaRequestPB& ReplicateMsg::alter_schema_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.alter_schema_request)
  return alter_schema_request_ != NULL ? *alter_schema_request_
                         : *::kudu::tserver::AlterSchemaRequestPB::internal_default_instance();
}
inline ::kudu::tserver::AlterSchemaRequestPB* ReplicateMsg::mutable_alter_schema_request() {
  set_has_alter_schema_request();
  if (alter_schema_request_ == NULL) {
    alter_schema_request_ = new ::kudu::tserver::AlterSchemaRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.alter_schema_request)
  return alter_schema_request_;
}
inline ::kudu::tserver::AlterSchemaRequestPB* ReplicateMsg::release_alter_schema_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.alter_schema_request)
  clear_has_alter_schema_request();
  ::kudu::tserver::AlterSchemaRequestPB* temp = alter_schema_request_;
  alter_schema_request_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_alter_schema_request(::kudu::tserver::AlterSchemaRequestPB* alter_schema_request) {
  delete alter_schema_request_;
  alter_schema_request_ = alter_schema_request;
  if (alter_schema_request) {
    set_has_alter_schema_request();
  } else {
    clear_has_alter_schema_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.alter_schema_request)
}

// optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
inline bool ReplicateMsg::has_change_config_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplicateMsg::set_has_change_config_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplicateMsg::clear_has_change_config_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplicateMsg::clear_change_config_record() {
  if (change_config_record_ != NULL) change_config_record_->::kudu::consensus::ChangeConfigRecordPB::Clear();
  clear_has_change_config_record();
}
inline const ::kudu::consensus::ChangeConfigRecordPB& ReplicateMsg::change_config_record() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.change_config_record)
  return change_config_record_ != NULL ? *change_config_record_
                         : *::kudu::consensus::ChangeConfigRecordPB::internal_default_instance();
}
inline ::kudu::consensus::ChangeConfigRecordPB* ReplicateMsg::mutable_change_config_record() {
  set_has_change_config_record();
  if (change_config_record_ == NULL) {
    change_config_record_ = new ::kudu::consensus::ChangeConfigRecordPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.change_config_record)
  return change_config_record_;
}
inline ::kudu::consensus::ChangeConfigRecordPB* ReplicateMsg::release_change_config_record() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.change_config_record)
  clear_has_change_config_record();
  ::kudu::consensus::ChangeConfigRecordPB* temp = change_config_record_;
  change_config_record_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_change_config_record(::kudu::consensus::ChangeConfigRecordPB* change_config_record) {
  delete change_config_record_;
  change_config_record_ = change_config_record;
  if (change_config_record) {
    set_has_change_config_record();
  } else {
    clear_has_change_config_record();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.change_config_record)
}

// optional .kudu.rpc.RequestIdPB request_id = 8;
inline bool ReplicateMsg::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplicateMsg::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplicateMsg::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplicateMsg::clear_request_id() {
  if (request_id_ != NULL) request_id_->::kudu::rpc::RequestIdPB::Clear();
  clear_has_request_id();
}
inline const ::kudu::rpc::RequestIdPB& ReplicateMsg::request_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.request_id)
  return request_id_ != NULL ? *request_id_
                         : *::kudu::rpc::RequestIdPB::internal_default_instance();
}
inline ::kudu::rpc::RequestIdPB* ReplicateMsg::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == NULL) {
    request_id_ = new ::kudu::rpc::RequestIdPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.request_id)
  return request_id_;
}
inline ::kudu::rpc::RequestIdPB* ReplicateMsg::release_request_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.request_id)
  clear_has_request_id();
  ::kudu::rpc::RequestIdPB* temp = request_id_;
  request_id_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_request_id(::kudu::rpc::RequestIdPB* request_id) {
  delete request_id_;
  request_id_ = request_id;
  if (request_id) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.request_id)
}

// optional .kudu.consensus.NoOpRequestPB noop_request = 999;
inline bool ReplicateMsg::has_noop_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplicateMsg::set_has_noop_request() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplicateMsg::clear_has_noop_request() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplicateMsg::clear_noop_request() {
  if (noop_request_ != NULL) noop_request_->::kudu::consensus::NoOpRequestPB::Clear();
  clear_has_noop_request();
}
inline const ::kudu::consensus::NoOpRequestPB& ReplicateMsg::noop_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.noop_request)
  return noop_request_ != NULL ? *noop_request_
                         : *::kudu::consensus::NoOpRequestPB::internal_default_instance();
}
inline ::kudu::consensus::NoOpRequestPB* ReplicateMsg::mutable_noop_request() {
  set_has_noop_request();
  if (noop_request_ == NULL) {
    noop_request_ = new ::kudu::consensus::NoOpRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.noop_request)
  return noop_request_;
}
inline ::kudu::consensus::NoOpRequestPB* ReplicateMsg::release_noop_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.noop_request)
  clear_has_noop_request();
  ::kudu::consensus::NoOpRequestPB* temp = noop_request_;
  noop_request_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_noop_request(::kudu::consensus::NoOpRequestPB* noop_request) {
  delete noop_request_;
  noop_request_ = noop_request;
  if (noop_request) {
    set_has_noop_request();
  } else {
    clear_has_noop_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.noop_request)
}

// -------------------------------------------------------------------

// CommitMsg

// required .kudu.consensus.OperationType op_type = 1;
inline bool CommitMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommitMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommitMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommitMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::kudu::consensus::OperationType CommitMsg::op_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.op_type)
  return static_cast< ::kudu::consensus::OperationType >(op_type_);
}
inline void CommitMsg::set_op_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.CommitMsg.op_type)
}

// optional .kudu.consensus.OpId commited_op_id = 2;
inline bool CommitMsg::has_commited_op_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitMsg::set_has_commited_op_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitMsg::clear_has_commited_op_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitMsg::clear_commited_op_id() {
  if (commited_op_id_ != NULL) commited_op_id_->::kudu::consensus::OpId::Clear();
  clear_has_commited_op_id();
}
inline const ::kudu::consensus::OpId& CommitMsg::commited_op_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.commited_op_id)
  return commited_op_id_ != NULL ? *commited_op_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* CommitMsg::mutable_commited_op_id() {
  set_has_commited_op_id();
  if (commited_op_id_ == NULL) {
    commited_op_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.CommitMsg.commited_op_id)
  return commited_op_id_;
}
inline ::kudu::consensus::OpId* CommitMsg::release_commited_op_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.CommitMsg.commited_op_id)
  clear_has_commited_op_id();
  ::kudu::consensus::OpId* temp = commited_op_id_;
  commited_op_id_ = NULL;
  return temp;
}
inline void CommitMsg::set_allocated_commited_op_id(::kudu::consensus::OpId* commited_op_id) {
  delete commited_op_id_;
  commited_op_id_ = commited_op_id;
  if (commited_op_id) {
    set_has_commited_op_id();
  } else {
    clear_has_commited_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.CommitMsg.commited_op_id)
}

// optional .kudu.tablet.TxResultPB result = 3;
inline bool CommitMsg::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitMsg::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommitMsg::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommitMsg::clear_result() {
  if (result_ != NULL) result_->::kudu::tablet::TxResultPB::Clear();
  clear_has_result();
}
inline const ::kudu::tablet::TxResultPB& CommitMsg::result() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.result)
  return result_ != NULL ? *result_
                         : *::kudu::tablet::TxResultPB::internal_default_instance();
}
inline ::kudu::tablet::TxResultPB* CommitMsg::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::kudu::tablet::TxResultPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.CommitMsg.result)
  return result_;
}
inline ::kudu::tablet::TxResultPB* CommitMsg::release_result() {
  // @@protoc_insertion_point(field_release:kudu.consensus.CommitMsg.result)
  clear_has_result();
  ::kudu::tablet::TxResultPB* temp = result_;
  result_ = NULL;
  return temp;
}
inline void CommitMsg::set_allocated_result(::kudu::tablet::TxResultPB* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.CommitMsg.result)
}

// -------------------------------------------------------------------

// NoOpRequestPB

// optional bytes payload_for_tests = 1;
inline bool NoOpRequestPB::has_payload_for_tests() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoOpRequestPB::set_has_payload_for_tests() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoOpRequestPB::clear_has_payload_for_tests() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoOpRequestPB::clear_payload_for_tests() {
  payload_for_tests_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_for_tests();
}
inline const ::std::string& NoOpRequestPB::payload_for_tests() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.NoOpRequestPB.payload_for_tests)
  return payload_for_tests_.GetNoArena();
}
inline void NoOpRequestPB::set_payload_for_tests(const ::std::string& value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
#if LANG_CXX11
inline void NoOpRequestPB::set_payload_for_tests(::std::string&& value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
#endif
inline void NoOpRequestPB::set_payload_for_tests(const char* value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
inline void NoOpRequestPB::set_payload_for_tests(const void* value, size_t size) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
inline ::std::string* NoOpRequestPB::mutable_payload_for_tests() {
  set_has_payload_for_tests();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.NoOpRequestPB.payload_for_tests)
  return payload_for_tests_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoOpRequestPB::release_payload_for_tests() {
  // @@protoc_insertion_point(field_release:kudu.consensus.NoOpRequestPB.payload_for_tests)
  clear_has_payload_for_tests();
  return payload_for_tests_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoOpRequestPB::set_allocated_payload_for_tests(::std::string* payload_for_tests) {
  if (payload_for_tests != NULL) {
    set_has_payload_for_tests();
  } else {
    clear_has_payload_for_tests();
  }
  payload_for_tests_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_for_tests);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.NoOpRequestPB.payload_for_tests)
}

// -------------------------------------------------------------------

// ConsensusStatusPB

// required .kudu.consensus.OpId last_received = 1;
inline bool ConsensusStatusPB::has_last_received() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusStatusPB::set_has_last_received() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusStatusPB::clear_has_last_received() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusStatusPB::clear_last_received() {
  if (last_received_ != NULL) last_received_->::kudu::consensus::OpId::Clear();
  clear_has_last_received();
}
inline const ::kudu::consensus::OpId& ConsensusStatusPB::last_received() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_received)
  return last_received_ != NULL ? *last_received_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* ConsensusStatusPB::mutable_last_received() {
  set_has_last_received();
  if (last_received_ == NULL) {
    last_received_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.last_received)
  return last_received_;
}
inline ::kudu::consensus::OpId* ConsensusStatusPB::release_last_received() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.last_received)
  clear_has_last_received();
  ::kudu::consensus::OpId* temp = last_received_;
  last_received_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_last_received(::kudu::consensus::OpId* last_received) {
  delete last_received_;
  last_received_ = last_received;
  if (last_received) {
    set_has_last_received();
  } else {
    clear_has_last_received();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.last_received)
}

// optional .kudu.consensus.OpId last_received_current_leader = 4;
inline bool ConsensusStatusPB::has_last_received_current_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusStatusPB::set_has_last_received_current_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusStatusPB::clear_has_last_received_current_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusStatusPB::clear_last_received_current_leader() {
  if (last_received_current_leader_ != NULL) last_received_current_leader_->::kudu::consensus::OpId::Clear();
  clear_has_last_received_current_leader();
}
inline const ::kudu::consensus::OpId& ConsensusStatusPB::last_received_current_leader() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_ != NULL ? *last_received_current_leader_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* ConsensusStatusPB::mutable_last_received_current_leader() {
  set_has_last_received_current_leader();
  if (last_received_current_leader_ == NULL) {
    last_received_current_leader_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_;
}
inline ::kudu::consensus::OpId* ConsensusStatusPB::release_last_received_current_leader() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  clear_has_last_received_current_leader();
  ::kudu::consensus::OpId* temp = last_received_current_leader_;
  last_received_current_leader_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_last_received_current_leader(::kudu::consensus::OpId* last_received_current_leader) {
  delete last_received_current_leader_;
  last_received_current_leader_ = last_received_current_leader;
  if (last_received_current_leader) {
    set_has_last_received_current_leader();
  } else {
    clear_has_last_received_current_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
}

// optional int64 last_committed_idx = 2;
inline bool ConsensusStatusPB::has_last_committed_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsensusStatusPB::set_has_last_committed_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsensusStatusPB::clear_has_last_committed_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsensusStatusPB::clear_last_committed_idx() {
  last_committed_idx_ = GOOGLE_LONGLONG(0);
  clear_has_last_committed_idx();
}
inline ::google::protobuf::int64 ConsensusStatusPB::last_committed_idx() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_committed_idx)
  return last_committed_idx_;
}
inline void ConsensusStatusPB::set_last_committed_idx(::google::protobuf::int64 value) {
  set_has_last_committed_idx();
  last_committed_idx_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatusPB.last_committed_idx)
}

// optional .kudu.consensus.ConsensusErrorPB error = 3;
inline bool ConsensusStatusPB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusStatusPB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusStatusPB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusStatusPB::clear_error() {
  if (error_ != NULL) error_->::kudu::consensus::ConsensusErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::consensus::ConsensusErrorPB& ConsensusStatusPB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.error)
  return error_ != NULL ? *error_
                         : *::kudu::consensus::ConsensusErrorPB::internal_default_instance();
}
inline ::kudu::consensus::ConsensusErrorPB* ConsensusStatusPB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::consensus::ConsensusErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.error)
  return error_;
}
inline ::kudu::consensus::ConsensusErrorPB* ConsensusStatusPB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.error)
  clear_has_error();
  ::kudu::consensus::ConsensusErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_error(::kudu::consensus::ConsensusErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.error)
}

// -------------------------------------------------------------------

// VoteRequestPB

// optional bytes dest_uuid = 6;
inline bool VoteRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& VoteRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void VoteRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void VoteRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.dest_uuid)
}
#endif
inline void VoteRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.dest_uuid)
}
inline void VoteRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.dest_uuid)
}
inline ::std::string* VoteRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.dest_uuid)
}

// required string tablet_id = 1;
inline bool VoteRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& VoteRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void VoteRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.tablet_id)
}
#if LANG_CXX11
inline void VoteRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.tablet_id)
}
#endif
inline void VoteRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.tablet_id)
}
inline void VoteRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.tablet_id)
}
inline ::std::string* VoteRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.tablet_id)
}

// required bytes candidate_uuid = 2;
inline bool VoteRequestPB::has_candidate_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteRequestPB::set_has_candidate_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteRequestPB::clear_has_candidate_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteRequestPB::clear_candidate_uuid() {
  candidate_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_candidate_uuid();
}
inline const ::std::string& VoteRequestPB::candidate_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_uuid)
  return candidate_uuid_.GetNoArena();
}
inline void VoteRequestPB::set_candidate_uuid(const ::std::string& value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.candidate_uuid)
}
#if LANG_CXX11
inline void VoteRequestPB::set_candidate_uuid(::std::string&& value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.candidate_uuid)
}
#endif
inline void VoteRequestPB::set_candidate_uuid(const char* value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.candidate_uuid)
}
inline void VoteRequestPB::set_candidate_uuid(const void* value, size_t size) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.candidate_uuid)
}
inline ::std::string* VoteRequestPB::mutable_candidate_uuid() {
  set_has_candidate_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.candidate_uuid)
  return candidate_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteRequestPB::release_candidate_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.candidate_uuid)
  clear_has_candidate_uuid();
  return candidate_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteRequestPB::set_allocated_candidate_uuid(::std::string* candidate_uuid) {
  if (candidate_uuid != NULL) {
    set_has_candidate_uuid();
  } else {
    clear_has_candidate_uuid();
  }
  candidate_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.candidate_uuid)
}

// required int64 candidate_term = 3;
inline bool VoteRequestPB::has_candidate_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoteRequestPB::set_has_candidate_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoteRequestPB::clear_has_candidate_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoteRequestPB::clear_candidate_term() {
  candidate_term_ = GOOGLE_LONGLONG(0);
  clear_has_candidate_term();
}
inline ::google::protobuf::int64 VoteRequestPB::candidate_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_term)
  return candidate_term_;
}
inline void VoteRequestPB::set_candidate_term(::google::protobuf::int64 value) {
  set_has_candidate_term();
  candidate_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.candidate_term)
}

// required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
inline bool VoteRequestPB::has_candidate_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteRequestPB::set_has_candidate_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteRequestPB::clear_has_candidate_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteRequestPB::clear_candidate_status() {
  if (candidate_status_ != NULL) candidate_status_->::kudu::consensus::ConsensusStatusPB::Clear();
  clear_has_candidate_status();
}
inline const ::kudu::consensus::ConsensusStatusPB& VoteRequestPB::candidate_status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_status)
  return candidate_status_ != NULL ? *candidate_status_
                         : *::kudu::consensus::ConsensusStatusPB::internal_default_instance();
}
inline ::kudu::consensus::ConsensusStatusPB* VoteRequestPB::mutable_candidate_status() {
  set_has_candidate_status();
  if (candidate_status_ == NULL) {
    candidate_status_ = new ::kudu::consensus::ConsensusStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.candidate_status)
  return candidate_status_;
}
inline ::kudu::consensus::ConsensusStatusPB* VoteRequestPB::release_candidate_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.candidate_status)
  clear_has_candidate_status();
  ::kudu::consensus::ConsensusStatusPB* temp = candidate_status_;
  candidate_status_ = NULL;
  return temp;
}
inline void VoteRequestPB::set_allocated_candidate_status(::kudu::consensus::ConsensusStatusPB* candidate_status) {
  delete candidate_status_;
  candidate_status_ = candidate_status;
  if (candidate_status) {
    set_has_candidate_status();
  } else {
    clear_has_candidate_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.candidate_status)
}

// optional bool ignore_live_leader = 5 [default = false];
inline bool VoteRequestPB::has_ignore_live_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoteRequestPB::set_has_ignore_live_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoteRequestPB::clear_has_ignore_live_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoteRequestPB::clear_ignore_live_leader() {
  ignore_live_leader_ = false;
  clear_has_ignore_live_leader();
}
inline bool VoteRequestPB::ignore_live_leader() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.ignore_live_leader)
  return ignore_live_leader_;
}
inline void VoteRequestPB::set_ignore_live_leader(bool value) {
  set_has_ignore_live_leader();
  ignore_live_leader_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.ignore_live_leader)
}

// optional bool is_pre_election = 7 [default = false];
inline bool VoteRequestPB::has_is_pre_election() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoteRequestPB::set_has_is_pre_election() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoteRequestPB::clear_has_is_pre_election() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoteRequestPB::clear_is_pre_election() {
  is_pre_election_ = false;
  clear_has_is_pre_election();
}
inline bool VoteRequestPB::is_pre_election() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.is_pre_election)
  return is_pre_election_;
}
inline void VoteRequestPB::set_is_pre_election(bool value) {
  set_has_is_pre_election();
  is_pre_election_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.is_pre_election)
}

// -------------------------------------------------------------------

// VoteResponsePB

// optional bytes responder_uuid = 1;
inline bool VoteResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResponsePB::clear_responder_uuid() {
  responder_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_responder_uuid();
}
inline const ::std::string& VoteResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.responder_uuid)
  return responder_uuid_.GetNoArena();
}
inline void VoteResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.responder_uuid)
}
#if LANG_CXX11
inline void VoteResponsePB::set_responder_uuid(::std::string&& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteResponsePB.responder_uuid)
}
#endif
inline void VoteResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteResponsePB.responder_uuid)
}
inline void VoteResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteResponsePB.responder_uuid)
}
inline ::std::string* VoteResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.responder_uuid)
  return responder_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteResponsePB::release_responder_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.responder_uuid)
  clear_has_responder_uuid();
  return responder_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid != NULL) {
    set_has_responder_uuid();
  } else {
    clear_has_responder_uuid();
  }
  responder_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responder_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
inline bool VoteResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
inline ::google::protobuf::int64 VoteResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.responder_term)
  return responder_term_;
}
inline void VoteResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.responder_term)
}

// optional bool vote_granted = 3;
inline bool VoteResponsePB::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoteResponsePB::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoteResponsePB::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoteResponsePB::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool VoteResponsePB::vote_granted() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.vote_granted)
  return vote_granted_;
}
inline void VoteResponsePB::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.vote_granted)
}

// optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
inline bool VoteResponsePB::has_consensus_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteResponsePB::set_has_consensus_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteResponsePB::clear_has_consensus_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteResponsePB::clear_consensus_error() {
  if (consensus_error_ != NULL) consensus_error_->::kudu::consensus::ConsensusErrorPB::Clear();
  clear_has_consensus_error();
}
inline const ::kudu::consensus::ConsensusErrorPB& VoteResponsePB::consensus_error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.consensus_error)
  return consensus_error_ != NULL ? *consensus_error_
                         : *::kudu::consensus::ConsensusErrorPB::internal_default_instance();
}
inline ::kudu::consensus::ConsensusErrorPB* VoteResponsePB::mutable_consensus_error() {
  set_has_consensus_error();
  if (consensus_error_ == NULL) {
    consensus_error_ = new ::kudu::consensus::ConsensusErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.consensus_error)
  return consensus_error_;
}
inline ::kudu::consensus::ConsensusErrorPB* VoteResponsePB::release_consensus_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.consensus_error)
  clear_has_consensus_error();
  ::kudu::consensus::ConsensusErrorPB* temp = consensus_error_;
  consensus_error_ = NULL;
  return temp;
}
inline void VoteResponsePB::set_allocated_consensus_error(::kudu::consensus::ConsensusErrorPB* consensus_error) {
  delete consensus_error_;
  consensus_error_ = consensus_error;
  if (consensus_error) {
    set_has_consensus_error();
  } else {
    clear_has_consensus_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.consensus_error)
}

// optional .kudu.tserver.TabletServerErrorPB error = 999;
inline bool VoteResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& VoteResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* VoteResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* VoteResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void VoteResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.error)
}

// -------------------------------------------------------------------

// ConsensusRequestPB

// optional bytes dest_uuid = 7;
inline bool ConsensusRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& ConsensusRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void ConsensusRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void ConsensusRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
#endif
inline void ConsensusRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
inline void ConsensusRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
inline ::std::string* ConsensusRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.dest_uuid)
}

// required string tablet_id = 1;
inline bool ConsensusRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& ConsensusRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void ConsensusRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.tablet_id)
}
#if LANG_CXX11
inline void ConsensusRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.tablet_id)
}
#endif
inline void ConsensusRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.tablet_id)
}
inline void ConsensusRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.tablet_id)
}
inline ::std::string* ConsensusRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.tablet_id)
}

// required bytes caller_uuid = 2;
inline bool ConsensusRequestPB::has_caller_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusRequestPB::set_has_caller_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusRequestPB::clear_has_caller_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusRequestPB::clear_caller_uuid() {
  caller_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caller_uuid();
}
inline const ::std::string& ConsensusRequestPB::caller_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.caller_uuid)
  return caller_uuid_.GetNoArena();
}
inline void ConsensusRequestPB::set_caller_uuid(const ::std::string& value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
#if LANG_CXX11
inline void ConsensusRequestPB::set_caller_uuid(::std::string&& value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
#endif
inline void ConsensusRequestPB::set_caller_uuid(const char* value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
inline void ConsensusRequestPB::set_caller_uuid(const void* value, size_t size) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
inline ::std::string* ConsensusRequestPB::mutable_caller_uuid() {
  set_has_caller_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.caller_uuid)
  return caller_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusRequestPB::release_caller_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.caller_uuid)
  clear_has_caller_uuid();
  return caller_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRequestPB::set_allocated_caller_uuid(::std::string* caller_uuid) {
  if (caller_uuid != NULL) {
    set_has_caller_uuid();
  } else {
    clear_has_caller_uuid();
  }
  caller_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.caller_uuid)
}

// required int64 caller_term = 3;
inline bool ConsensusRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConsensusRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConsensusRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConsensusRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(0);
  clear_has_caller_term();
}
inline ::google::protobuf::int64 ConsensusRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.caller_term)
  return caller_term_;
}
inline void ConsensusRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.caller_term)
}

// optional .kudu.consensus.OpId preceding_id = 4;
inline bool ConsensusRequestPB::has_preceding_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsensusRequestPB::set_has_preceding_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsensusRequestPB::clear_has_preceding_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsensusRequestPB::clear_preceding_id() {
  if (preceding_id_ != NULL) preceding_id_->::kudu::consensus::OpId::Clear();
  clear_has_preceding_id();
}
inline const ::kudu::consensus::OpId& ConsensusRequestPB::preceding_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_ != NULL ? *preceding_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* ConsensusRequestPB::mutable_preceding_id() {
  set_has_preceding_id();
  if (preceding_id_ == NULL) {
    preceding_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_;
}
inline ::kudu::consensus::OpId* ConsensusRequestPB::release_preceding_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.preceding_id)
  clear_has_preceding_id();
  ::kudu::consensus::OpId* temp = preceding_id_;
  preceding_id_ = NULL;
  return temp;
}
inline void ConsensusRequestPB::set_allocated_preceding_id(::kudu::consensus::OpId* preceding_id) {
  delete preceding_id_;
  preceding_id_ = preceding_id;
  if (preceding_id) {
    set_has_preceding_id();
  } else {
    clear_has_preceding_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.preceding_id)
}

// optional int64 committed_index = 8;
inline bool ConsensusRequestPB::has_committed_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConsensusRequestPB::set_has_committed_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConsensusRequestPB::clear_has_committed_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConsensusRequestPB::clear_committed_index() {
  committed_index_ = GOOGLE_LONGLONG(0);
  clear_has_committed_index();
}
inline ::google::protobuf::int64 ConsensusRequestPB::committed_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.committed_index)
  return committed_index_;
}
inline void ConsensusRequestPB::set_committed_index(::google::protobuf::int64 value) {
  set_has_committed_index();
  committed_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.committed_index)
}

// optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
inline bool ConsensusRequestPB::has_deprecated_committed_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConsensusRequestPB::set_has_deprecated_committed_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConsensusRequestPB::clear_has_deprecated_committed_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConsensusRequestPB::clear_deprecated_committed_index() {
  if (deprecated_committed_index_ != NULL) deprecated_committed_index_->::kudu::consensus::OpId::Clear();
  clear_has_deprecated_committed_index();
}
inline const ::kudu::consensus::OpId& ConsensusRequestPB::deprecated_committed_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_ != NULL ? *deprecated_committed_index_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* ConsensusRequestPB::mutable_deprecated_committed_index() {
  set_has_deprecated_committed_index();
  if (deprecated_committed_index_ == NULL) {
    deprecated_committed_index_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_;
}
inline ::kudu::consensus::OpId* ConsensusRequestPB::release_deprecated_committed_index() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  clear_has_deprecated_committed_index();
  ::kudu::consensus::OpId* temp = deprecated_committed_index_;
  deprecated_committed_index_ = NULL;
  return temp;
}
inline void ConsensusRequestPB::set_allocated_deprecated_committed_index(::kudu::consensus::OpId* deprecated_committed_index) {
  delete deprecated_committed_index_;
  deprecated_committed_index_ = deprecated_committed_index;
  if (deprecated_committed_index) {
    set_has_deprecated_committed_index();
  } else {
    clear_has_deprecated_committed_index();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
}

// repeated .kudu.consensus.ReplicateMsg ops = 6;
inline int ConsensusRequestPB::ops_size() const {
  return ops_.size();
}
inline void ConsensusRequestPB::clear_ops() {
  ops_.Clear();
}
inline const ::kudu::consensus::ReplicateMsg& ConsensusRequestPB::ops(int index) const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Get(index);
}
inline ::kudu::consensus::ReplicateMsg* ConsensusRequestPB::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Mutable(index);
}
inline ::kudu::consensus::ReplicateMsg* ConsensusRequestPB::add_ops() {
  // @@protoc_insertion_point(field_add:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >*
ConsensusRequestPB::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:kudu.consensus.ConsensusRequestPB.ops)
  return &ops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >&
ConsensusRequestPB::ops() const {
  // @@protoc_insertion_point(field_list:kudu.consensus.ConsensusRequestPB.ops)
  return ops_;
}

// optional int64 all_replicated_index = 9;
inline bool ConsensusRequestPB::has_all_replicated_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConsensusRequestPB::set_has_all_replicated_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConsensusRequestPB::clear_has_all_replicated_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConsensusRequestPB::clear_all_replicated_index() {
  all_replicated_index_ = GOOGLE_LONGLONG(0);
  clear_has_all_replicated_index();
}
inline ::google::protobuf::int64 ConsensusRequestPB::all_replicated_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.all_replicated_index)
  return all_replicated_index_;
}
inline void ConsensusRequestPB::set_all_replicated_index(::google::protobuf::int64 value) {
  set_has_all_replicated_index();
  all_replicated_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.all_replicated_index)
}

// optional fixed64 safe_timestamp = 10;
inline bool ConsensusRequestPB::has_safe_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConsensusRequestPB::set_has_safe_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConsensusRequestPB::clear_has_safe_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConsensusRequestPB::clear_safe_timestamp() {
  safe_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_timestamp();
}
inline ::google::protobuf::uint64 ConsensusRequestPB::safe_timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.safe_timestamp)
  return safe_timestamp_;
}
inline void ConsensusRequestPB::set_safe_timestamp(::google::protobuf::uint64 value) {
  set_has_safe_timestamp();
  safe_timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.safe_timestamp)
}

// -------------------------------------------------------------------

// ConsensusResponsePB

// optional bytes responder_uuid = 1;
inline bool ConsensusResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusResponsePB::clear_responder_uuid() {
  responder_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_responder_uuid();
}
inline const ::std::string& ConsensusResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.responder_uuid)
  return responder_uuid_.GetNoArena();
}
inline void ConsensusResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
#if LANG_CXX11
inline void ConsensusResponsePB::set_responder_uuid(::std::string&& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
#endif
inline void ConsensusResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
inline void ConsensusResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
inline ::std::string* ConsensusResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.responder_uuid)
  return responder_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusResponsePB::release_responder_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.responder_uuid)
  clear_has_responder_uuid();
  return responder_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid != NULL) {
    set_has_responder_uuid();
  } else {
    clear_has_responder_uuid();
  }
  responder_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responder_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
inline bool ConsensusResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsensusResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsensusResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsensusResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
inline ::google::protobuf::int64 ConsensusResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.responder_term)
  return responder_term_;
}
inline void ConsensusResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusResponsePB.responder_term)
}

// optional .kudu.consensus.ConsensusStatusPB status = 3;
inline bool ConsensusResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusResponsePB::clear_status() {
  if (status_ != NULL) status_->::kudu::consensus::ConsensusStatusPB::Clear();
  clear_has_status();
}
inline const ::kudu::consensus::ConsensusStatusPB& ConsensusResponsePB::status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.status)
  return status_ != NULL ? *status_
                         : *::kudu::consensus::ConsensusStatusPB::internal_default_instance();
}
inline ::kudu::consensus::ConsensusStatusPB* ConsensusResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::kudu::consensus::ConsensusStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.status)
  return status_;
}
inline ::kudu::consensus::ConsensusStatusPB* ConsensusResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.status)
  clear_has_status();
  ::kudu::consensus::ConsensusStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ConsensusResponsePB::set_allocated_status(::kudu::consensus::ConsensusStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.status)
}

// optional .kudu.tserver.TabletServerErrorPB error = 999;
inline bool ConsensusResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& ConsensusResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* ConsensusResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* ConsensusResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ConsensusResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.error)
}

// -------------------------------------------------------------------

// TransactionStatusPB

// required .kudu.consensus.OpId op_id = 1;
inline bool TransactionStatusPB::has_op_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionStatusPB::set_has_op_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionStatusPB::clear_has_op_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionStatusPB::clear_op_id() {
  if (op_id_ != NULL) op_id_->::kudu::consensus::OpId::Clear();
  clear_has_op_id();
}
inline const ::kudu::consensus::OpId& TransactionStatusPB::op_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.op_id)
  return op_id_ != NULL ? *op_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* TransactionStatusPB::mutable_op_id() {
  set_has_op_id();
  if (op_id_ == NULL) {
    op_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.op_id)
  return op_id_;
}
inline ::kudu::consensus::OpId* TransactionStatusPB::release_op_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.op_id)
  clear_has_op_id();
  ::kudu::consensus::OpId* temp = op_id_;
  op_id_ = NULL;
  return temp;
}
inline void TransactionStatusPB::set_allocated_op_id(::kudu::consensus::OpId* op_id) {
  delete op_id_;
  op_id_ = op_id;
  if (op_id) {
    set_has_op_id();
  } else {
    clear_has_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.op_id)
}

// required .kudu.consensus.OperationType tx_type = 2;
inline bool TransactionStatusPB::has_tx_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionStatusPB::set_has_tx_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionStatusPB::clear_has_tx_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionStatusPB::clear_tx_type() {
  tx_type_ = 0;
  clear_has_tx_type();
}
inline ::kudu::consensus::OperationType TransactionStatusPB::tx_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.tx_type)
  return static_cast< ::kudu::consensus::OperationType >(tx_type_);
}
inline void TransactionStatusPB::set_tx_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_tx_type();
  tx_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.tx_type)
}

// required int64 running_for_micros = 3;
inline bool TransactionStatusPB::has_running_for_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionStatusPB::set_has_running_for_micros() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionStatusPB::clear_has_running_for_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionStatusPB::clear_running_for_micros() {
  running_for_micros_ = GOOGLE_LONGLONG(0);
  clear_has_running_for_micros();
}
inline ::google::protobuf::int64 TransactionStatusPB::running_for_micros() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.running_for_micros)
  return running_for_micros_;
}
inline void TransactionStatusPB::set_running_for_micros(::google::protobuf::int64 value) {
  set_has_running_for_micros();
  running_for_micros_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.running_for_micros)
}

// required string description = 4;
inline bool TransactionStatusPB::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusPB::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusPB::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusPB::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& TransactionStatusPB::description() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.description)
  return description_.GetNoArena();
}
inline void TransactionStatusPB::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.description)
}
#if LANG_CXX11
inline void TransactionStatusPB::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.TransactionStatusPB.description)
}
#endif
inline void TransactionStatusPB::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.TransactionStatusPB.description)
}
inline void TransactionStatusPB::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.TransactionStatusPB.description)
}
inline ::std::string* TransactionStatusPB::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionStatusPB::release_description() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStatusPB::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.description)
}

// optional string trace_buffer = 6;
inline bool TransactionStatusPB::has_trace_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStatusPB::set_has_trace_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionStatusPB::clear_has_trace_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionStatusPB::clear_trace_buffer() {
  trace_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trace_buffer();
}
inline const ::std::string& TransactionStatusPB::trace_buffer() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.trace_buffer)
  return trace_buffer_.GetNoArena();
}
inline void TransactionStatusPB::set_trace_buffer(const ::std::string& value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.trace_buffer)
}
#if LANG_CXX11
inline void TransactionStatusPB::set_trace_buffer(::std::string&& value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.TransactionStatusPB.trace_buffer)
}
#endif
inline void TransactionStatusPB::set_trace_buffer(const char* value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.TransactionStatusPB.trace_buffer)
}
inline void TransactionStatusPB::set_trace_buffer(const char* value, size_t size) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.TransactionStatusPB.trace_buffer)
}
inline ::std::string* TransactionStatusPB::mutable_trace_buffer() {
  set_has_trace_buffer();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.trace_buffer)
  return trace_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionStatusPB::release_trace_buffer() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.trace_buffer)
  clear_has_trace_buffer();
  return trace_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStatusPB::set_allocated_trace_buffer(::std::string* trace_buffer) {
  if (trace_buffer != NULL) {
    set_has_trace_buffer();
  } else {
    clear_has_trace_buffer();
  }
  trace_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_buffer);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.trace_buffer)
}

// -------------------------------------------------------------------

// GetNodeInstanceRequestPB

// -------------------------------------------------------------------

// GetNodeInstanceResponsePB

// required .kudu.NodeInstancePB node_instance = 1;
inline bool GetNodeInstanceResponsePB::has_node_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetNodeInstanceResponsePB::set_has_node_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetNodeInstanceResponsePB::clear_has_node_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetNodeInstanceResponsePB::clear_node_instance() {
  if (node_instance_ != NULL) node_instance_->::kudu::NodeInstancePB::Clear();
  clear_has_node_instance();
}
inline const ::kudu::NodeInstancePB& GetNodeInstanceResponsePB::node_instance() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_ != NULL ? *node_instance_
                         : *::kudu::NodeInstancePB::internal_default_instance();
}
inline ::kudu::NodeInstancePB* GetNodeInstanceResponsePB::mutable_node_instance() {
  set_has_node_instance();
  if (node_instance_ == NULL) {
    node_instance_ = new ::kudu::NodeInstancePB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_;
}
inline ::kudu::NodeInstancePB* GetNodeInstanceResponsePB::release_node_instance() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  clear_has_node_instance();
  ::kudu::NodeInstancePB* temp = node_instance_;
  node_instance_ = NULL;
  return temp;
}
inline void GetNodeInstanceResponsePB::set_allocated_node_instance(::kudu::NodeInstancePB* node_instance) {
  delete node_instance_;
  node_instance_ = node_instance;
  if (node_instance) {
    set_has_node_instance();
  } else {
    clear_has_node_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
}

// -------------------------------------------------------------------

// RunLeaderElectionRequestPB

// optional bytes dest_uuid = 2;
inline bool RunLeaderElectionRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunLeaderElectionRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunLeaderElectionRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunLeaderElectionRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& RunLeaderElectionRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void RunLeaderElectionRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void RunLeaderElectionRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
#endif
inline void RunLeaderElectionRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
inline void RunLeaderElectionRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
inline ::std::string* RunLeaderElectionRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunLeaderElectionRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunLeaderElectionRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool RunLeaderElectionRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunLeaderElectionRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunLeaderElectionRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunLeaderElectionRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& RunLeaderElectionRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void RunLeaderElectionRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
#if LANG_CXX11
inline void RunLeaderElectionRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
#endif
inline void RunLeaderElectionRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
inline void RunLeaderElectionRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
inline ::std::string* RunLeaderElectionRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunLeaderElectionRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunLeaderElectionRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}

// -------------------------------------------------------------------

// RunLeaderElectionResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
inline bool RunLeaderElectionResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunLeaderElectionResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunLeaderElectionResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunLeaderElectionResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& RunLeaderElectionResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* RunLeaderElectionResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* RunLeaderElectionResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void RunLeaderElectionResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionResponsePB.error)
}

// -------------------------------------------------------------------

// LeaderStepDownRequestPB

// optional bytes dest_uuid = 2;
inline bool LeaderStepDownRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderStepDownRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderStepDownRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderStepDownRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& LeaderStepDownRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void LeaderStepDownRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void LeaderStepDownRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
#endif
inline void LeaderStepDownRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
inline void LeaderStepDownRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
inline ::std::string* LeaderStepDownRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderStepDownRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderStepDownRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool LeaderStepDownRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaderStepDownRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaderStepDownRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaderStepDownRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& LeaderStepDownRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void LeaderStepDownRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
#if LANG_CXX11
inline void LeaderStepDownRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
#endif
inline void LeaderStepDownRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
inline void LeaderStepDownRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
inline ::std::string* LeaderStepDownRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderStepDownRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderStepDownRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}

// -------------------------------------------------------------------

// LeaderStepDownResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
inline bool LeaderStepDownResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderStepDownResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderStepDownResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderStepDownResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& LeaderStepDownResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* LeaderStepDownResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* LeaderStepDownResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void LeaderStepDownResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownResponsePB.error)
}

// -------------------------------------------------------------------

// GetLastOpIdRequestPB

// optional bytes dest_uuid = 2;
inline bool GetLastOpIdRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastOpIdRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastOpIdRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& GetLastOpIdRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void GetLastOpIdRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void GetLastOpIdRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
#endif
inline void GetLastOpIdRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
inline void GetLastOpIdRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
inline ::std::string* GetLastOpIdRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLastOpIdRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastOpIdRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool GetLastOpIdRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLastOpIdRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLastOpIdRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& GetLastOpIdRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void GetLastOpIdRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
#if LANG_CXX11
inline void GetLastOpIdRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
#endif
inline void GetLastOpIdRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
inline void GetLastOpIdRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
inline ::std::string* GetLastOpIdRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLastOpIdRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastOpIdRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}

// optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
inline bool GetLastOpIdRequestPB::has_opid_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_opid_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLastOpIdRequestPB::clear_has_opid_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLastOpIdRequestPB::clear_opid_type() {
  opid_type_ = 1;
  clear_has_opid_type();
}
inline ::kudu::consensus::OpIdType GetLastOpIdRequestPB::opid_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.opid_type)
  return static_cast< ::kudu::consensus::OpIdType >(opid_type_);
}
inline void GetLastOpIdRequestPB::set_opid_type(::kudu::consensus::OpIdType value) {
  assert(::kudu::consensus::OpIdType_IsValid(value));
  set_has_opid_type();
  opid_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.opid_type)
}

// -------------------------------------------------------------------

// GetLastOpIdResponsePB

// optional .kudu.consensus.OpId opid = 1;
inline bool GetLastOpIdResponsePB::has_opid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastOpIdResponsePB::set_has_opid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastOpIdResponsePB::clear_has_opid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastOpIdResponsePB::clear_opid() {
  if (opid_ != NULL) opid_->::kudu::consensus::OpId::Clear();
  clear_has_opid();
}
inline const ::kudu::consensus::OpId& GetLastOpIdResponsePB::opid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdResponsePB.opid)
  return opid_ != NULL ? *opid_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
inline ::kudu::consensus::OpId* GetLastOpIdResponsePB::mutable_opid() {
  set_has_opid();
  if (opid_ == NULL) {
    opid_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdResponsePB.opid)
  return opid_;
}
inline ::kudu::consensus::OpId* GetLastOpIdResponsePB::release_opid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdResponsePB.opid)
  clear_has_opid();
  ::kudu::consensus::OpId* temp = opid_;
  opid_ = NULL;
  return temp;
}
inline void GetLastOpIdResponsePB::set_allocated_opid(::kudu::consensus::OpId* opid) {
  delete opid_;
  opid_ = opid;
  if (opid) {
    set_has_opid();
  } else {
    clear_has_opid();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdResponsePB.opid)
}

// optional .kudu.tserver.TabletServerErrorPB error = 2;
inline bool GetLastOpIdResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLastOpIdResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLastOpIdResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLastOpIdResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& GetLastOpIdResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* GetLastOpIdResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* GetLastOpIdResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void GetLastOpIdResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdResponsePB.error)
}

// -------------------------------------------------------------------

// GetConsensusStateRequestPB

// optional bytes dest_uuid = 2;
inline bool GetConsensusStateRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConsensusStateRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConsensusStateRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& GetConsensusStateRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void GetConsensusStateRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void GetConsensusStateRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
#endif
inline void GetConsensusStateRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
inline void GetConsensusStateRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
inline ::std::string* GetConsensusStateRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConsensusStateRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConsensusStateRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool GetConsensusStateRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetConsensusStateRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetConsensusStateRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& GetConsensusStateRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void GetConsensusStateRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
#if LANG_CXX11
inline void GetConsensusStateRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
#endif
inline void GetConsensusStateRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
inline void GetConsensusStateRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
inline ::std::string* GetConsensusStateRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConsensusStateRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConsensusStateRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}

// optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
inline bool GetConsensusStateRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetConsensusStateRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetConsensusStateRequestPB::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::kudu::consensus::ConsensusConfigType GetConsensusStateRequestPB::type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.type)
  return static_cast< ::kudu::consensus::ConsensusConfigType >(type_);
}
inline void GetConsensusStateRequestPB::set_type(::kudu::consensus::ConsensusConfigType value) {
  assert(::kudu::consensus::ConsensusConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.type)
}

// -------------------------------------------------------------------

// GetConsensusStateResponsePB

// optional .kudu.consensus.ConsensusStatePB cstate = 1;
inline bool GetConsensusStateResponsePB::has_cstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConsensusStateResponsePB::set_has_cstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConsensusStateResponsePB::clear_has_cstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConsensusStateResponsePB::clear_cstate() {
  if (cstate_ != NULL) cstate_->::kudu::consensus::ConsensusStatePB::Clear();
  clear_has_cstate();
}
inline const ::kudu::consensus::ConsensusStatePB& GetConsensusStateResponsePB::cstate() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_ != NULL ? *cstate_
                         : *::kudu::consensus::ConsensusStatePB::internal_default_instance();
}
inline ::kudu::consensus::ConsensusStatePB* GetConsensusStateResponsePB::mutable_cstate() {
  set_has_cstate();
  if (cstate_ == NULL) {
    cstate_ = new ::kudu::consensus::ConsensusStatePB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_;
}
inline ::kudu::consensus::ConsensusStatePB* GetConsensusStateResponsePB::release_cstate() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateResponsePB.cstate)
  clear_has_cstate();
  ::kudu::consensus::ConsensusStatePB* temp = cstate_;
  cstate_ = NULL;
  return temp;
}
inline void GetConsensusStateResponsePB::set_allocated_cstate(::kudu::consensus::ConsensusStatePB* cstate) {
  delete cstate_;
  cstate_ = cstate;
  if (cstate) {
    set_has_cstate();
  } else {
    clear_has_cstate();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateResponsePB.cstate)
}

// optional .kudu.tserver.TabletServerErrorPB error = 2;
inline bool GetConsensusStateResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetConsensusStateResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetConsensusStateResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetConsensusStateResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& GetConsensusStateResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* GetConsensusStateResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* GetConsensusStateResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void GetConsensusStateResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateResponsePB.error)
}

// -------------------------------------------------------------------

// StartTabletCopyRequestPB

// optional bytes dest_uuid = 5;
inline bool StartTabletCopyRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartTabletCopyRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartTabletCopyRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
inline const ::std::string& StartTabletCopyRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
inline void StartTabletCopyRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
#if LANG_CXX11
inline void StartTabletCopyRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
#endif
inline void StartTabletCopyRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
inline void StartTabletCopyRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTabletCopyRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTabletCopyRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool StartTabletCopyRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartTabletCopyRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartTabletCopyRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
inline const ::std::string& StartTabletCopyRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
inline void StartTabletCopyRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
#if LANG_CXX11
inline void StartTabletCopyRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
#endif
inline void StartTabletCopyRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
inline void StartTabletCopyRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTabletCopyRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTabletCopyRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}

// required bytes copy_peer_uuid = 2;
inline bool StartTabletCopyRequestPB::has_copy_peer_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_copy_peer_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartTabletCopyRequestPB::clear_has_copy_peer_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartTabletCopyRequestPB::clear_copy_peer_uuid() {
  copy_peer_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_copy_peer_uuid();
}
inline const ::std::string& StartTabletCopyRequestPB::copy_peer_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return copy_peer_uuid_.GetNoArena();
}
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const ::std::string& value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
#if LANG_CXX11
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(::std::string&& value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
#endif
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const char* value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const void* value, size_t size) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_copy_peer_uuid() {
  set_has_copy_peer_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return copy_peer_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTabletCopyRequestPB::release_copy_peer_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  clear_has_copy_peer_uuid();
  return copy_peer_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTabletCopyRequestPB::set_allocated_copy_peer_uuid(::std::string* copy_peer_uuid) {
  if (copy_peer_uuid != NULL) {
    set_has_copy_peer_uuid();
  } else {
    clear_has_copy_peer_uuid();
  }
  copy_peer_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copy_peer_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}

// required .kudu.HostPortPB copy_peer_addr = 3;
inline bool StartTabletCopyRequestPB::has_copy_peer_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_copy_peer_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StartTabletCopyRequestPB::clear_has_copy_peer_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StartTabletCopyRequestPB::clear_copy_peer_addr() {
  if (copy_peer_addr_ != NULL) copy_peer_addr_->::kudu::HostPortPB::Clear();
  clear_has_copy_peer_addr();
}
inline const ::kudu::HostPortPB& StartTabletCopyRequestPB::copy_peer_addr() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_ != NULL ? *copy_peer_addr_
                         : *::kudu::HostPortPB::internal_default_instance();
}
inline ::kudu::HostPortPB* StartTabletCopyRequestPB::mutable_copy_peer_addr() {
  set_has_copy_peer_addr();
  if (copy_peer_addr_ == NULL) {
    copy_peer_addr_ = new ::kudu::HostPortPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_;
}
inline ::kudu::HostPortPB* StartTabletCopyRequestPB::release_copy_peer_addr() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  clear_has_copy_peer_addr();
  ::kudu::HostPortPB* temp = copy_peer_addr_;
  copy_peer_addr_ = NULL;
  return temp;
}
inline void StartTabletCopyRequestPB::set_allocated_copy_peer_addr(::kudu::HostPortPB* copy_peer_addr) {
  delete copy_peer_addr_;
  copy_peer_addr_ = copy_peer_addr;
  if (copy_peer_addr) {
    set_has_copy_peer_addr();
  } else {
    clear_has_copy_peer_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
}

// optional int64 caller_term = 4 [default = -1];
inline bool StartTabletCopyRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StartTabletCopyRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StartTabletCopyRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(-1);
  clear_has_caller_term();
}
inline ::google::protobuf::int64 StartTabletCopyRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.caller_term)
  return caller_term_;
}
inline void StartTabletCopyRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.caller_term)
}

// -------------------------------------------------------------------

// StartTabletCopyResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
inline bool StartTabletCopyResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartTabletCopyResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartTabletCopyResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartTabletCopyResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
inline const ::kudu::tserver::TabletServerErrorPB& StartTabletCopyResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
inline ::kudu::tserver::TabletServerErrorPB* StartTabletCopyResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyResponsePB.error)
  return error_;
}
inline ::kudu::tserver::TabletServerErrorPB* StartTabletCopyResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void StartTabletCopyResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyResponsePB.error)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace consensus
}  // namespace kudu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kudu::consensus::ConsensusErrorPB_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::ConsensusErrorPB_Code>() {
  return ::kudu::consensus::ConsensusErrorPB_Code_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::OperationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::OperationType>() {
  return ::kudu::consensus::OperationType_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::DriverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::DriverType>() {
  return ::kudu::consensus::DriverType_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::ChangeConfigType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::ChangeConfigType>() {
  return ::kudu::consensus::ChangeConfigType_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::OpIdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::OpIdType>() {
  return ::kudu::consensus::OpIdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consensus_2eproto__INCLUDED
