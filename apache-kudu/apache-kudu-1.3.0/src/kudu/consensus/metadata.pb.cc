// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kudu {
namespace consensus {
class RaftPeerPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RaftPeerPB> {
} _RaftPeerPB_default_instance_;
class RaftConfigPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RaftConfigPB> {
} _RaftConfigPB_default_instance_;
class ConsensusStatePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusStatePB> {
} _ConsensusStatePB_default_instance_;
class ConsensusMetadataPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusMetadataPB> {
} _ConsensusMetadataPB_default_instance_;

namespace protobuf_metadata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, permanent_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, member_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, last_known_addr_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, opid_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, obsolete_local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, peers_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, current_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, leader_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, config_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, committed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, current_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, voted_for_),
  1,
  2,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(RaftPeerPB)},
  { 10, 17, sizeof(RaftConfigPB)},
  { 20, 27, sizeof(ConsensusStatePB)},
  { 30, 37, sizeof(ConsensusMetadataPB)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RaftPeerPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RaftConfigPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusStatePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusMetadataPB_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "metadata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _RaftPeerPB_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RaftConfigPB_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ConsensusStatePB_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConsensusMetadataPB_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::kudu::protobuf_kudu_2fcommon_2fcommon_2eproto::InitDefaults();
  _RaftPeerPB_default_instance_.DefaultConstruct();
  _RaftConfigPB_default_instance_.DefaultConstruct();
  _ConsensusStatePB_default_instance_.DefaultConstruct();
  _ConsensusMetadataPB_default_instance_.DefaultConstruct();
  _RaftPeerPB_default_instance_.get_mutable()->last_known_addr_ = const_cast< ::kudu::HostPortPB*>(
      ::kudu::HostPortPB::internal_default_instance());
  _ConsensusStatePB_default_instance_.get_mutable()->config_ = const_cast< ::kudu::consensus::RaftConfigPB*>(
      ::kudu::consensus::RaftConfigPB::internal_default_instance());
  _ConsensusMetadataPB_default_instance_.get_mutable()->committed_config_ = const_cast< ::kudu::consensus::RaftConfigPB*>(
      ::kudu::consensus::RaftConfigPB::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016metadata.proto\022\016kudu.consensus\032\030kudu/c"
      "ommon/common.proto\"\244\002\n\nRaftPeerPB\022\026\n\016per"
      "manent_uuid\030\001 \001(\014\022:\n\013member_type\030\002 \001(\0162%"
      ".kudu.consensus.RaftPeerPB.MemberType\022)\n"
      "\017last_known_addr\030\003 \001(\0132\020.kudu.HostPortPB"
      "\"U\n\004Role\022\021\n\014UNKNOWN_ROLE\020\347\007\022\014\n\010FOLLOWER\020"
      "\000\022\n\n\006LEADER\020\001\022\013\n\007LEARNER\020\002\022\023\n\017NON_PARTIC"
      "IPANT\020\003\"@\n\nMemberType\022\030\n\023UNKNOWN_MEMBER_"
      "TYPE\020\347\007\022\r\n\tNON_VOTER\020\000\022\t\n\005VOTER\020\001\"e\n\014Raf"
      "tConfigPB\022\022\n\nopid_index\030\001 \001(\003\022\026\n\016OBSOLET"
      "E_local\030\002 \001(\010\022)\n\005peers\030\003 \003(\0132\032.kudu.cons"
      "ensus.RaftPeerPB\"k\n\020ConsensusStatePB\022\024\n\014"
      "current_term\030\001 \002(\003\022\023\n\013leader_uuid\030\002 \001(\t\022"
      ",\n\006config\030\003 \002(\0132\034.kudu.consensus.RaftCon"
      "figPB\"v\n\023ConsensusMetadataPB\0226\n\020committe"
      "d_config\030\001 \002(\0132\034.kudu.consensus.RaftConf"
      "igPB\022\024\n\014current_term\030\002 \002(\003\022\021\n\tvoted_for\030"
      "\003 \001(\t*q\n\023ConsensusConfigType\022\035\n\030CONSENSU"
      "S_CONFIG_UNKNOWN\020\347\007\022\036\n\032CONSENSUS_CONFIG_"
      "COMMITTED\020\001\022\033\n\027CONSENSUS_CONFIG_ACTIVE\020\002"
      "B\033\n\031org.apache.kudu.consensus"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metadata.proto", &protobuf_RegisterTypes);
  ::kudu::protobuf_kudu_2fcommon_2fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_metadata_2eproto

const ::google::protobuf::EnumDescriptor* RaftPeerPB_Role_descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_enum_descriptors[0];
}
bool RaftPeerPB_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RaftPeerPB_Role RaftPeerPB::UNKNOWN_ROLE;
const RaftPeerPB_Role RaftPeerPB::FOLLOWER;
const RaftPeerPB_Role RaftPeerPB::LEADER;
const RaftPeerPB_Role RaftPeerPB::LEARNER;
const RaftPeerPB_Role RaftPeerPB::NON_PARTICIPANT;
const RaftPeerPB_Role RaftPeerPB::Role_MIN;
const RaftPeerPB_Role RaftPeerPB::Role_MAX;
const int RaftPeerPB::Role_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RaftPeerPB_MemberType_descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_enum_descriptors[1];
}
bool RaftPeerPB_MemberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RaftPeerPB_MemberType RaftPeerPB::UNKNOWN_MEMBER_TYPE;
const RaftPeerPB_MemberType RaftPeerPB::NON_VOTER;
const RaftPeerPB_MemberType RaftPeerPB::VOTER;
const RaftPeerPB_MemberType RaftPeerPB::MemberType_MIN;
const RaftPeerPB_MemberType RaftPeerPB::MemberType_MAX;
const int RaftPeerPB::MemberType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConsensusConfigType_descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_enum_descriptors[2];
}
bool ConsensusConfigType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftPeerPB::kPermanentUuidFieldNumber;
const int RaftPeerPB::kMemberTypeFieldNumber;
const int RaftPeerPB::kLastKnownAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftPeerPB::RaftPeerPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.RaftPeerPB)
}
RaftPeerPB::RaftPeerPB(const RaftPeerPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  permanent_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_permanent_uuid()) {
    permanent_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permanent_uuid_);
  }
  if (from.has_last_known_addr()) {
    last_known_addr_ = new ::kudu::HostPortPB(*from.last_known_addr_);
  } else {
    last_known_addr_ = NULL;
  }
  member_type_ = from.member_type_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.RaftPeerPB)
}

void RaftPeerPB::SharedCtor() {
  _cached_size_ = 0;
  permanent_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_known_addr_ = NULL;
  member_type_ = 999;
}

RaftPeerPB::~RaftPeerPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.RaftPeerPB)
  SharedDtor();
}

void RaftPeerPB::SharedDtor() {
  permanent_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete last_known_addr_;
  }
}

void RaftPeerPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftPeerPB::descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[0].descriptor;
}

const RaftPeerPB& RaftPeerPB::default_instance() {
  protobuf_metadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RaftPeerPB* RaftPeerPB::New(::google::protobuf::Arena* arena) const {
  RaftPeerPB* n = new RaftPeerPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftPeerPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.RaftPeerPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_permanent_uuid()) {
      GOOGLE_DCHECK(!permanent_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*permanent_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_last_known_addr()) {
      GOOGLE_DCHECK(last_known_addr_ != NULL);
      last_known_addr_->::kudu::HostPortPB::Clear();
    }
    member_type_ = 999;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RaftPeerPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.RaftPeerPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes permanent_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_permanent_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::RaftPeerPB_MemberType_IsValid(value)) {
            set_member_type(static_cast< ::kudu::consensus::RaftPeerPB_MemberType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.HostPortPB last_known_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_known_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.RaftPeerPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.RaftPeerPB)
  return false;
#undef DO_
}

void RaftPeerPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.RaftPeerPB)
  // optional bytes permanent_uuid = 1;
  if (has_permanent_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->permanent_uuid(), output);
  }

  // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
  if (has_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->member_type(), output);
  }

  // optional .kudu.HostPortPB last_known_addr = 3;
  if (has_last_known_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->last_known_addr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.RaftPeerPB)
}

::google::protobuf::uint8* RaftPeerPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.RaftPeerPB)
  // optional bytes permanent_uuid = 1;
  if (has_permanent_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->permanent_uuid(), target);
  }

  // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
  if (has_member_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->member_type(), target);
  }

  // optional .kudu.HostPortPB last_known_addr = 3;
  if (has_last_known_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->last_known_addr_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.RaftPeerPB)
  return target;
}

size_t RaftPeerPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.RaftPeerPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes permanent_uuid = 1;
    if (has_permanent_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->permanent_uuid());
    }

    // optional .kudu.HostPortPB last_known_addr = 3;
    if (has_last_known_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_known_addr_);
    }

    // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
    if (has_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->member_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftPeerPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.RaftPeerPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftPeerPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftPeerPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.RaftPeerPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.RaftPeerPB)
    MergeFrom(*source);
  }
}

void RaftPeerPB::MergeFrom(const RaftPeerPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.RaftPeerPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_permanent_uuid()) {
      set_has_permanent_uuid();
      permanent_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permanent_uuid_);
    }
    if (from.has_last_known_addr()) {
      mutable_last_known_addr()->::kudu::HostPortPB::MergeFrom(from.last_known_addr());
    }
    if (from.has_member_type()) {
      set_member_type(from.member_type());
    }
  }
}

void RaftPeerPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.RaftPeerPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftPeerPB::CopyFrom(const RaftPeerPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.RaftPeerPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftPeerPB::IsInitialized() const {
  if (has_last_known_addr()) {
    if (!this->last_known_addr_->IsInitialized()) return false;
  }
  return true;
}

void RaftPeerPB::Swap(RaftPeerPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftPeerPB::InternalSwap(RaftPeerPB* other) {
  permanent_uuid_.Swap(&other->permanent_uuid_);
  std::swap(last_known_addr_, other->last_known_addr_);
  std::swap(member_type_, other->member_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftPeerPB::GetMetadata() const {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftPeerPB

// optional bytes permanent_uuid = 1;
bool RaftPeerPB::has_permanent_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftPeerPB::set_has_permanent_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftPeerPB::clear_has_permanent_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftPeerPB::clear_permanent_uuid() {
  permanent_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permanent_uuid();
}
const ::std::string& RaftPeerPB::permanent_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.permanent_uuid)
  return permanent_uuid_.GetNoArena();
}
void RaftPeerPB::set_permanent_uuid(const ::std::string& value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftPeerPB.permanent_uuid)
}
#if LANG_CXX11
void RaftPeerPB::set_permanent_uuid(::std::string&& value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RaftPeerPB.permanent_uuid)
}
#endif
void RaftPeerPB::set_permanent_uuid(const char* value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RaftPeerPB.permanent_uuid)
}
void RaftPeerPB::set_permanent_uuid(const void* value, size_t size) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RaftPeerPB.permanent_uuid)
}
::std::string* RaftPeerPB::mutable_permanent_uuid() {
  set_has_permanent_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftPeerPB.permanent_uuid)
  return permanent_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftPeerPB::release_permanent_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RaftPeerPB.permanent_uuid)
  clear_has_permanent_uuid();
  return permanent_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftPeerPB::set_allocated_permanent_uuid(::std::string* permanent_uuid) {
  if (permanent_uuid != NULL) {
    set_has_permanent_uuid();
  } else {
    clear_has_permanent_uuid();
  }
  permanent_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permanent_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RaftPeerPB.permanent_uuid)
}

// optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
bool RaftPeerPB::has_member_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftPeerPB::set_has_member_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftPeerPB::clear_has_member_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftPeerPB::clear_member_type() {
  member_type_ = 999;
  clear_has_member_type();
}
::kudu::consensus::RaftPeerPB_MemberType RaftPeerPB::member_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.member_type)
  return static_cast< ::kudu::consensus::RaftPeerPB_MemberType >(member_type_);
}
void RaftPeerPB::set_member_type(::kudu::consensus::RaftPeerPB_MemberType value) {
  assert(::kudu::consensus::RaftPeerPB_MemberType_IsValid(value));
  set_has_member_type();
  member_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftPeerPB.member_type)
}

// optional .kudu.HostPortPB last_known_addr = 3;
bool RaftPeerPB::has_last_known_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftPeerPB::set_has_last_known_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftPeerPB::clear_has_last_known_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftPeerPB::clear_last_known_addr() {
  if (last_known_addr_ != NULL) last_known_addr_->::kudu::HostPortPB::Clear();
  clear_has_last_known_addr();
}
const ::kudu::HostPortPB& RaftPeerPB::last_known_addr() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_ != NULL ? *last_known_addr_
                         : *::kudu::HostPortPB::internal_default_instance();
}
::kudu::HostPortPB* RaftPeerPB::mutable_last_known_addr() {
  set_has_last_known_addr();
  if (last_known_addr_ == NULL) {
    last_known_addr_ = new ::kudu::HostPortPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_;
}
::kudu::HostPortPB* RaftPeerPB::release_last_known_addr() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RaftPeerPB.last_known_addr)
  clear_has_last_known_addr();
  ::kudu::HostPortPB* temp = last_known_addr_;
  last_known_addr_ = NULL;
  return temp;
}
void RaftPeerPB::set_allocated_last_known_addr(::kudu::HostPortPB* last_known_addr) {
  delete last_known_addr_;
  last_known_addr_ = last_known_addr;
  if (last_known_addr) {
    set_has_last_known_addr();
  } else {
    clear_has_last_known_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RaftPeerPB.last_known_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftConfigPB::kOpidIndexFieldNumber;
const int RaftConfigPB::kOBSOLETELocalFieldNumber;
const int RaftConfigPB::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftConfigPB::RaftConfigPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.RaftConfigPB)
}
RaftConfigPB::RaftConfigPB(const RaftConfigPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opid_index_, &from.opid_index_,
    reinterpret_cast<char*>(&obsolete_local_) -
    reinterpret_cast<char*>(&opid_index_) + sizeof(obsolete_local_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.RaftConfigPB)
}

void RaftConfigPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&opid_index_, 0, reinterpret_cast<char*>(&obsolete_local_) -
    reinterpret_cast<char*>(&opid_index_) + sizeof(obsolete_local_));
}

RaftConfigPB::~RaftConfigPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.RaftConfigPB)
  SharedDtor();
}

void RaftConfigPB::SharedDtor() {
}

void RaftConfigPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftConfigPB::descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[1].descriptor;
}

const RaftConfigPB& RaftConfigPB::default_instance() {
  protobuf_metadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RaftConfigPB* RaftConfigPB::New(::google::protobuf::Arena* arena) const {
  RaftConfigPB* n = new RaftConfigPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftConfigPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.RaftConfigPB)
  peers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&opid_index_, 0, reinterpret_cast<char*>(&obsolete_local_) -
      reinterpret_cast<char*>(&opid_index_) + sizeof(obsolete_local_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RaftConfigPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.RaftConfigPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 opid_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_opid_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opid_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool OBSOLETE_local = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_obsolete_local();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kudu.consensus.RaftPeerPB peers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.RaftConfigPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.RaftConfigPB)
  return false;
#undef DO_
}

void RaftConfigPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.RaftConfigPB)
  // optional int64 opid_index = 1;
  if (has_opid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->opid_index(), output);
  }

  // optional bool OBSOLETE_local = 2;
  if (has_obsolete_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->obsolete_local(), output);
  }

  // repeated .kudu.consensus.RaftPeerPB peers = 3;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.RaftConfigPB)
}

::google::protobuf::uint8* RaftConfigPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.RaftConfigPB)
  // optional int64 opid_index = 1;
  if (has_opid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->opid_index(), target);
  }

  // optional bool OBSOLETE_local = 2;
  if (has_obsolete_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->obsolete_local(), target);
  }

  // repeated .kudu.consensus.RaftPeerPB peers = 3;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->peers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.RaftConfigPB)
  return target;
}

size_t RaftConfigPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.RaftConfigPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .kudu.consensus.RaftPeerPB peers = 3;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 opid_index = 1;
    if (has_opid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opid_index());
    }

    // optional bool OBSOLETE_local = 2;
    if (has_obsolete_local()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftConfigPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.RaftConfigPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftConfigPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftConfigPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.RaftConfigPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.RaftConfigPB)
    MergeFrom(*source);
  }
}

void RaftConfigPB::MergeFrom(const RaftConfigPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.RaftConfigPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_opid_index()) {
      set_opid_index(from.opid_index());
    }
    if (from.has_obsolete_local()) {
      set_obsolete_local(from.obsolete_local());
    }
  }
}

void RaftConfigPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.RaftConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftConfigPB::CopyFrom(const RaftConfigPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.RaftConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftConfigPB::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->peers())) return false;
  return true;
}

void RaftConfigPB::Swap(RaftConfigPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftConfigPB::InternalSwap(RaftConfigPB* other) {
  peers_.UnsafeArenaSwap(&other->peers_);
  std::swap(opid_index_, other->opid_index_);
  std::swap(obsolete_local_, other->obsolete_local_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftConfigPB::GetMetadata() const {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftConfigPB

// optional int64 opid_index = 1;
bool RaftConfigPB::has_opid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftConfigPB::set_has_opid_index() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftConfigPB::clear_has_opid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftConfigPB::clear_opid_index() {
  opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_opid_index();
}
::google::protobuf::int64 RaftConfigPB::opid_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.opid_index)
  return opid_index_;
}
void RaftConfigPB::set_opid_index(::google::protobuf::int64 value) {
  set_has_opid_index();
  opid_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftConfigPB.opid_index)
}

// optional bool OBSOLETE_local = 2;
bool RaftConfigPB::has_obsolete_local() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftConfigPB::set_has_obsolete_local() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftConfigPB::clear_has_obsolete_local() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftConfigPB::clear_obsolete_local() {
  obsolete_local_ = false;
  clear_has_obsolete_local();
}
bool RaftConfigPB::obsolete_local() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.OBSOLETE_local)
  return obsolete_local_;
}
void RaftConfigPB::set_obsolete_local(bool value) {
  set_has_obsolete_local();
  obsolete_local_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftConfigPB.OBSOLETE_local)
}

// repeated .kudu.consensus.RaftPeerPB peers = 3;
int RaftConfigPB::peers_size() const {
  return peers_.size();
}
void RaftConfigPB::clear_peers() {
  peers_.Clear();
}
const ::kudu::consensus::RaftPeerPB& RaftConfigPB::peers(int index) const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.peers)
  return peers_.Get(index);
}
::kudu::consensus::RaftPeerPB* RaftConfigPB::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftConfigPB.peers)
  return peers_.Mutable(index);
}
::kudu::consensus::RaftPeerPB* RaftConfigPB::add_peers() {
  // @@protoc_insertion_point(field_add:kudu.consensus.RaftConfigPB.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >*
RaftConfigPB::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:kudu.consensus.RaftConfigPB.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >&
RaftConfigPB::peers() const {
  // @@protoc_insertion_point(field_list:kudu.consensus.RaftConfigPB.peers)
  return peers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusStatePB::kCurrentTermFieldNumber;
const int ConsensusStatePB::kLeaderUuidFieldNumber;
const int ConsensusStatePB::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusStatePB::ConsensusStatePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusStatePB)
}
ConsensusStatePB::ConsensusStatePB(const ConsensusStatePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_uuid()) {
    leader_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_uuid_);
  }
  if (from.has_config()) {
    config_ = new ::kudu::consensus::RaftConfigPB(*from.config_);
  } else {
    config_ = NULL;
  }
  current_term_ = from.current_term_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusStatePB)
}

void ConsensusStatePB::SharedCtor() {
  _cached_size_ = 0;
  leader_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, reinterpret_cast<char*>(&current_term_) -
    reinterpret_cast<char*>(&config_) + sizeof(current_term_));
}

ConsensusStatePB::~ConsensusStatePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusStatePB)
  SharedDtor();
}

void ConsensusStatePB::SharedDtor() {
  leader_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void ConsensusStatePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusStatePB::descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[2].descriptor;
}

const ConsensusStatePB& ConsensusStatePB::default_instance() {
  protobuf_metadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusStatePB* ConsensusStatePB::New(::google::protobuf::Arena* arena) const {
  ConsensusStatePB* n = new ConsensusStatePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusStatePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusStatePB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_leader_uuid()) {
      GOOGLE_DCHECK(!leader_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*leader_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_config()) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->::kudu::consensus::RaftConfigPB::Clear();
    }
  }
  current_term_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusStatePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusStatePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 current_term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_current_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leader_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_uuid().data(), this->leader_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.ConsensusStatePB.leader_uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.RaftConfigPB config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusStatePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusStatePB)
  return false;
#undef DO_
}

void ConsensusStatePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusStatePB)
  // required int64 current_term = 1;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->current_term(), output);
  }

  // optional string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusStatePB.leader_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_uuid(), output);
  }

  // required .kudu.consensus.RaftConfigPB config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusStatePB)
}

::google::protobuf::uint8* ConsensusStatePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusStatePB)
  // required int64 current_term = 1;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->current_term(), target);
  }

  // optional string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusStatePB.leader_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_uuid(), target);
  }

  // required .kudu.consensus.RaftConfigPB config = 3;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusStatePB)
  return target;
}

size_t ConsensusStatePB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ConsensusStatePB)
  size_t total_size = 0;

  if (has_config()) {
    // required .kudu.consensus.RaftConfigPB config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  if (has_current_term()) {
    // required int64 current_term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_term());
  }

  return total_size;
}
size_t ConsensusStatePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusStatePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .kudu.consensus.RaftConfigPB config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);

    // required int64 current_term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string leader_uuid = 2;
  if (has_leader_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusStatePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusStatePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusStatePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusStatePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusStatePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusStatePB)
    MergeFrom(*source);
  }
}

void ConsensusStatePB::MergeFrom(const ConsensusStatePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusStatePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_leader_uuid()) {
      set_has_leader_uuid();
      leader_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_uuid_);
    }
    if (from.has_config()) {
      mutable_config()->::kudu::consensus::RaftConfigPB::MergeFrom(from.config());
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
  }
}

void ConsensusStatePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusStatePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStatePB::CopyFrom(const ConsensusStatePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusStatePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStatePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_config()) {
    if (!this->config_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusStatePB::Swap(ConsensusStatePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusStatePB::InternalSwap(ConsensusStatePB* other) {
  leader_uuid_.Swap(&other->leader_uuid_);
  std::swap(config_, other->config_);
  std::swap(current_term_, other->current_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusStatePB::GetMetadata() const {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusStatePB

// required int64 current_term = 1;
bool ConsensusStatePB::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsensusStatePB::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsensusStatePB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsensusStatePB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
::google::protobuf::int64 ConsensusStatePB::current_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.current_term)
  return current_term_;
}
void ConsensusStatePB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatePB.current_term)
}

// optional string leader_uuid = 2;
bool ConsensusStatePB::has_leader_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusStatePB::set_has_leader_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusStatePB::clear_has_leader_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusStatePB::clear_leader_uuid() {
  leader_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_uuid();
}
const ::std::string& ConsensusStatePB::leader_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.leader_uuid)
  return leader_uuid_.GetNoArena();
}
void ConsensusStatePB::set_leader_uuid(const ::std::string& value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatePB.leader_uuid)
}
#if LANG_CXX11
void ConsensusStatePB::set_leader_uuid(::std::string&& value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusStatePB.leader_uuid)
}
#endif
void ConsensusStatePB::set_leader_uuid(const char* value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusStatePB.leader_uuid)
}
void ConsensusStatePB::set_leader_uuid(const char* value, size_t size) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusStatePB.leader_uuid)
}
::std::string* ConsensusStatePB::mutable_leader_uuid() {
  set_has_leader_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatePB.leader_uuid)
  return leader_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusStatePB::release_leader_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatePB.leader_uuid)
  clear_has_leader_uuid();
  return leader_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusStatePB::set_allocated_leader_uuid(::std::string* leader_uuid) {
  if (leader_uuid != NULL) {
    set_has_leader_uuid();
  } else {
    clear_has_leader_uuid();
  }
  leader_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatePB.leader_uuid)
}

// required .kudu.consensus.RaftConfigPB config = 3;
bool ConsensusStatePB::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusStatePB::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusStatePB::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusStatePB::clear_config() {
  if (config_ != NULL) config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_config();
}
const ::kudu::consensus::RaftConfigPB& ConsensusStatePB::config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.config)
  return config_ != NULL ? *config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
::kudu::consensus::RaftConfigPB* ConsensusStatePB::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatePB.config)
  return config_;
}
::kudu::consensus::RaftConfigPB* ConsensusStatePB::release_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatePB.config)
  clear_has_config();
  ::kudu::consensus::RaftConfigPB* temp = config_;
  config_ = NULL;
  return temp;
}
void ConsensusStatePB::set_allocated_config(::kudu::consensus::RaftConfigPB* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatePB.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusMetadataPB::kCommittedConfigFieldNumber;
const int ConsensusMetadataPB::kCurrentTermFieldNumber;
const int ConsensusMetadataPB::kVotedForFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusMetadataPB::ConsensusMetadataPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_metadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusMetadataPB)
}
ConsensusMetadataPB::ConsensusMetadataPB(const ConsensusMetadataPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voted_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voted_for()) {
    voted_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voted_for_);
  }
  if (from.has_committed_config()) {
    committed_config_ = new ::kudu::consensus::RaftConfigPB(*from.committed_config_);
  } else {
    committed_config_ = NULL;
  }
  current_term_ = from.current_term_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusMetadataPB)
}

void ConsensusMetadataPB::SharedCtor() {
  _cached_size_ = 0;
  voted_for_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&committed_config_, 0, reinterpret_cast<char*>(&current_term_) -
    reinterpret_cast<char*>(&committed_config_) + sizeof(current_term_));
}

ConsensusMetadataPB::~ConsensusMetadataPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusMetadataPB)
  SharedDtor();
}

void ConsensusMetadataPB::SharedDtor() {
  voted_for_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete committed_config_;
  }
}

void ConsensusMetadataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusMetadataPB::descriptor() {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[3].descriptor;
}

const ConsensusMetadataPB& ConsensusMetadataPB::default_instance() {
  protobuf_metadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusMetadataPB* ConsensusMetadataPB::New(::google::protobuf::Arena* arena) const {
  ConsensusMetadataPB* n = new ConsensusMetadataPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusMetadataPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusMetadataPB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_voted_for()) {
      GOOGLE_DCHECK(!voted_for_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*voted_for_.UnsafeRawStringPointer())->clear();
    }
    if (has_committed_config()) {
      GOOGLE_DCHECK(committed_config_ != NULL);
      committed_config_->::kudu::consensus::RaftConfigPB::Clear();
    }
  }
  current_term_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusMetadataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusMetadataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.RaftConfigPB committed_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_committed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 current_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_current_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string voted_for = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voted_for()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voted_for().data(), this->voted_for().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.ConsensusMetadataPB.voted_for");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusMetadataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusMetadataPB)
  return false;
#undef DO_
}

void ConsensusMetadataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusMetadataPB)
  // required .kudu.consensus.RaftConfigPB committed_config = 1;
  if (has_committed_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->committed_config_, output);
  }

  // required int64 current_term = 2;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_term(), output);
  }

  // optional string voted_for = 3;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusMetadataPB.voted_for");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->voted_for(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusMetadataPB)
}

::google::protobuf::uint8* ConsensusMetadataPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusMetadataPB)
  // required .kudu.consensus.RaftConfigPB committed_config = 1;
  if (has_committed_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->committed_config_, false, target);
  }

  // required int64 current_term = 2;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->current_term(), target);
  }

  // optional string voted_for = 3;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusMetadataPB.voted_for");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voted_for(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusMetadataPB)
  return target;
}

size_t ConsensusMetadataPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ConsensusMetadataPB)
  size_t total_size = 0;

  if (has_committed_config()) {
    // required .kudu.consensus.RaftConfigPB committed_config = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->committed_config_);
  }

  if (has_current_term()) {
    // required int64 current_term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_term());
  }

  return total_size;
}
size_t ConsensusMetadataPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusMetadataPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .kudu.consensus.RaftConfigPB committed_config = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->committed_config_);

    // required int64 current_term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string voted_for = 3;
  if (has_voted_for()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->voted_for());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusMetadataPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusMetadataPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusMetadataPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusMetadataPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusMetadataPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusMetadataPB)
    MergeFrom(*source);
  }
}

void ConsensusMetadataPB::MergeFrom(const ConsensusMetadataPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusMetadataPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_voted_for()) {
      set_has_voted_for();
      voted_for_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voted_for_);
    }
    if (from.has_committed_config()) {
      mutable_committed_config()->::kudu::consensus::RaftConfigPB::MergeFrom(from.committed_config());
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
  }
}

void ConsensusMetadataPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusMetadataPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusMetadataPB::CopyFrom(const ConsensusMetadataPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusMetadataPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusMetadataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_committed_config()) {
    if (!this->committed_config_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusMetadataPB::Swap(ConsensusMetadataPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusMetadataPB::InternalSwap(ConsensusMetadataPB* other) {
  voted_for_.Swap(&other->voted_for_);
  std::swap(committed_config_, other->committed_config_);
  std::swap(current_term_, other->current_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusMetadataPB::GetMetadata() const {
  protobuf_metadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_metadata_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusMetadataPB

// required .kudu.consensus.RaftConfigPB committed_config = 1;
bool ConsensusMetadataPB::has_committed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusMetadataPB::set_has_committed_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusMetadataPB::clear_has_committed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusMetadataPB::clear_committed_config() {
  if (committed_config_ != NULL) committed_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_committed_config();
}
const ::kudu::consensus::RaftConfigPB& ConsensusMetadataPB::committed_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_ != NULL ? *committed_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
::kudu::consensus::RaftConfigPB* ConsensusMetadataPB::mutable_committed_config() {
  set_has_committed_config();
  if (committed_config_ == NULL) {
    committed_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_;
}
::kudu::consensus::RaftConfigPB* ConsensusMetadataPB::release_committed_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusMetadataPB.committed_config)
  clear_has_committed_config();
  ::kudu::consensus::RaftConfigPB* temp = committed_config_;
  committed_config_ = NULL;
  return temp;
}
void ConsensusMetadataPB::set_allocated_committed_config(::kudu::consensus::RaftConfigPB* committed_config) {
  delete committed_config_;
  committed_config_ = committed_config;
  if (committed_config) {
    set_has_committed_config();
  } else {
    clear_has_committed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusMetadataPB.committed_config)
}

// required int64 current_term = 2;
bool ConsensusMetadataPB::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsensusMetadataPB::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsensusMetadataPB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsensusMetadataPB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
::google::protobuf::int64 ConsensusMetadataPB::current_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.current_term)
  return current_term_;
}
void ConsensusMetadataPB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusMetadataPB.current_term)
}

// optional string voted_for = 3;
bool ConsensusMetadataPB::has_voted_for() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusMetadataPB::set_has_voted_for() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusMetadataPB::clear_has_voted_for() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusMetadataPB::clear_voted_for() {
  voted_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voted_for();
}
const ::std::string& ConsensusMetadataPB::voted_for() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.voted_for)
  return voted_for_.GetNoArena();
}
void ConsensusMetadataPB::set_voted_for(const ::std::string& value) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusMetadataPB.voted_for)
}
#if LANG_CXX11
void ConsensusMetadataPB::set_voted_for(::std::string&& value) {
  set_has_voted_for();
  voted_for_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusMetadataPB.voted_for)
}
#endif
void ConsensusMetadataPB::set_voted_for(const char* value) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusMetadataPB.voted_for)
}
void ConsensusMetadataPB::set_voted_for(const char* value, size_t size) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusMetadataPB.voted_for)
}
::std::string* ConsensusMetadataPB::mutable_voted_for() {
  set_has_voted_for();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusMetadataPB.voted_for)
  return voted_for_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusMetadataPB::release_voted_for() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusMetadataPB.voted_for)
  clear_has_voted_for();
  return voted_for_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusMetadataPB::set_allocated_voted_for(::std::string* voted_for) {
  if (voted_for != NULL) {
    set_has_voted_for();
  } else {
    clear_has_voted_for();
  }
  voted_for_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voted_for);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusMetadataPB.voted_for)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace kudu

// @@protoc_insertion_point(global_scope)
