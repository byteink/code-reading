// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef PROTOBUF_metadata_2eproto__INCLUDED
#define PROTOBUF_metadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kudu/common/common.pb.h"
// @@protoc_insertion_point(includes)
namespace kudu {
class ColumnPredicatePB;
class ColumnPredicatePBDefaultTypeInternal;
extern ColumnPredicatePBDefaultTypeInternal _ColumnPredicatePB_default_instance_;
class ColumnPredicatePB_Equality;
class ColumnPredicatePB_EqualityDefaultTypeInternal;
extern ColumnPredicatePB_EqualityDefaultTypeInternal _ColumnPredicatePB_Equality_default_instance_;
class ColumnPredicatePB_InList;
class ColumnPredicatePB_InListDefaultTypeInternal;
extern ColumnPredicatePB_InListDefaultTypeInternal _ColumnPredicatePB_InList_default_instance_;
class ColumnPredicatePB_IsNotNull;
class ColumnPredicatePB_IsNotNullDefaultTypeInternal;
extern ColumnPredicatePB_IsNotNullDefaultTypeInternal _ColumnPredicatePB_IsNotNull_default_instance_;
class ColumnPredicatePB_IsNull;
class ColumnPredicatePB_IsNullDefaultTypeInternal;
extern ColumnPredicatePB_IsNullDefaultTypeInternal _ColumnPredicatePB_IsNull_default_instance_;
class ColumnPredicatePB_Range;
class ColumnPredicatePB_RangeDefaultTypeInternal;
extern ColumnPredicatePB_RangeDefaultTypeInternal _ColumnPredicatePB_Range_default_instance_;
class ColumnSchemaPB;
class ColumnSchemaPBDefaultTypeInternal;
extern ColumnSchemaPBDefaultTypeInternal _ColumnSchemaPB_default_instance_;
class HostPortPB;
class HostPortPBDefaultTypeInternal;
extern HostPortPBDefaultTypeInternal _HostPortPB_default_instance_;
class PartitionPB;
class PartitionPBDefaultTypeInternal;
extern PartitionPBDefaultTypeInternal _PartitionPB_default_instance_;
class PartitionSchemaPB;
class PartitionSchemaPBDefaultTypeInternal;
extern PartitionSchemaPBDefaultTypeInternal _PartitionSchemaPB_default_instance_;
class PartitionSchemaPB_ColumnIdentifierPB;
class PartitionSchemaPB_ColumnIdentifierPBDefaultTypeInternal;
extern PartitionSchemaPB_ColumnIdentifierPBDefaultTypeInternal _PartitionSchemaPB_ColumnIdentifierPB_default_instance_;
class PartitionSchemaPB_HashBucketSchemaPB;
class PartitionSchemaPB_HashBucketSchemaPBDefaultTypeInternal;
extern PartitionSchemaPB_HashBucketSchemaPBDefaultTypeInternal _PartitionSchemaPB_HashBucketSchemaPB_default_instance_;
class PartitionSchemaPB_RangeSchemaPB;
class PartitionSchemaPB_RangeSchemaPBDefaultTypeInternal;
extern PartitionSchemaPB_RangeSchemaPBDefaultTypeInternal _PartitionSchemaPB_RangeSchemaPB_default_instance_;
class SchemaPB;
class SchemaPBDefaultTypeInternal;
extern SchemaPBDefaultTypeInternal _SchemaPB_default_instance_;
namespace consensus {
class ConsensusMetadataPB;
class ConsensusMetadataPBDefaultTypeInternal;
extern ConsensusMetadataPBDefaultTypeInternal _ConsensusMetadataPB_default_instance_;
class ConsensusStatePB;
class ConsensusStatePBDefaultTypeInternal;
extern ConsensusStatePBDefaultTypeInternal _ConsensusStatePB_default_instance_;
class RaftConfigPB;
class RaftConfigPBDefaultTypeInternal;
extern RaftConfigPBDefaultTypeInternal _RaftConfigPB_default_instance_;
class RaftPeerPB;
class RaftPeerPBDefaultTypeInternal;
extern RaftPeerPBDefaultTypeInternal _RaftPeerPB_default_instance_;
}  // namespace consensus
}  // namespace kudu

namespace kudu {
namespace consensus {

namespace protobuf_metadata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_metadata_2eproto

enum RaftPeerPB_Role {
  RaftPeerPB_Role_UNKNOWN_ROLE = 999,
  RaftPeerPB_Role_FOLLOWER = 0,
  RaftPeerPB_Role_LEADER = 1,
  RaftPeerPB_Role_LEARNER = 2,
  RaftPeerPB_Role_NON_PARTICIPANT = 3
};
bool RaftPeerPB_Role_IsValid(int value);
const RaftPeerPB_Role RaftPeerPB_Role_Role_MIN = RaftPeerPB_Role_FOLLOWER;
const RaftPeerPB_Role RaftPeerPB_Role_Role_MAX = RaftPeerPB_Role_UNKNOWN_ROLE;
const int RaftPeerPB_Role_Role_ARRAYSIZE = RaftPeerPB_Role_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftPeerPB_Role_descriptor();
inline const ::std::string& RaftPeerPB_Role_Name(RaftPeerPB_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftPeerPB_Role_descriptor(), value);
}
inline bool RaftPeerPB_Role_Parse(
    const ::std::string& name, RaftPeerPB_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftPeerPB_Role>(
    RaftPeerPB_Role_descriptor(), name, value);
}
enum RaftPeerPB_MemberType {
  RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE = 999,
  RaftPeerPB_MemberType_NON_VOTER = 0,
  RaftPeerPB_MemberType_VOTER = 1
};
bool RaftPeerPB_MemberType_IsValid(int value);
const RaftPeerPB_MemberType RaftPeerPB_MemberType_MemberType_MIN = RaftPeerPB_MemberType_NON_VOTER;
const RaftPeerPB_MemberType RaftPeerPB_MemberType_MemberType_MAX = RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE;
const int RaftPeerPB_MemberType_MemberType_ARRAYSIZE = RaftPeerPB_MemberType_MemberType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftPeerPB_MemberType_descriptor();
inline const ::std::string& RaftPeerPB_MemberType_Name(RaftPeerPB_MemberType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftPeerPB_MemberType_descriptor(), value);
}
inline bool RaftPeerPB_MemberType_Parse(
    const ::std::string& name, RaftPeerPB_MemberType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftPeerPB_MemberType>(
    RaftPeerPB_MemberType_descriptor(), name, value);
}
enum ConsensusConfigType {
  CONSENSUS_CONFIG_UNKNOWN = 999,
  CONSENSUS_CONFIG_COMMITTED = 1,
  CONSENSUS_CONFIG_ACTIVE = 2
};
bool ConsensusConfigType_IsValid(int value);
const ConsensusConfigType ConsensusConfigType_MIN = CONSENSUS_CONFIG_COMMITTED;
const ConsensusConfigType ConsensusConfigType_MAX = CONSENSUS_CONFIG_UNKNOWN;
const int ConsensusConfigType_ARRAYSIZE = ConsensusConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConsensusConfigType_descriptor();
inline const ::std::string& ConsensusConfigType_Name(ConsensusConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConsensusConfigType_descriptor(), value);
}
inline bool ConsensusConfigType_Parse(
    const ::std::string& name, ConsensusConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsensusConfigType>(
    ConsensusConfigType_descriptor(), name, value);
}
// ===================================================================

class RaftPeerPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.RaftPeerPB) */ {
 public:
  RaftPeerPB();
  virtual ~RaftPeerPB();

  RaftPeerPB(const RaftPeerPB& from);

  inline RaftPeerPB& operator=(const RaftPeerPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftPeerPB& default_instance();

  static inline const RaftPeerPB* internal_default_instance() {
    return reinterpret_cast<const RaftPeerPB*>(
               &_RaftPeerPB_default_instance_);
  }

  void Swap(RaftPeerPB* other);

  // implements Message ----------------------------------------------

  inline RaftPeerPB* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftPeerPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftPeerPB& from);
  void MergeFrom(const RaftPeerPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftPeerPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RaftPeerPB_Role Role;
  static const Role UNKNOWN_ROLE =
    RaftPeerPB_Role_UNKNOWN_ROLE;
  static const Role FOLLOWER =
    RaftPeerPB_Role_FOLLOWER;
  static const Role LEADER =
    RaftPeerPB_Role_LEADER;
  static const Role LEARNER =
    RaftPeerPB_Role_LEARNER;
  static const Role NON_PARTICIPANT =
    RaftPeerPB_Role_NON_PARTICIPANT;
  static inline bool Role_IsValid(int value) {
    return RaftPeerPB_Role_IsValid(value);
  }
  static const Role Role_MIN =
    RaftPeerPB_Role_Role_MIN;
  static const Role Role_MAX =
    RaftPeerPB_Role_Role_MAX;
  static const int Role_ARRAYSIZE =
    RaftPeerPB_Role_Role_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Role_descriptor() {
    return RaftPeerPB_Role_descriptor();
  }
  static inline const ::std::string& Role_Name(Role value) {
    return RaftPeerPB_Role_Name(value);
  }
  static inline bool Role_Parse(const ::std::string& name,
      Role* value) {
    return RaftPeerPB_Role_Parse(name, value);
  }

  typedef RaftPeerPB_MemberType MemberType;
  static const MemberType UNKNOWN_MEMBER_TYPE =
    RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE;
  static const MemberType NON_VOTER =
    RaftPeerPB_MemberType_NON_VOTER;
  static const MemberType VOTER =
    RaftPeerPB_MemberType_VOTER;
  static inline bool MemberType_IsValid(int value) {
    return RaftPeerPB_MemberType_IsValid(value);
  }
  static const MemberType MemberType_MIN =
    RaftPeerPB_MemberType_MemberType_MIN;
  static const MemberType MemberType_MAX =
    RaftPeerPB_MemberType_MemberType_MAX;
  static const int MemberType_ARRAYSIZE =
    RaftPeerPB_MemberType_MemberType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemberType_descriptor() {
    return RaftPeerPB_MemberType_descriptor();
  }
  static inline const ::std::string& MemberType_Name(MemberType value) {
    return RaftPeerPB_MemberType_Name(value);
  }
  static inline bool MemberType_Parse(const ::std::string& name,
      MemberType* value) {
    return RaftPeerPB_MemberType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes permanent_uuid = 1;
  bool has_permanent_uuid() const;
  void clear_permanent_uuid();
  static const int kPermanentUuidFieldNumber = 1;
  const ::std::string& permanent_uuid() const;
  void set_permanent_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_permanent_uuid(::std::string&& value);
  #endif
  void set_permanent_uuid(const char* value);
  void set_permanent_uuid(const void* value, size_t size);
  ::std::string* mutable_permanent_uuid();
  ::std::string* release_permanent_uuid();
  void set_allocated_permanent_uuid(::std::string* permanent_uuid);

  // optional .kudu.HostPortPB last_known_addr = 3;
  bool has_last_known_addr() const;
  void clear_last_known_addr();
  static const int kLastKnownAddrFieldNumber = 3;
  const ::kudu::HostPortPB& last_known_addr() const;
  ::kudu::HostPortPB* mutable_last_known_addr();
  ::kudu::HostPortPB* release_last_known_addr();
  void set_allocated_last_known_addr(::kudu::HostPortPB* last_known_addr);

  // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
  bool has_member_type() const;
  void clear_member_type();
  static const int kMemberTypeFieldNumber = 2;
  ::kudu::consensus::RaftPeerPB_MemberType member_type() const;
  void set_member_type(::kudu::consensus::RaftPeerPB_MemberType value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.RaftPeerPB)
 private:
  void set_has_permanent_uuid();
  void clear_has_permanent_uuid();
  void set_has_member_type();
  void clear_has_member_type();
  void set_has_last_known_addr();
  void clear_has_last_known_addr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr permanent_uuid_;
  ::kudu::HostPortPB* last_known_addr_;
  int member_type_;
  friend struct protobuf_metadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftConfigPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.RaftConfigPB) */ {
 public:
  RaftConfigPB();
  virtual ~RaftConfigPB();

  RaftConfigPB(const RaftConfigPB& from);

  inline RaftConfigPB& operator=(const RaftConfigPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftConfigPB& default_instance();

  static inline const RaftConfigPB* internal_default_instance() {
    return reinterpret_cast<const RaftConfigPB*>(
               &_RaftConfigPB_default_instance_);
  }

  void Swap(RaftConfigPB* other);

  // implements Message ----------------------------------------------

  inline RaftConfigPB* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftConfigPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftConfigPB& from);
  void MergeFrom(const RaftConfigPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftConfigPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kudu.consensus.RaftPeerPB peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  const ::kudu::consensus::RaftPeerPB& peers(int index) const;
  ::kudu::consensus::RaftPeerPB* mutable_peers(int index);
  ::kudu::consensus::RaftPeerPB* add_peers();
  ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >&
      peers() const;

  // optional int64 opid_index = 1;
  bool has_opid_index() const;
  void clear_opid_index();
  static const int kOpidIndexFieldNumber = 1;
  ::google::protobuf::int64 opid_index() const;
  void set_opid_index(::google::protobuf::int64 value);

  // optional bool OBSOLETE_local = 2;
  bool has_obsolete_local() const;
  void clear_obsolete_local();
  static const int kOBSOLETELocalFieldNumber = 2;
  bool obsolete_local() const;
  void set_obsolete_local(bool value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.RaftConfigPB)
 private:
  void set_has_opid_index();
  void clear_has_opid_index();
  void set_has_obsolete_local();
  void clear_has_obsolete_local();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB > peers_;
  ::google::protobuf::int64 opid_index_;
  bool obsolete_local_;
  friend struct protobuf_metadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsensusStatePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusStatePB) */ {
 public:
  ConsensusStatePB();
  virtual ~ConsensusStatePB();

  ConsensusStatePB(const ConsensusStatePB& from);

  inline ConsensusStatePB& operator=(const ConsensusStatePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusStatePB& default_instance();

  static inline const ConsensusStatePB* internal_default_instance() {
    return reinterpret_cast<const ConsensusStatePB*>(
               &_ConsensusStatePB_default_instance_);
  }

  void Swap(ConsensusStatePB* other);

  // implements Message ----------------------------------------------

  inline ConsensusStatePB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusStatePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusStatePB& from);
  void MergeFrom(const ConsensusStatePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusStatePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string leader_uuid = 2;
  bool has_leader_uuid() const;
  void clear_leader_uuid();
  static const int kLeaderUuidFieldNumber = 2;
  const ::std::string& leader_uuid() const;
  void set_leader_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_uuid(::std::string&& value);
  #endif
  void set_leader_uuid(const char* value);
  void set_leader_uuid(const char* value, size_t size);
  ::std::string* mutable_leader_uuid();
  ::std::string* release_leader_uuid();
  void set_allocated_leader_uuid(::std::string* leader_uuid);

  // required .kudu.consensus.RaftConfigPB config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::kudu::consensus::RaftConfigPB& config() const;
  ::kudu::consensus::RaftConfigPB* mutable_config();
  ::kudu::consensus::RaftConfigPB* release_config();
  void set_allocated_config(::kudu::consensus::RaftConfigPB* config);

  // required int64 current_term = 1;
  bool has_current_term() const;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  ::google::protobuf::int64 current_term() const;
  void set_current_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusStatePB)
 private:
  void set_has_current_term();
  void clear_has_current_term();
  void set_has_leader_uuid();
  void clear_has_leader_uuid();
  void set_has_config();
  void clear_has_config();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_uuid_;
  ::kudu::consensus::RaftConfigPB* config_;
  ::google::protobuf::int64 current_term_;
  friend struct protobuf_metadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsensusMetadataPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kudu.consensus.ConsensusMetadataPB) */ {
 public:
  ConsensusMetadataPB();
  virtual ~ConsensusMetadataPB();

  ConsensusMetadataPB(const ConsensusMetadataPB& from);

  inline ConsensusMetadataPB& operator=(const ConsensusMetadataPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusMetadataPB& default_instance();

  static inline const ConsensusMetadataPB* internal_default_instance() {
    return reinterpret_cast<const ConsensusMetadataPB*>(
               &_ConsensusMetadataPB_default_instance_);
  }

  void Swap(ConsensusMetadataPB* other);

  // implements Message ----------------------------------------------

  inline ConsensusMetadataPB* New() const PROTOBUF_FINAL { return New(NULL); }

  ConsensusMetadataPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConsensusMetadataPB& from);
  void MergeFrom(const ConsensusMetadataPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConsensusMetadataPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string voted_for = 3;
  bool has_voted_for() const;
  void clear_voted_for();
  static const int kVotedForFieldNumber = 3;
  const ::std::string& voted_for() const;
  void set_voted_for(const ::std::string& value);
  #if LANG_CXX11
  void set_voted_for(::std::string&& value);
  #endif
  void set_voted_for(const char* value);
  void set_voted_for(const char* value, size_t size);
  ::std::string* mutable_voted_for();
  ::std::string* release_voted_for();
  void set_allocated_voted_for(::std::string* voted_for);

  // required .kudu.consensus.RaftConfigPB committed_config = 1;
  bool has_committed_config() const;
  void clear_committed_config();
  static const int kCommittedConfigFieldNumber = 1;
  const ::kudu::consensus::RaftConfigPB& committed_config() const;
  ::kudu::consensus::RaftConfigPB* mutable_committed_config();
  ::kudu::consensus::RaftConfigPB* release_committed_config();
  void set_allocated_committed_config(::kudu::consensus::RaftConfigPB* committed_config);

  // required int64 current_term = 2;
  bool has_current_term() const;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 2;
  ::google::protobuf::int64 current_term() const;
  void set_current_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kudu.consensus.ConsensusMetadataPB)
 private:
  void set_has_committed_config();
  void clear_has_committed_config();
  void set_has_current_term();
  void clear_has_current_term();
  void set_has_voted_for();
  void clear_has_voted_for();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr voted_for_;
  ::kudu::consensus::RaftConfigPB* committed_config_;
  ::google::protobuf::int64 current_term_;
  friend struct protobuf_metadata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftPeerPB

// optional bytes permanent_uuid = 1;
inline bool RaftPeerPB::has_permanent_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftPeerPB::set_has_permanent_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftPeerPB::clear_has_permanent_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftPeerPB::clear_permanent_uuid() {
  permanent_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permanent_uuid();
}
inline const ::std::string& RaftPeerPB::permanent_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.permanent_uuid)
  return permanent_uuid_.GetNoArena();
}
inline void RaftPeerPB::set_permanent_uuid(const ::std::string& value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftPeerPB.permanent_uuid)
}
#if LANG_CXX11
inline void RaftPeerPB::set_permanent_uuid(::std::string&& value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RaftPeerPB.permanent_uuid)
}
#endif
inline void RaftPeerPB::set_permanent_uuid(const char* value) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RaftPeerPB.permanent_uuid)
}
inline void RaftPeerPB::set_permanent_uuid(const void* value, size_t size) {
  set_has_permanent_uuid();
  permanent_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RaftPeerPB.permanent_uuid)
}
inline ::std::string* RaftPeerPB::mutable_permanent_uuid() {
  set_has_permanent_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftPeerPB.permanent_uuid)
  return permanent_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftPeerPB::release_permanent_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RaftPeerPB.permanent_uuid)
  clear_has_permanent_uuid();
  return permanent_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftPeerPB::set_allocated_permanent_uuid(::std::string* permanent_uuid) {
  if (permanent_uuid != NULL) {
    set_has_permanent_uuid();
  } else {
    clear_has_permanent_uuid();
  }
  permanent_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permanent_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RaftPeerPB.permanent_uuid)
}

// optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;
inline bool RaftPeerPB::has_member_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftPeerPB::set_has_member_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftPeerPB::clear_has_member_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftPeerPB::clear_member_type() {
  member_type_ = 999;
  clear_has_member_type();
}
inline ::kudu::consensus::RaftPeerPB_MemberType RaftPeerPB::member_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.member_type)
  return static_cast< ::kudu::consensus::RaftPeerPB_MemberType >(member_type_);
}
inline void RaftPeerPB::set_member_type(::kudu::consensus::RaftPeerPB_MemberType value) {
  assert(::kudu::consensus::RaftPeerPB_MemberType_IsValid(value));
  set_has_member_type();
  member_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftPeerPB.member_type)
}

// optional .kudu.HostPortPB last_known_addr = 3;
inline bool RaftPeerPB::has_last_known_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftPeerPB::set_has_last_known_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftPeerPB::clear_has_last_known_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftPeerPB::clear_last_known_addr() {
  if (last_known_addr_ != NULL) last_known_addr_->::kudu::HostPortPB::Clear();
  clear_has_last_known_addr();
}
inline const ::kudu::HostPortPB& RaftPeerPB::last_known_addr() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_ != NULL ? *last_known_addr_
                         : *::kudu::HostPortPB::internal_default_instance();
}
inline ::kudu::HostPortPB* RaftPeerPB::mutable_last_known_addr() {
  set_has_last_known_addr();
  if (last_known_addr_ == NULL) {
    last_known_addr_ = new ::kudu::HostPortPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_;
}
inline ::kudu::HostPortPB* RaftPeerPB::release_last_known_addr() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RaftPeerPB.last_known_addr)
  clear_has_last_known_addr();
  ::kudu::HostPortPB* temp = last_known_addr_;
  last_known_addr_ = NULL;
  return temp;
}
inline void RaftPeerPB::set_allocated_last_known_addr(::kudu::HostPortPB* last_known_addr) {
  delete last_known_addr_;
  last_known_addr_ = last_known_addr;
  if (last_known_addr) {
    set_has_last_known_addr();
  } else {
    clear_has_last_known_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RaftPeerPB.last_known_addr)
}

// -------------------------------------------------------------------

// RaftConfigPB

// optional int64 opid_index = 1;
inline bool RaftConfigPB::has_opid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftConfigPB::set_has_opid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftConfigPB::clear_has_opid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftConfigPB::clear_opid_index() {
  opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_opid_index();
}
inline ::google::protobuf::int64 RaftConfigPB::opid_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.opid_index)
  return opid_index_;
}
inline void RaftConfigPB::set_opid_index(::google::protobuf::int64 value) {
  set_has_opid_index();
  opid_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftConfigPB.opid_index)
}

// optional bool OBSOLETE_local = 2;
inline bool RaftConfigPB::has_obsolete_local() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftConfigPB::set_has_obsolete_local() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftConfigPB::clear_has_obsolete_local() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftConfigPB::clear_obsolete_local() {
  obsolete_local_ = false;
  clear_has_obsolete_local();
}
inline bool RaftConfigPB::obsolete_local() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.OBSOLETE_local)
  return obsolete_local_;
}
inline void RaftConfigPB::set_obsolete_local(bool value) {
  set_has_obsolete_local();
  obsolete_local_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.RaftConfigPB.OBSOLETE_local)
}

// repeated .kudu.consensus.RaftPeerPB peers = 3;
inline int RaftConfigPB::peers_size() const {
  return peers_.size();
}
inline void RaftConfigPB::clear_peers() {
  peers_.Clear();
}
inline const ::kudu::consensus::RaftPeerPB& RaftConfigPB::peers(int index) const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RaftConfigPB.peers)
  return peers_.Get(index);
}
inline ::kudu::consensus::RaftPeerPB* RaftConfigPB::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RaftConfigPB.peers)
  return peers_.Mutable(index);
}
inline ::kudu::consensus::RaftPeerPB* RaftConfigPB::add_peers() {
  // @@protoc_insertion_point(field_add:kudu.consensus.RaftConfigPB.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >*
RaftConfigPB::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:kudu.consensus.RaftConfigPB.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::RaftPeerPB >&
RaftConfigPB::peers() const {
  // @@protoc_insertion_point(field_list:kudu.consensus.RaftConfigPB.peers)
  return peers_;
}

// -------------------------------------------------------------------

// ConsensusStatePB

// required int64 current_term = 1;
inline bool ConsensusStatePB::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusStatePB::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusStatePB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusStatePB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 ConsensusStatePB::current_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.current_term)
  return current_term_;
}
inline void ConsensusStatePB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatePB.current_term)
}

// optional string leader_uuid = 2;
inline bool ConsensusStatePB::has_leader_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusStatePB::set_has_leader_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusStatePB::clear_has_leader_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusStatePB::clear_leader_uuid() {
  leader_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_uuid();
}
inline const ::std::string& ConsensusStatePB::leader_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.leader_uuid)
  return leader_uuid_.GetNoArena();
}
inline void ConsensusStatePB::set_leader_uuid(const ::std::string& value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatePB.leader_uuid)
}
#if LANG_CXX11
inline void ConsensusStatePB::set_leader_uuid(::std::string&& value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusStatePB.leader_uuid)
}
#endif
inline void ConsensusStatePB::set_leader_uuid(const char* value) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusStatePB.leader_uuid)
}
inline void ConsensusStatePB::set_leader_uuid(const char* value, size_t size) {
  set_has_leader_uuid();
  leader_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusStatePB.leader_uuid)
}
inline ::std::string* ConsensusStatePB::mutable_leader_uuid() {
  set_has_leader_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatePB.leader_uuid)
  return leader_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusStatePB::release_leader_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatePB.leader_uuid)
  clear_has_leader_uuid();
  return leader_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusStatePB::set_allocated_leader_uuid(::std::string* leader_uuid) {
  if (leader_uuid != NULL) {
    set_has_leader_uuid();
  } else {
    clear_has_leader_uuid();
  }
  leader_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatePB.leader_uuid)
}

// required .kudu.consensus.RaftConfigPB config = 3;
inline bool ConsensusStatePB::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusStatePB::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusStatePB::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusStatePB::clear_config() {
  if (config_ != NULL) config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_config();
}
inline const ::kudu::consensus::RaftConfigPB& ConsensusStatePB::config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatePB.config)
  return config_ != NULL ? *config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
inline ::kudu::consensus::RaftConfigPB* ConsensusStatePB::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatePB.config)
  return config_;
}
inline ::kudu::consensus::RaftConfigPB* ConsensusStatePB::release_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatePB.config)
  clear_has_config();
  ::kudu::consensus::RaftConfigPB* temp = config_;
  config_ = NULL;
  return temp;
}
inline void ConsensusStatePB::set_allocated_config(::kudu::consensus::RaftConfigPB* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatePB.config)
}

// -------------------------------------------------------------------

// ConsensusMetadataPB

// required .kudu.consensus.RaftConfigPB committed_config = 1;
inline bool ConsensusMetadataPB::has_committed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusMetadataPB::set_has_committed_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusMetadataPB::clear_has_committed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusMetadataPB::clear_committed_config() {
  if (committed_config_ != NULL) committed_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_committed_config();
}
inline const ::kudu::consensus::RaftConfigPB& ConsensusMetadataPB::committed_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_ != NULL ? *committed_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
inline ::kudu::consensus::RaftConfigPB* ConsensusMetadataPB::mutable_committed_config() {
  set_has_committed_config();
  if (committed_config_ == NULL) {
    committed_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_;
}
inline ::kudu::consensus::RaftConfigPB* ConsensusMetadataPB::release_committed_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusMetadataPB.committed_config)
  clear_has_committed_config();
  ::kudu::consensus::RaftConfigPB* temp = committed_config_;
  committed_config_ = NULL;
  return temp;
}
inline void ConsensusMetadataPB::set_allocated_committed_config(::kudu::consensus::RaftConfigPB* committed_config) {
  delete committed_config_;
  committed_config_ = committed_config;
  if (committed_config) {
    set_has_committed_config();
  } else {
    clear_has_committed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusMetadataPB.committed_config)
}

// required int64 current_term = 2;
inline bool ConsensusMetadataPB::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusMetadataPB::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusMetadataPB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusMetadataPB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 ConsensusMetadataPB::current_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.current_term)
  return current_term_;
}
inline void ConsensusMetadataPB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusMetadataPB.current_term)
}

// optional string voted_for = 3;
inline bool ConsensusMetadataPB::has_voted_for() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusMetadataPB::set_has_voted_for() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusMetadataPB::clear_has_voted_for() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusMetadataPB::clear_voted_for() {
  voted_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voted_for();
}
inline const ::std::string& ConsensusMetadataPB::voted_for() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusMetadataPB.voted_for)
  return voted_for_.GetNoArena();
}
inline void ConsensusMetadataPB::set_voted_for(const ::std::string& value) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusMetadataPB.voted_for)
}
#if LANG_CXX11
inline void ConsensusMetadataPB::set_voted_for(::std::string&& value) {
  set_has_voted_for();
  voted_for_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusMetadataPB.voted_for)
}
#endif
inline void ConsensusMetadataPB::set_voted_for(const char* value) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusMetadataPB.voted_for)
}
inline void ConsensusMetadataPB::set_voted_for(const char* value, size_t size) {
  set_has_voted_for();
  voted_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusMetadataPB.voted_for)
}
inline ::std::string* ConsensusMetadataPB::mutable_voted_for() {
  set_has_voted_for();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusMetadataPB.voted_for)
  return voted_for_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsensusMetadataPB::release_voted_for() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusMetadataPB.voted_for)
  clear_has_voted_for();
  return voted_for_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusMetadataPB::set_allocated_voted_for(::std::string* voted_for) {
  if (voted_for != NULL) {
    set_has_voted_for();
  } else {
    clear_has_voted_for();
  }
  voted_for_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voted_for);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusMetadataPB.voted_for)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace consensus
}  // namespace kudu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kudu::consensus::RaftPeerPB_Role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::RaftPeerPB_Role>() {
  return ::kudu::consensus::RaftPeerPB_Role_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::RaftPeerPB_MemberType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::RaftPeerPB_MemberType>() {
  return ::kudu::consensus::RaftPeerPB_MemberType_descriptor();
}
template <> struct is_proto_enum< ::kudu::consensus::ConsensusConfigType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::consensus::ConsensusConfigType>() {
  return ::kudu::consensus::ConsensusConfigType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metadata_2eproto__INCLUDED
