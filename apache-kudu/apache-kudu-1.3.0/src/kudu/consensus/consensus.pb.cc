// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "consensus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kudu {
namespace consensus {
class ConsensusErrorPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusErrorPB> {
} _ConsensusErrorPB_default_instance_;
class ChangeConfigRecordPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeConfigRecordPB> {
} _ChangeConfigRecordPB_default_instance_;
class ChangeConfigRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeConfigRequestPB> {
} _ChangeConfigRequestPB_default_instance_;
class ChangeConfigResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeConfigResponsePB> {
} _ChangeConfigResponsePB_default_instance_;
class ReplicateMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicateMsg> {
} _ReplicateMsg_default_instance_;
class CommitMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitMsg> {
} _CommitMsg_default_instance_;
class NoOpRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoOpRequestPB> {
} _NoOpRequestPB_default_instance_;
class ConsensusStatusPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusStatusPB> {
} _ConsensusStatusPB_default_instance_;
class VoteRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoteRequestPB> {
} _VoteRequestPB_default_instance_;
class VoteResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoteResponsePB> {
} _VoteResponsePB_default_instance_;
class ConsensusRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusRequestPB> {
} _ConsensusRequestPB_default_instance_;
class ConsensusResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusResponsePB> {
} _ConsensusResponsePB_default_instance_;
class TransactionStatusPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionStatusPB> {
} _TransactionStatusPB_default_instance_;
class GetNodeInstanceRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInstanceRequestPB> {
} _GetNodeInstanceRequestPB_default_instance_;
class GetNodeInstanceResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetNodeInstanceResponsePB> {
} _GetNodeInstanceResponsePB_default_instance_;
class RunLeaderElectionRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunLeaderElectionRequestPB> {
} _RunLeaderElectionRequestPB_default_instance_;
class RunLeaderElectionResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunLeaderElectionResponsePB> {
} _RunLeaderElectionResponsePB_default_instance_;
class LeaderStepDownRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaderStepDownRequestPB> {
} _LeaderStepDownRequestPB_default_instance_;
class LeaderStepDownResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaderStepDownResponsePB> {
} _LeaderStepDownResponsePB_default_instance_;
class GetLastOpIdRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLastOpIdRequestPB> {
} _GetLastOpIdRequestPB_default_instance_;
class GetLastOpIdResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLastOpIdResponsePB> {
} _GetLastOpIdResponsePB_default_instance_;
class GetConsensusStateRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConsensusStateRequestPB> {
} _GetConsensusStateRequestPB_default_instance_;
class GetConsensusStateResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConsensusStateResponsePB> {
} _GetConsensusStateResponsePB_default_instance_;
class StartTabletCopyRequestPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartTabletCopyRequestPB> {
} _StartTabletCopyRequestPB_default_instance_;
class StartTabletCopyResponsePBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartTabletCopyResponsePB> {
} _StartTabletCopyResponsePB_default_instance_;

namespace protobuf_consensus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, status_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, old_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, new_config_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, cas_config_opid_index_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, new_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, write_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, alter_schema_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, change_config_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, noop_request_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, op_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, commited_op_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, result_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, payload_for_tests_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_received_current_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_committed_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, error_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, ignore_live_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, is_pre_election_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, responder_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, responder_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, vote_granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, consensus_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, error_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, caller_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, caller_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, preceding_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, committed_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, deprecated_committed_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, all_replicated_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, safe_timestamp_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  ~0u,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, responder_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, responder_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, error_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, op_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, tx_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, running_for_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, trace_buffer_),
  2,
  4,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, node_instance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, tablet_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionResponsePB, error_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, tablet_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownResponsePB, error_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, opid_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, opid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, error_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, cstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, error_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, dest_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, tablet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, copy_peer_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, copy_peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, caller_term_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyResponsePB, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyResponsePB, error_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ConsensusErrorPB)},
  { 8, 15, sizeof(ChangeConfigRecordPB)},
  { 18, 27, sizeof(ChangeConfigRequestPB)},
  { 32, 39, sizeof(ChangeConfigResponsePB)},
  { 42, 54, sizeof(ReplicateMsg)},
  { 62, 69, sizeof(CommitMsg)},
  { 72, 77, sizeof(NoOpRequestPB)},
  { 78, 86, sizeof(ConsensusStatusPB)},
  { 90, 101, sizeof(VoteRequestPB)},
  { 108, 117, sizeof(VoteResponsePB)},
  { 122, 136, sizeof(ConsensusRequestPB)},
  { 146, 154, sizeof(ConsensusResponsePB)},
  { 158, 167, sizeof(TransactionStatusPB)},
  { 172, 176, sizeof(GetNodeInstanceRequestPB)},
  { 176, 181, sizeof(GetNodeInstanceResponsePB)},
  { 182, 188, sizeof(RunLeaderElectionRequestPB)},
  { 190, 195, sizeof(RunLeaderElectionResponsePB)},
  { 196, 202, sizeof(LeaderStepDownRequestPB)},
  { 204, 209, sizeof(LeaderStepDownResponsePB)},
  { 210, 217, sizeof(GetLastOpIdRequestPB)},
  { 220, 226, sizeof(GetLastOpIdResponsePB)},
  { 228, 235, sizeof(GetConsensusStateRequestPB)},
  { 238, 244, sizeof(GetConsensusStateResponsePB)},
  { 246, 255, sizeof(StartTabletCopyRequestPB)},
  { 260, 265, sizeof(StartTabletCopyResponsePB)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusErrorPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeConfigRecordPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeConfigRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeConfigResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplicateMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommitMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoOpRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusStatusPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoteRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoteResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionStatusPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeInstanceRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeInstanceResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunLeaderElectionRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunLeaderElectionResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaderStepDownRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaderStepDownResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLastOpIdRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLastOpIdResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConsensusStateRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConsensusStateResponsePB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartTabletCopyRequestPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartTabletCopyResponsePB_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "consensus.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace

void TableStruct::Shutdown() {
  _ConsensusErrorPB_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChangeConfigRecordPB_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChangeConfigRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ChangeConfigResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReplicateMsg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CommitMsg_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NoOpRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ConsensusStatusPB_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _VoteRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _VoteResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ConsensusRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ConsensusResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _TransactionStatusPB_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GetNodeInstanceRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GetNodeInstanceResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _RunLeaderElectionRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RunLeaderElectionResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _LeaderStepDownRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _LeaderStepDownResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GetLastOpIdRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GetLastOpIdResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GetConsensusStateRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _GetConsensusStateResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _StartTabletCopyRequestPB_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _StartTabletCopyResponsePB_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::kudu::protobuf_kudu_2fcommon_2fcommon_2eproto::InitDefaults();
  ::kudu::protobuf_kudu_2fcommon_2fwire_5fprotocol_2eproto::InitDefaults();
  ::kudu::consensus::protobuf_kudu_2fconsensus_2fmetadata_2eproto::InitDefaults();
  ::kudu::consensus::protobuf_kudu_2fconsensus_2fopid_2eproto::InitDefaults();
  ::kudu::rpc::protobuf_kudu_2frpc_2frpc_5fheader_2eproto::InitDefaults();
  ::kudu::tablet::protobuf_kudu_2ftablet_2fmetadata_2eproto::InitDefaults();
  ::kudu::tablet::protobuf_kudu_2ftablet_2ftablet_2eproto::InitDefaults();
  ::kudu::tserver::protobuf_kudu_2ftserver_2ftserver_5fadmin_2eproto::InitDefaults();
  ::kudu::tserver::protobuf_kudu_2ftserver_2ftserver_2eproto::InitDefaults();
  _ConsensusErrorPB_default_instance_.DefaultConstruct();
  _ChangeConfigRecordPB_default_instance_.DefaultConstruct();
  _ChangeConfigRequestPB_default_instance_.DefaultConstruct();
  _ChangeConfigResponsePB_default_instance_.DefaultConstruct();
  _ReplicateMsg_default_instance_.DefaultConstruct();
  _CommitMsg_default_instance_.DefaultConstruct();
  _NoOpRequestPB_default_instance_.DefaultConstruct();
  _ConsensusStatusPB_default_instance_.DefaultConstruct();
  _VoteRequestPB_default_instance_.DefaultConstruct();
  _VoteResponsePB_default_instance_.DefaultConstruct();
  _ConsensusRequestPB_default_instance_.DefaultConstruct();
  _ConsensusResponsePB_default_instance_.DefaultConstruct();
  _TransactionStatusPB_default_instance_.DefaultConstruct();
  _GetNodeInstanceRequestPB_default_instance_.DefaultConstruct();
  _GetNodeInstanceResponsePB_default_instance_.DefaultConstruct();
  _RunLeaderElectionRequestPB_default_instance_.DefaultConstruct();
  _RunLeaderElectionResponsePB_default_instance_.DefaultConstruct();
  _LeaderStepDownRequestPB_default_instance_.DefaultConstruct();
  _LeaderStepDownResponsePB_default_instance_.DefaultConstruct();
  _GetLastOpIdRequestPB_default_instance_.DefaultConstruct();
  _GetLastOpIdResponsePB_default_instance_.DefaultConstruct();
  _GetConsensusStateRequestPB_default_instance_.DefaultConstruct();
  _GetConsensusStateResponsePB_default_instance_.DefaultConstruct();
  _StartTabletCopyRequestPB_default_instance_.DefaultConstruct();
  _StartTabletCopyResponsePB_default_instance_.DefaultConstruct();
  _ConsensusErrorPB_default_instance_.get_mutable()->status_ = const_cast< ::kudu::AppStatusPB*>(
      ::kudu::AppStatusPB::internal_default_instance());
  _ChangeConfigRecordPB_default_instance_.get_mutable()->old_config_ = const_cast< ::kudu::consensus::RaftConfigPB*>(
      ::kudu::consensus::RaftConfigPB::internal_default_instance());
  _ChangeConfigRecordPB_default_instance_.get_mutable()->new_config_ = const_cast< ::kudu::consensus::RaftConfigPB*>(
      ::kudu::consensus::RaftConfigPB::internal_default_instance());
  _ChangeConfigRequestPB_default_instance_.get_mutable()->server_ = const_cast< ::kudu::consensus::RaftPeerPB*>(
      ::kudu::consensus::RaftPeerPB::internal_default_instance());
  _ChangeConfigResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _ChangeConfigResponsePB_default_instance_.get_mutable()->new_config_ = const_cast< ::kudu::consensus::RaftPeerPB*>(
      ::kudu::consensus::RaftPeerPB::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->id_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->write_request_ = const_cast< ::kudu::tserver::WriteRequestPB*>(
      ::kudu::tserver::WriteRequestPB::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->alter_schema_request_ = const_cast< ::kudu::tserver::AlterSchemaRequestPB*>(
      ::kudu::tserver::AlterSchemaRequestPB::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->change_config_record_ = const_cast< ::kudu::consensus::ChangeConfigRecordPB*>(
      ::kudu::consensus::ChangeConfigRecordPB::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->request_id_ = const_cast< ::kudu::rpc::RequestIdPB*>(
      ::kudu::rpc::RequestIdPB::internal_default_instance());
  _ReplicateMsg_default_instance_.get_mutable()->noop_request_ = const_cast< ::kudu::consensus::NoOpRequestPB*>(
      ::kudu::consensus::NoOpRequestPB::internal_default_instance());
  _CommitMsg_default_instance_.get_mutable()->commited_op_id_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _CommitMsg_default_instance_.get_mutable()->result_ = const_cast< ::kudu::tablet::TxResultPB*>(
      ::kudu::tablet::TxResultPB::internal_default_instance());
  _ConsensusStatusPB_default_instance_.get_mutable()->last_received_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _ConsensusStatusPB_default_instance_.get_mutable()->last_received_current_leader_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _ConsensusStatusPB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::consensus::ConsensusErrorPB*>(
      ::kudu::consensus::ConsensusErrorPB::internal_default_instance());
  _VoteRequestPB_default_instance_.get_mutable()->candidate_status_ = const_cast< ::kudu::consensus::ConsensusStatusPB*>(
      ::kudu::consensus::ConsensusStatusPB::internal_default_instance());
  _VoteResponsePB_default_instance_.get_mutable()->consensus_error_ = const_cast< ::kudu::consensus::ConsensusErrorPB*>(
      ::kudu::consensus::ConsensusErrorPB::internal_default_instance());
  _VoteResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _ConsensusRequestPB_default_instance_.get_mutable()->preceding_id_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _ConsensusRequestPB_default_instance_.get_mutable()->deprecated_committed_index_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _ConsensusResponsePB_default_instance_.get_mutable()->status_ = const_cast< ::kudu::consensus::ConsensusStatusPB*>(
      ::kudu::consensus::ConsensusStatusPB::internal_default_instance());
  _ConsensusResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _TransactionStatusPB_default_instance_.get_mutable()->op_id_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _GetNodeInstanceResponsePB_default_instance_.get_mutable()->node_instance_ = const_cast< ::kudu::NodeInstancePB*>(
      ::kudu::NodeInstancePB::internal_default_instance());
  _RunLeaderElectionResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _LeaderStepDownResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _GetLastOpIdResponsePB_default_instance_.get_mutable()->opid_ = const_cast< ::kudu::consensus::OpId*>(
      ::kudu::consensus::OpId::internal_default_instance());
  _GetLastOpIdResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _GetConsensusStateResponsePB_default_instance_.get_mutable()->cstate_ = const_cast< ::kudu::consensus::ConsensusStatePB*>(
      ::kudu::consensus::ConsensusStatePB::internal_default_instance());
  _GetConsensusStateResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
  _StartTabletCopyRequestPB_default_instance_.get_mutable()->copy_peer_addr_ = const_cast< ::kudu::HostPortPB*>(
      ::kudu::HostPortPB::internal_default_instance());
  _StartTabletCopyResponsePB_default_instance_.get_mutable()->error_ = const_cast< ::kudu::tserver::TabletServerErrorPB*>(
      ::kudu::tserver::TabletServerErrorPB::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017consensus.proto\022\016kudu.consensus\032\030kudu/"
      "common/common.proto\032\037kudu/common/wire_pr"
      "otocol.proto\032\035kudu/consensus/metadata.pr"
      "oto\032\031kudu/consensus/opid.proto\032\031kudu/rpc"
      "/rpc_header.proto\032\032kudu/tablet/metadata."
      "proto\032\030kudu/tablet/tablet.proto\032 kudu/ts"
      "erver/tserver_admin.proto\032\032kudu/tserver/"
      "tserver.proto\"\255\002\n\020ConsensusErrorPB\0223\n\004co"
      "de\030\001 \002(\0162%.kudu.consensus.ConsensusError"
      "PB.Code\022!\n\006status\030\002 \002(\0132\021.kudu.AppStatus"
      "PB\"\300\001\n\004Code\022\013\n\007UNKNOWN\020\000\022\020\n\014INVALID_TERM"
      "\020\002\022\025\n\021LAST_OPID_TOO_OLD\020\003\022\021\n\rALREADY_VOT"
      "ED\020\004\022\021\n\rNOT_IN_QUORUM\020\005\022\037\n\033PRECEDING_ENT"
      "RY_DIDNT_MATCH\020\006\022\023\n\017LEADER_IS_ALIVE\020\007\022\022\n"
      "\016CONSENSUS_BUSY\020\010\022\022\n\016CANNOT_PREPARE\020\t\"\215\001"
      "\n\024ChangeConfigRecordPB\022\021\n\ttablet_id\030\001 \002("
      "\014\0220\n\nold_config\030\002 \002(\0132\034.kudu.consensus.R"
      "aftConfigPB\0220\n\nnew_config\030\003 \002(\0132\034.kudu.c"
      "onsensus.RaftConfigPB\"\270\001\n\025ChangeConfigRe"
      "questPB\022\021\n\tdest_uuid\030\004 \001(\014\022\021\n\ttablet_id\030"
      "\001 \002(\014\022.\n\004type\030\002 \001(\0162 .kudu.consensus.Cha"
      "ngeConfigType\022*\n\006server\030\003 \001(\0132\032.kudu.con"
      "sensus.RaftPeerPB\022\035\n\025cas_config_opid_ind"
      "ex\030\005 \001(\003\"\215\001\n\026ChangeConfigResponsePB\0220\n\005e"
      "rror\030\001 \001(\0132!.kudu.tserver.TabletServerEr"
      "rorPB\022.\n\nnew_config\030\002 \001(\0132\032.kudu.consens"
      "us.RaftPeerPB\022\021\n\ttimestamp\030\003 \001(\006\"\217\003\n\014Rep"
      "licateMsg\022 \n\002id\030\001 \002(\0132\024.kudu.consensus.O"
      "pId\022\021\n\ttimestamp\030\002 \002(\006\022.\n\007op_type\030\004 \002(\0162"
      "\035.kudu.consensus.OperationType\0223\n\rwrite_"
      "request\030\005 \001(\0132\034.kudu.tserver.WriteReques"
      "tPB\022@\n\024alter_schema_request\030\006 \001(\0132\".kudu"
      ".tserver.AlterSchemaRequestPB\022B\n\024change_"
      "config_record\030\007 \001(\0132$.kudu.consensus.Cha"
      "ngeConfigRecordPB\022)\n\nrequest_id\030\010 \001(\0132\025."
      "kudu.rpc.RequestIdPB\0224\n\014noop_request\030\347\007 "
      "\001(\0132\035.kudu.consensus.NoOpRequestPB\"\222\001\n\tC"
      "ommitMsg\022.\n\007op_type\030\001 \002(\0162\035.kudu.consens"
      "us.OperationType\022,\n\016commited_op_id\030\002 \001(\013"
      "2\024.kudu.consensus.OpId\022\'\n\006result\030\003 \001(\0132\027"
      ".kudu.tablet.TxResultPB\"*\n\rNoOpRequestPB"
      "\022\031\n\021payload_for_tests\030\001 \001(\014\"\311\001\n\021Consensu"
      "sStatusPB\022+\n\rlast_received\030\001 \002(\0132\024.kudu."
      "consensus.OpId\022:\n\034last_received_current_"
      "leader\030\004 \001(\0132\024.kudu.consensus.OpId\022\032\n\022la"
      "st_committed_idx\030\002 \001(\003\022/\n\005error\030\003 \001(\0132 ."
      "kudu.consensus.ConsensusErrorPB\"\345\001\n\rVote"
      "RequestPB\022\021\n\tdest_uuid\030\006 \001(\014\022\021\n\ttablet_i"
      "d\030\001 \002(\t\022\026\n\016candidate_uuid\030\002 \002(\014\022\026\n\016candi"
      "date_term\030\003 \002(\003\022;\n\020candidate_status\030\004 \002("
      "\0132!.kudu.consensus.ConsensusStatusPB\022!\n\022"
      "ignore_live_leader\030\005 \001(\010:\005false\022\036\n\017is_pr"
      "e_election\030\007 \001(\010:\005false\"\305\001\n\016VoteResponse"
      "PB\022\026\n\016responder_uuid\030\001 \001(\014\022\026\n\016responder_"
      "term\030\002 \001(\003\022\024\n\014vote_granted\030\003 \001(\010\022:\n\017cons"
      "ensus_error\030\346\007 \001(\0132 .kudu.consensus.Cons"
      "ensusErrorPB\0221\n\005error\030\347\007 \001(\0132!.kudu.tser"
      "ver.TabletServerErrorPB\"\304\002\n\022ConsensusReq"
      "uestPB\022\021\n\tdest_uuid\030\007 \001(\014\022\021\n\ttablet_id\030\001"
      " \002(\t\022\023\n\013caller_uuid\030\002 \002(\014\022\023\n\013caller_term"
      "\030\003 \002(\003\022*\n\014preceding_id\030\004 \001(\0132\024.kudu.cons"
      "ensus.OpId\022\027\n\017committed_index\030\010 \001(\003\0228\n\032D"
      "EPRECATED_committed_index\030\005 \001(\0132\024.kudu.c"
      "onsensus.OpId\022)\n\003ops\030\006 \003(\0132\034.kudu.consen"
      "sus.ReplicateMsg\022\034\n\024all_replicated_index"
      "\030\t \001(\003\022\026\n\016safe_timestamp\030\n \001(\006\"\253\001\n\023Conse"
      "nsusResponsePB\022\026\n\016responder_uuid\030\001 \001(\014\022\026"
      "\n\016responder_term\030\002 \001(\003\0221\n\006status\030\003 \001(\0132!"
      ".kudu.consensus.ConsensusStatusPB\0221\n\005err"
      "or\030\347\007 \001(\0132!.kudu.tserver.TabletServerErr"
      "orPB\"\261\001\n\023TransactionStatusPB\022#\n\005op_id\030\001 "
      "\002(\0132\024.kudu.consensus.OpId\022.\n\007tx_type\030\002 \002"
      "(\0162\035.kudu.consensus.OperationType\022\032\n\022run"
      "ning_for_micros\030\003 \002(\003\022\023\n\013description\030\004 \002"
      "(\t\022\024\n\014trace_buffer\030\006 \001(\t\"\032\n\030GetNodeInsta"
      "nceRequestPB\"H\n\031GetNodeInstanceResponseP"
      "B\022+\n\rnode_instance\030\001 \002(\0132\024.kudu.NodeInst"
      "ancePB\"B\n\032RunLeaderElectionRequestPB\022\021\n\t"
      "dest_uuid\030\002 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\"O\n\033Ru"
      "nLeaderElectionResponsePB\0220\n\005error\030\001 \001(\013"
      "2!.kudu.tserver.TabletServerErrorPB\"\?\n\027L"
      "eaderStepDownRequestPB\022\021\n\tdest_uuid\030\002 \001("
      "\014\022\021\n\ttablet_id\030\001 \002(\014\"L\n\030LeaderStepDownRe"
      "sponsePB\0220\n\005error\030\001 \001(\0132!.kudu.tserver.T"
      "abletServerErrorPB\"x\n\024GetLastOpIdRequest"
      "PB\022\021\n\tdest_uuid\030\002 \001(\014\022\021\n\ttablet_id\030\001 \002(\014"
      "\022:\n\topid_type\030\003 \001(\0162\030.kudu.consensus.OpI"
      "dType:\rRECEIVED_OPID\"m\n\025GetLastOpIdRespo"
      "nsePB\022\"\n\004opid\030\001 \001(\0132\024.kudu.consensus.OpI"
      "d\0220\n\005error\030\002 \001(\0132!.kudu.tserver.TabletSe"
      "rverErrorPB\"\221\001\n\032GetConsensusStateRequest"
      "PB\022\021\n\tdest_uuid\030\002 \001(\014\022\021\n\ttablet_id\030\001 \002(\014"
      "\022M\n\004type\030\003 \001(\0162#.kudu.consensus.Consensu"
      "sConfigType:\032CONSENSUS_CONFIG_COMMITTED\""
      "\201\001\n\033GetConsensusStateResponsePB\0220\n\006cstat"
      "e\030\001 \001(\0132 .kudu.consensus.ConsensusStateP"
      "B\0220\n\005error\030\002 \001(\0132!.kudu.tserver.TabletSe"
      "rverErrorPB\"\233\001\n\030StartTabletCopyRequestPB"
      "\022\021\n\tdest_uuid\030\005 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\022\026"
      "\n\016copy_peer_uuid\030\002 \002(\014\022(\n\016copy_peer_addr"
      "\030\003 \002(\0132\020.kudu.HostPortPB\022\027\n\013caller_term\030"
      "\004 \001(\003:\002-1\"M\n\031StartTabletCopyResponsePB\0220"
      "\n\005error\030\001 \001(\0132!.kudu.tserver.TabletServe"
      "rErrorPB*c\n\rOperationType\022\016\n\nUNKNOWN_OP\020"
      "\000\022\t\n\005NO_OP\020\001\022\014\n\010WRITE_OP\020\003\022\023\n\017ALTER_SCHE"
      "MA_OP\020\004\022\024\n\020CHANGE_CONFIG_OP\020\005*9\n\nDriverT"
      "ype\022\022\n\016UNKNOWN_DRIVER\020\000\022\n\n\006LEADER\020\001\022\013\n\007R"
      "EPLICA\020\002*Z\n\020ChangeConfigType\022\022\n\016UNKNOWN_"
      "CHANGE\020\000\022\016\n\nADD_SERVER\020\001\022\021\n\rREMOVE_SERVE"
      "R\020\002\022\017\n\013CHANGE_ROLE\020\003*H\n\010OpIdType\022\025\n\021UNKN"
      "OWN_OPID_TYPE\020\000\022\021\n\rRECEIVED_OPID\020\001\022\022\n\016CO"
      "MMITTED_OPID\020\0022\253\007\n\020ConsensusService\022Z\n\017U"
      "pdateConsensus\022\".kudu.consensus.Consensu"
      "sRequestPB\032#.kudu.consensus.ConsensusRes"
      "ponsePB\022U\n\024RequestConsensusVote\022\035.kudu.c"
      "onsensus.VoteRequestPB\032\036.kudu.consensus."
      "VoteResponsePB\022]\n\014ChangeConfig\022%.kudu.co"
      "nsensus.ChangeConfigRequestPB\032&.kudu.con"
      "sensus.ChangeConfigResponsePB\022f\n\017GetNode"
      "Instance\022(.kudu.consensus.GetNodeInstanc"
      "eRequestPB\032).kudu.consensus.GetNodeInsta"
      "nceResponsePB\022l\n\021RunLeaderElection\022*.kud"
      "u.consensus.RunLeaderElectionRequestPB\032+"
      ".kudu.consensus.RunLeaderElectionRespons"
      "ePB\022c\n\016LeaderStepDown\022\'.kudu.consensus.L"
      "eaderStepDownRequestPB\032(.kudu.consensus."
      "LeaderStepDownResponsePB\022Z\n\013GetLastOpId\022"
      "$.kudu.consensus.GetLastOpIdRequestPB\032%."
      "kudu.consensus.GetLastOpIdResponsePB\022l\n\021"
      "GetConsensusState\022*.kudu.consensus.GetCo"
      "nsensusStateRequestPB\032+.kudu.consensus.G"
      "etConsensusStateResponsePB\022f\n\017StartTable"
      "tCopy\022(.kudu.consensus.StartTabletCopyRe"
      "questPB\032).kudu.consensus.StartTabletCopy"
      "ResponsePB\032\030\272\265\030\024AuthorizeServiceUserB\033\n\031"
      "org.apache.kudu.consensus"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "consensus.proto", &protobuf_RegisterTypes);
  ::kudu::protobuf_kudu_2fcommon_2fcommon_2eproto::AddDescriptors();
  ::kudu::protobuf_kudu_2fcommon_2fwire_5fprotocol_2eproto::AddDescriptors();
  ::kudu::consensus::protobuf_kudu_2fconsensus_2fmetadata_2eproto::AddDescriptors();
  ::kudu::consensus::protobuf_kudu_2fconsensus_2fopid_2eproto::AddDescriptors();
  ::kudu::rpc::protobuf_kudu_2frpc_2frpc_5fheader_2eproto::AddDescriptors();
  ::kudu::tablet::protobuf_kudu_2ftablet_2fmetadata_2eproto::AddDescriptors();
  ::kudu::tablet::protobuf_kudu_2ftablet_2ftablet_2eproto::AddDescriptors();
  ::kudu::tserver::protobuf_kudu_2ftserver_2ftserver_5fadmin_2eproto::AddDescriptors();
  ::kudu::tserver::protobuf_kudu_2ftserver_2ftserver_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_consensus_2eproto

const ::google::protobuf::EnumDescriptor* ConsensusErrorPB_Code_descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_enum_descriptors[0];
}
bool ConsensusErrorPB_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConsensusErrorPB_Code ConsensusErrorPB::UNKNOWN;
const ConsensusErrorPB_Code ConsensusErrorPB::INVALID_TERM;
const ConsensusErrorPB_Code ConsensusErrorPB::LAST_OPID_TOO_OLD;
const ConsensusErrorPB_Code ConsensusErrorPB::ALREADY_VOTED;
const ConsensusErrorPB_Code ConsensusErrorPB::NOT_IN_QUORUM;
const ConsensusErrorPB_Code ConsensusErrorPB::PRECEDING_ENTRY_DIDNT_MATCH;
const ConsensusErrorPB_Code ConsensusErrorPB::LEADER_IS_ALIVE;
const ConsensusErrorPB_Code ConsensusErrorPB::CONSENSUS_BUSY;
const ConsensusErrorPB_Code ConsensusErrorPB::CANNOT_PREPARE;
const ConsensusErrorPB_Code ConsensusErrorPB::Code_MIN;
const ConsensusErrorPB_Code ConsensusErrorPB::Code_MAX;
const int ConsensusErrorPB::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OperationType_descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_enum_descriptors[1];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DriverType_descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_enum_descriptors[2];
}
bool DriverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChangeConfigType_descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_enum_descriptors[3];
}
bool ChangeConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpIdType_descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_enum_descriptors[4];
}
bool OpIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusErrorPB::kCodeFieldNumber;
const int ConsensusErrorPB::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusErrorPB::ConsensusErrorPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusErrorPB)
}
ConsensusErrorPB::ConsensusErrorPB(const ConsensusErrorPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::kudu::AppStatusPB(*from.status_);
  } else {
    status_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusErrorPB)
}

void ConsensusErrorPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&status_) + sizeof(code_));
}

ConsensusErrorPB::~ConsensusErrorPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusErrorPB)
  SharedDtor();
}

void ConsensusErrorPB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void ConsensusErrorPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusErrorPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[0].descriptor;
}

const ConsensusErrorPB& ConsensusErrorPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusErrorPB* ConsensusErrorPB::New(::google::protobuf::Arena* arena) const {
  ConsensusErrorPB* n = new ConsensusErrorPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusErrorPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusErrorPB)
  if (has_status()) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->::kudu::AppStatusPB::Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusErrorPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusErrorPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::ConsensusErrorPB_Code_IsValid(value)) {
            set_code(static_cast< ::kudu::consensus::ConsensusErrorPB_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.AppStatusPB status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusErrorPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusErrorPB)
  return false;
#undef DO_
}

void ConsensusErrorPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusErrorPB)
  // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // required .kudu.AppStatusPB status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusErrorPB)
}

::google::protobuf::uint8* ConsensusErrorPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusErrorPB)
  // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // required .kudu.AppStatusPB status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusErrorPB)
  return target;
}

size_t ConsensusErrorPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ConsensusErrorPB)
  size_t total_size = 0;

  if (has_status()) {
    // required .kudu.AppStatusPB status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (has_code()) {
    // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  return total_size;
}
size_t ConsensusErrorPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusErrorPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .kudu.AppStatusPB status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);

    // required .kudu.consensus.ConsensusErrorPB.Code code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusErrorPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusErrorPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusErrorPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusErrorPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusErrorPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusErrorPB)
    MergeFrom(*source);
  }
}

void ConsensusErrorPB::MergeFrom(const ConsensusErrorPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusErrorPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_status()) {
      mutable_status()->::kudu::AppStatusPB::MergeFrom(from.status());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void ConsensusErrorPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusErrorPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusErrorPB::CopyFrom(const ConsensusErrorPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusErrorPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusErrorPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusErrorPB::Swap(ConsensusErrorPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusErrorPB::InternalSwap(ConsensusErrorPB* other) {
  std::swap(status_, other->status_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusErrorPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusErrorPB

// required .kudu.consensus.ConsensusErrorPB.Code code = 1;
bool ConsensusErrorPB::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusErrorPB::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusErrorPB::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusErrorPB::clear_code() {
  code_ = 0;
  clear_has_code();
}
::kudu::consensus::ConsensusErrorPB_Code ConsensusErrorPB::code() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusErrorPB.code)
  return static_cast< ::kudu::consensus::ConsensusErrorPB_Code >(code_);
}
void ConsensusErrorPB::set_code(::kudu::consensus::ConsensusErrorPB_Code value) {
  assert(::kudu::consensus::ConsensusErrorPB_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusErrorPB.code)
}

// required .kudu.AppStatusPB status = 2;
bool ConsensusErrorPB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusErrorPB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusErrorPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusErrorPB::clear_status() {
  if (status_ != NULL) status_->::kudu::AppStatusPB::Clear();
  clear_has_status();
}
const ::kudu::AppStatusPB& ConsensusErrorPB::status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusErrorPB.status)
  return status_ != NULL ? *status_
                         : *::kudu::AppStatusPB::internal_default_instance();
}
::kudu::AppStatusPB* ConsensusErrorPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::kudu::AppStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusErrorPB.status)
  return status_;
}
::kudu::AppStatusPB* ConsensusErrorPB::release_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusErrorPB.status)
  clear_has_status();
  ::kudu::AppStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
void ConsensusErrorPB::set_allocated_status(::kudu::AppStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusErrorPB.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeConfigRecordPB::kTabletIdFieldNumber;
const int ChangeConfigRecordPB::kOldConfigFieldNumber;
const int ChangeConfigRecordPB::kNewConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeConfigRecordPB::ChangeConfigRecordPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ChangeConfigRecordPB)
}
ChangeConfigRecordPB::ChangeConfigRecordPB(const ChangeConfigRecordPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  if (from.has_old_config()) {
    old_config_ = new ::kudu::consensus::RaftConfigPB(*from.old_config_);
  } else {
    old_config_ = NULL;
  }
  if (from.has_new_config()) {
    new_config_ = new ::kudu::consensus::RaftConfigPB(*from.new_config_);
  } else {
    new_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ChangeConfigRecordPB)
}

void ChangeConfigRecordPB::SharedCtor() {
  _cached_size_ = 0;
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&old_config_, 0, reinterpret_cast<char*>(&new_config_) -
    reinterpret_cast<char*>(&old_config_) + sizeof(new_config_));
}

ChangeConfigRecordPB::~ChangeConfigRecordPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ChangeConfigRecordPB)
  SharedDtor();
}

void ChangeConfigRecordPB::SharedDtor() {
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete old_config_;
  }
  if (this != internal_default_instance()) {
    delete new_config_;
  }
}

void ChangeConfigRecordPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigRecordPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[1].descriptor;
}

const ChangeConfigRecordPB& ChangeConfigRecordPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeConfigRecordPB* ChangeConfigRecordPB::New(::google::protobuf::Arena* arena) const {
  ChangeConfigRecordPB* n = new ChangeConfigRecordPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeConfigRecordPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ChangeConfigRecordPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_old_config()) {
      GOOGLE_DCHECK(old_config_ != NULL);
      old_config_->::kudu::consensus::RaftConfigPB::Clear();
    }
    if (has_new_config()) {
      GOOGLE_DCHECK(new_config_ != NULL);
      new_config_->::kudu::consensus::RaftConfigPB::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeConfigRecordPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ChangeConfigRecordPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.RaftConfigPB old_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.RaftConfigPB new_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ChangeConfigRecordPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ChangeConfigRecordPB)
  return false;
#undef DO_
}

void ChangeConfigRecordPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ChangeConfigRecordPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required .kudu.consensus.RaftConfigPB old_config = 2;
  if (has_old_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->old_config_, output);
  }

  // required .kudu.consensus.RaftConfigPB new_config = 3;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->new_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ChangeConfigRecordPB)
}

::google::protobuf::uint8* ChangeConfigRecordPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ChangeConfigRecordPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // required .kudu.consensus.RaftConfigPB old_config = 2;
  if (has_old_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->old_config_, false, target);
  }

  // required .kudu.consensus.RaftConfigPB new_config = 3;
  if (has_new_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->new_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ChangeConfigRecordPB)
  return target;
}

size_t ChangeConfigRecordPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ChangeConfigRecordPB)
  size_t total_size = 0;

  if (has_tablet_id()) {
    // required bytes tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }

  if (has_old_config()) {
    // required .kudu.consensus.RaftConfigPB old_config = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_config_);
  }

  if (has_new_config()) {
    // required .kudu.consensus.RaftConfigPB new_config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_config_);
  }

  return total_size;
}
size_t ChangeConfigRecordPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ChangeConfigRecordPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());

    // required .kudu.consensus.RaftConfigPB old_config = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_config_);

    // required .kudu.consensus.RaftConfigPB new_config = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_config_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigRecordPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ChangeConfigRecordPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeConfigRecordPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeConfigRecordPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ChangeConfigRecordPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ChangeConfigRecordPB)
    MergeFrom(*source);
  }
}

void ChangeConfigRecordPB::MergeFrom(const ChangeConfigRecordPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ChangeConfigRecordPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_old_config()) {
      mutable_old_config()->::kudu::consensus::RaftConfigPB::MergeFrom(from.old_config());
    }
    if (from.has_new_config()) {
      mutable_new_config()->::kudu::consensus::RaftConfigPB::MergeFrom(from.new_config());
    }
  }
}

void ChangeConfigRecordPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ChangeConfigRecordPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigRecordPB::CopyFrom(const ChangeConfigRecordPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ChangeConfigRecordPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigRecordPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_old_config()) {
    if (!this->old_config_->IsInitialized()) return false;
  }
  if (has_new_config()) {
    if (!this->new_config_->IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigRecordPB::Swap(ChangeConfigRecordPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeConfigRecordPB::InternalSwap(ChangeConfigRecordPB* other) {
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(old_config_, other->old_config_);
  std::swap(new_config_, other->new_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeConfigRecordPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeConfigRecordPB

// required bytes tablet_id = 1;
bool ChangeConfigRecordPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeConfigRecordPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeConfigRecordPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeConfigRecordPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& ChangeConfigRecordPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void ChangeConfigRecordPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
#if LANG_CXX11
void ChangeConfigRecordPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
#endif
void ChangeConfigRecordPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
void ChangeConfigRecordPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}
::std::string* ChangeConfigRecordPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeConfigRecordPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeConfigRecordPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.tablet_id)
}

// required .kudu.consensus.RaftConfigPB old_config = 2;
bool ChangeConfigRecordPB::has_old_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeConfigRecordPB::set_has_old_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeConfigRecordPB::clear_has_old_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeConfigRecordPB::clear_old_config() {
  if (old_config_ != NULL) old_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_old_config();
}
const ::kudu::consensus::RaftConfigPB& ChangeConfigRecordPB::old_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.old_config)
  return old_config_ != NULL ? *old_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_old_config() {
  set_has_old_config();
  if (old_config_ == NULL) {
    old_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.old_config)
  return old_config_;
}
::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::release_old_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.old_config)
  clear_has_old_config();
  ::kudu::consensus::RaftConfigPB* temp = old_config_;
  old_config_ = NULL;
  return temp;
}
void ChangeConfigRecordPB::set_allocated_old_config(::kudu::consensus::RaftConfigPB* old_config) {
  delete old_config_;
  old_config_ = old_config;
  if (old_config) {
    set_has_old_config();
  } else {
    clear_has_old_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.old_config)
}

// required .kudu.consensus.RaftConfigPB new_config = 3;
bool ChangeConfigRecordPB::has_new_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeConfigRecordPB::set_has_new_config() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeConfigRecordPB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeConfigRecordPB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::kudu::consensus::RaftConfigPB::Clear();
  clear_has_new_config();
}
const ::kudu::consensus::RaftConfigPB& ChangeConfigRecordPB::new_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRecordPB.new_config)
  return new_config_ != NULL ? *new_config_
                         : *::kudu::consensus::RaftConfigPB::internal_default_instance();
}
::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) {
    new_config_ = new ::kudu::consensus::RaftConfigPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRecordPB.new_config)
  return new_config_;
}
::kudu::consensus::RaftConfigPB* ChangeConfigRecordPB::release_new_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRecordPB.new_config)
  clear_has_new_config();
  ::kudu::consensus::RaftConfigPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
void ChangeConfigRecordPB::set_allocated_new_config(::kudu::consensus::RaftConfigPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRecordPB.new_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeConfigRequestPB::kDestUuidFieldNumber;
const int ChangeConfigRequestPB::kTabletIdFieldNumber;
const int ChangeConfigRequestPB::kTypeFieldNumber;
const int ChangeConfigRequestPB::kServerFieldNumber;
const int ChangeConfigRequestPB::kCasConfigOpidIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeConfigRequestPB::ChangeConfigRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ChangeConfigRequestPB)
}
ChangeConfigRequestPB::ChangeConfigRequestPB(const ChangeConfigRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  if (from.has_server()) {
    server_ = new ::kudu::consensus::RaftPeerPB(*from.server_);
  } else {
    server_ = NULL;
  }
  ::memcpy(&cas_config_opid_index_, &from.cas_config_opid_index_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cas_config_opid_index_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ChangeConfigRequestPB)
}

void ChangeConfigRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&server_) + sizeof(type_));
}

ChangeConfigRequestPB::~ChangeConfigRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ChangeConfigRequestPB)
  SharedDtor();
}

void ChangeConfigRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete server_;
  }
}

void ChangeConfigRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[2].descriptor;
}

const ChangeConfigRequestPB& ChangeConfigRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeConfigRequestPB* ChangeConfigRequestPB::New(::google::protobuf::Arena* arena) const {
  ChangeConfigRequestPB* n = new ChangeConfigRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeConfigRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ChangeConfigRequestPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_server()) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->::kudu::consensus::RaftPeerPB::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&cas_config_opid_index_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&cas_config_opid_index_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeConfigRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ChangeConfigRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ChangeConfigType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::ChangeConfigType_IsValid(value)) {
            set_type(static_cast< ::kudu::consensus::ChangeConfigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.RaftPeerPB server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cas_config_opid_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cas_config_opid_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cas_config_opid_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ChangeConfigRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ChangeConfigRequestPB)
  return false;
#undef DO_
}

void ChangeConfigRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ChangeConfigRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional .kudu.consensus.ChangeConfigType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .kudu.consensus.RaftPeerPB server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->server_, output);
  }

  // optional bytes dest_uuid = 4;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->dest_uuid(), output);
  }

  // optional int64 cas_config_opid_index = 5;
  if (has_cas_config_opid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cas_config_opid_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ChangeConfigRequestPB)
}

::google::protobuf::uint8* ChangeConfigRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ChangeConfigRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional .kudu.consensus.ChangeConfigType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .kudu.consensus.RaftPeerPB server = 3;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->server_, false, target);
  }

  // optional bytes dest_uuid = 4;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dest_uuid(), target);
  }

  // optional int64 cas_config_opid_index = 5;
  if (has_cas_config_opid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cas_config_opid_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ChangeConfigRequestPB)
  return target;
}

size_t ChangeConfigRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ChangeConfigRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }
  // optional bytes dest_uuid = 4;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .kudu.consensus.RaftPeerPB server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_);
    }

    // optional int64 cas_config_opid_index = 5;
    if (has_cas_config_opid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cas_config_opid_index());
    }

    // optional .kudu.consensus.ChangeConfigType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ChangeConfigRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeConfigRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeConfigRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ChangeConfigRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ChangeConfigRequestPB)
    MergeFrom(*source);
  }
}

void ChangeConfigRequestPB::MergeFrom(const ChangeConfigRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ChangeConfigRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_server()) {
      mutable_server()->::kudu::consensus::RaftPeerPB::MergeFrom(from.server());
    }
    if (from.has_cas_config_opid_index()) {
      set_cas_config_opid_index(from.cas_config_opid_index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ChangeConfigRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ChangeConfigRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigRequestPB::CopyFrom(const ChangeConfigRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ChangeConfigRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigRequestPB::Swap(ChangeConfigRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeConfigRequestPB::InternalSwap(ChangeConfigRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(server_, other->server_);
  std::swap(cas_config_opid_index_, other->cas_config_opid_index_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeConfigRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeConfigRequestPB

// optional bytes dest_uuid = 4;
bool ChangeConfigRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeConfigRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeConfigRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeConfigRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& ChangeConfigRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void ChangeConfigRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
#if LANG_CXX11
void ChangeConfigRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
#endif
void ChangeConfigRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
void ChangeConfigRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}
::std::string* ChangeConfigRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeConfigRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeConfigRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool ChangeConfigRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeConfigRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeConfigRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeConfigRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& ChangeConfigRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void ChangeConfigRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
#if LANG_CXX11
void ChangeConfigRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
#endif
void ChangeConfigRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
void ChangeConfigRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}
::std::string* ChangeConfigRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeConfigRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeConfigRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.tablet_id)
}

// optional .kudu.consensus.ChangeConfigType type = 2;
bool ChangeConfigRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChangeConfigRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void ChangeConfigRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChangeConfigRequestPB::clear_type() {
  type_ = 0;
  clear_has_type();
}
::kudu::consensus::ChangeConfigType ChangeConfigRequestPB::type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.type)
  return static_cast< ::kudu::consensus::ChangeConfigType >(type_);
}
void ChangeConfigRequestPB::set_type(::kudu::consensus::ChangeConfigType value) {
  assert(::kudu::consensus::ChangeConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.type)
}

// optional .kudu.consensus.RaftPeerPB server = 3;
bool ChangeConfigRequestPB::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeConfigRequestPB::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeConfigRequestPB::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeConfigRequestPB::clear_server() {
  if (server_ != NULL) server_->::kudu::consensus::RaftPeerPB::Clear();
  clear_has_server();
}
const ::kudu::consensus::RaftPeerPB& ChangeConfigRequestPB::server() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.server)
  return server_ != NULL ? *server_
                         : *::kudu::consensus::RaftPeerPB::internal_default_instance();
}
::kudu::consensus::RaftPeerPB* ChangeConfigRequestPB::mutable_server() {
  set_has_server();
  if (server_ == NULL) {
    server_ = new ::kudu::consensus::RaftPeerPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigRequestPB.server)
  return server_;
}
::kudu::consensus::RaftPeerPB* ChangeConfigRequestPB::release_server() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigRequestPB.server)
  clear_has_server();
  ::kudu::consensus::RaftPeerPB* temp = server_;
  server_ = NULL;
  return temp;
}
void ChangeConfigRequestPB::set_allocated_server(::kudu::consensus::RaftPeerPB* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigRequestPB.server)
}

// optional int64 cas_config_opid_index = 5;
bool ChangeConfigRequestPB::has_cas_config_opid_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChangeConfigRequestPB::set_has_cas_config_opid_index() {
  _has_bits_[0] |= 0x00000008u;
}
void ChangeConfigRequestPB::clear_has_cas_config_opid_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChangeConfigRequestPB::clear_cas_config_opid_index() {
  cas_config_opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_cas_config_opid_index();
}
::google::protobuf::int64 ChangeConfigRequestPB::cas_config_opid_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigRequestPB.cas_config_opid_index)
  return cas_config_opid_index_;
}
void ChangeConfigRequestPB::set_cas_config_opid_index(::google::protobuf::int64 value) {
  set_has_cas_config_opid_index();
  cas_config_opid_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigRequestPB.cas_config_opid_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeConfigResponsePB::kErrorFieldNumber;
const int ChangeConfigResponsePB::kNewConfigFieldNumber;
const int ChangeConfigResponsePB::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeConfigResponsePB::ChangeConfigResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ChangeConfigResponsePB)
}
ChangeConfigResponsePB::ChangeConfigResponsePB(const ChangeConfigResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_new_config()) {
    new_config_ = new ::kudu::consensus::RaftPeerPB(*from.new_config_);
  } else {
    new_config_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ChangeConfigResponsePB)
}

void ChangeConfigResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&error_) + sizeof(timestamp_));
}

ChangeConfigResponsePB::~ChangeConfigResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ChangeConfigResponsePB)
  SharedDtor();
}

void ChangeConfigResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
  if (this != internal_default_instance()) {
    delete new_config_;
  }
}

void ChangeConfigResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[3].descriptor;
}

const ChangeConfigResponsePB& ChangeConfigResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeConfigResponsePB* ChangeConfigResponsePB::New(::google::protobuf::Arena* arena) const {
  ChangeConfigResponsePB* n = new ChangeConfigResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeConfigResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ChangeConfigResponsePB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::tserver::TabletServerErrorPB::Clear();
    }
    if (has_new_config()) {
      GOOGLE_DCHECK(new_config_ != NULL);
      new_config_->::kudu::consensus::RaftPeerPB::Clear();
    }
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeConfigResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ChangeConfigResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.tserver.TabletServerErrorPB error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.RaftPeerPB new_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ChangeConfigResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ChangeConfigResponsePB)
  return false;
#undef DO_
}

void ChangeConfigResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ChangeConfigResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional .kudu.consensus.RaftPeerPB new_config = 2;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_config_, output);
  }

  // optional fixed64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ChangeConfigResponsePB)
}

::google::protobuf::uint8* ChangeConfigResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ChangeConfigResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional .kudu.consensus.RaftPeerPB new_config = 2;
  if (has_new_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_config_, false, target);
  }

  // optional fixed64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ChangeConfigResponsePB)
  return target;
}

size_t ChangeConfigResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ChangeConfigResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .kudu.tserver.TabletServerErrorPB error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional .kudu.consensus.RaftPeerPB new_config = 2;
    if (has_new_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_config_);
    }

    // optional fixed64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ChangeConfigResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeConfigResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeConfigResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ChangeConfigResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ChangeConfigResponsePB)
    MergeFrom(*source);
  }
}

void ChangeConfigResponsePB::MergeFrom(const ChangeConfigResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ChangeConfigResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_error()) {
      mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
    }
    if (from.has_new_config()) {
      mutable_new_config()->::kudu::consensus::RaftPeerPB::MergeFrom(from.new_config());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void ChangeConfigResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ChangeConfigResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigResponsePB::CopyFrom(const ChangeConfigResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ChangeConfigResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigResponsePB::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_new_config()) {
    if (!this->new_config_->IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigResponsePB::Swap(ChangeConfigResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeConfigResponsePB::InternalSwap(ChangeConfigResponsePB* other) {
  std::swap(error_, other->error_);
  std::swap(new_config_, other->new_config_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeConfigResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeConfigResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
bool ChangeConfigResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeConfigResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeConfigResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeConfigResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& ChangeConfigResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* ChangeConfigResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* ChangeConfigResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void ChangeConfigResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigResponsePB.error)
}

// optional .kudu.consensus.RaftPeerPB new_config = 2;
bool ChangeConfigResponsePB::has_new_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeConfigResponsePB::set_has_new_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeConfigResponsePB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeConfigResponsePB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::kudu::consensus::RaftPeerPB::Clear();
  clear_has_new_config();
}
const ::kudu::consensus::RaftPeerPB& ChangeConfigResponsePB::new_config() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.new_config)
  return new_config_ != NULL ? *new_config_
                         : *::kudu::consensus::RaftPeerPB::internal_default_instance();
}
::kudu::consensus::RaftPeerPB* ChangeConfigResponsePB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) {
    new_config_ = new ::kudu::consensus::RaftPeerPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ChangeConfigResponsePB.new_config)
  return new_config_;
}
::kudu::consensus::RaftPeerPB* ChangeConfigResponsePB::release_new_config() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ChangeConfigResponsePB.new_config)
  clear_has_new_config();
  ::kudu::consensus::RaftPeerPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
void ChangeConfigResponsePB::set_allocated_new_config(::kudu::consensus::RaftPeerPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ChangeConfigResponsePB.new_config)
}

// optional fixed64 timestamp = 3;
bool ChangeConfigResponsePB::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeConfigResponsePB::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeConfigResponsePB::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeConfigResponsePB::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 ChangeConfigResponsePB::timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ChangeConfigResponsePB.timestamp)
  return timestamp_;
}
void ChangeConfigResponsePB::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ChangeConfigResponsePB.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicateMsg::kIdFieldNumber;
const int ReplicateMsg::kTimestampFieldNumber;
const int ReplicateMsg::kOpTypeFieldNumber;
const int ReplicateMsg::kWriteRequestFieldNumber;
const int ReplicateMsg::kAlterSchemaRequestFieldNumber;
const int ReplicateMsg::kChangeConfigRecordFieldNumber;
const int ReplicateMsg::kRequestIdFieldNumber;
const int ReplicateMsg::kNoopRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicateMsg::ReplicateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ReplicateMsg)
}
ReplicateMsg::ReplicateMsg(const ReplicateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::kudu::consensus::OpId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_write_request()) {
    write_request_ = new ::kudu::tserver::WriteRequestPB(*from.write_request_);
  } else {
    write_request_ = NULL;
  }
  if (from.has_alter_schema_request()) {
    alter_schema_request_ = new ::kudu::tserver::AlterSchemaRequestPB(*from.alter_schema_request_);
  } else {
    alter_schema_request_ = NULL;
  }
  if (from.has_change_config_record()) {
    change_config_record_ = new ::kudu::consensus::ChangeConfigRecordPB(*from.change_config_record_);
  } else {
    change_config_record_ = NULL;
  }
  if (from.has_request_id()) {
    request_id_ = new ::kudu::rpc::RequestIdPB(*from.request_id_);
  } else {
    request_id_ = NULL;
  }
  if (from.has_noop_request()) {
    noop_request_ = new ::kudu::consensus::NoOpRequestPB(*from.noop_request_);
  } else {
    noop_request_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(op_type_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ReplicateMsg)
}

void ReplicateMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&id_) + sizeof(op_type_));
}

ReplicateMsg::~ReplicateMsg() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ReplicateMsg)
  SharedDtor();
}

void ReplicateMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete write_request_;
  }
  if (this != internal_default_instance()) {
    delete alter_schema_request_;
  }
  if (this != internal_default_instance()) {
    delete change_config_record_;
  }
  if (this != internal_default_instance()) {
    delete request_id_;
  }
  if (this != internal_default_instance()) {
    delete noop_request_;
  }
}

void ReplicateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateMsg::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[4].descriptor;
}

const ReplicateMsg& ReplicateMsg::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicateMsg* ReplicateMsg::New(::google::protobuf::Arena* arena) const {
  ReplicateMsg* n = new ReplicateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ReplicateMsg)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::kudu::consensus::OpId::Clear();
    }
    if (has_write_request()) {
      GOOGLE_DCHECK(write_request_ != NULL);
      write_request_->::kudu::tserver::WriteRequestPB::Clear();
    }
    if (has_alter_schema_request()) {
      GOOGLE_DCHECK(alter_schema_request_ != NULL);
      alter_schema_request_->::kudu::tserver::AlterSchemaRequestPB::Clear();
    }
    if (has_change_config_record()) {
      GOOGLE_DCHECK(change_config_record_ != NULL);
      change_config_record_->::kudu::consensus::ChangeConfigRecordPB::Clear();
    }
    if (has_request_id()) {
      GOOGLE_DCHECK(request_id_ != NULL);
      request_id_->::kudu::rpc::RequestIdPB::Clear();
    }
    if (has_noop_request()) {
      GOOGLE_DCHECK(noop_request_ != NULL);
      noop_request_->::kudu::consensus::NoOpRequestPB::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(op_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ReplicateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.OpId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.OperationType op_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::OperationType_IsValid(value)) {
            set_op_type(static_cast< ::kudu::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.WriteRequestPB write_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alter_schema_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_config_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.rpc.RequestIdPB request_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.NoOpRequestPB noop_request = 999;
      case 999: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(7994u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noop_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ReplicateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ReplicateMsg)
  return false;
#undef DO_
}

void ReplicateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ReplicateMsg)
  // required .kudu.consensus.OpId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // required fixed64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->timestamp(), output);
  }

  // required .kudu.consensus.OperationType op_type = 4;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_type(), output);
  }

  // optional .kudu.tserver.WriteRequestPB write_request = 5;
  if (has_write_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->write_request_, output);
  }

  // optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
  if (has_alter_schema_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->alter_schema_request_, output);
  }

  // optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
  if (has_change_config_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->change_config_record_, output);
  }

  // optional .kudu.rpc.RequestIdPB request_id = 8;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->request_id_, output);
  }

  // optional .kudu.consensus.NoOpRequestPB noop_request = 999;
  if (has_noop_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      999, *this->noop_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ReplicateMsg)
}

::google::protobuf::uint8* ReplicateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ReplicateMsg)
  // required .kudu.consensus.OpId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // required fixed64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->timestamp(), target);
  }

  // required .kudu.consensus.OperationType op_type = 4;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_type(), target);
  }

  // optional .kudu.tserver.WriteRequestPB write_request = 5;
  if (has_write_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->write_request_, false, target);
  }

  // optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
  if (has_alter_schema_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->alter_schema_request_, false, target);
  }

  // optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
  if (has_change_config_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->change_config_record_, false, target);
  }

  // optional .kudu.rpc.RequestIdPB request_id = 8;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->request_id_, false, target);
  }

  // optional .kudu.consensus.NoOpRequestPB noop_request = 999;
  if (has_noop_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        999, *this->noop_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ReplicateMsg)
  return target;
}

size_t ReplicateMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ReplicateMsg)
  size_t total_size = 0;

  if (has_id()) {
    // required .kudu.consensus.OpId id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  if (has_timestamp()) {
    // required fixed64 timestamp = 2;
    total_size += 1 + 8;
  }

  if (has_op_type()) {
    // required .kudu.consensus.OperationType op_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
  }

  return total_size;
}
size_t ReplicateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ReplicateMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c1) ^ 0x000000c1) == 0) {  // All required fields are present.
    // required .kudu.consensus.OpId id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);

    // required fixed64 timestamp = 2;
    total_size += 1 + 8;

    // required .kudu.consensus.OperationType op_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional .kudu.tserver.WriteRequestPB write_request = 5;
    if (has_write_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->write_request_);
    }

    // optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
    if (has_alter_schema_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->alter_schema_request_);
    }

    // optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
    if (has_change_config_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_config_record_);
    }

    // optional .kudu.rpc.RequestIdPB request_id = 8;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_id_);
    }

    // optional .kudu.consensus.NoOpRequestPB noop_request = 999;
    if (has_noop_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noop_request_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ReplicateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ReplicateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ReplicateMsg)
    MergeFrom(*source);
  }
}

void ReplicateMsg::MergeFrom(const ReplicateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ReplicateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_id()) {
      mutable_id()->::kudu::consensus::OpId::MergeFrom(from.id());
    }
    if (from.has_write_request()) {
      mutable_write_request()->::kudu::tserver::WriteRequestPB::MergeFrom(from.write_request());
    }
    if (from.has_alter_schema_request()) {
      mutable_alter_schema_request()->::kudu::tserver::AlterSchemaRequestPB::MergeFrom(from.alter_schema_request());
    }
    if (from.has_change_config_record()) {
      mutable_change_config_record()->::kudu::consensus::ChangeConfigRecordPB::MergeFrom(from.change_config_record());
    }
    if (from.has_request_id()) {
      mutable_request_id()->::kudu::rpc::RequestIdPB::MergeFrom(from.request_id());
    }
    if (from.has_noop_request()) {
      mutable_noop_request()->::kudu::consensus::NoOpRequestPB::MergeFrom(from.noop_request());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
  }
}

void ReplicateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ReplicateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateMsg::CopyFrom(const ReplicateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ReplicateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c1) != 0x000000c1) return false;
  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  if (has_write_request()) {
    if (!this->write_request_->IsInitialized()) return false;
  }
  if (has_alter_schema_request()) {
    if (!this->alter_schema_request_->IsInitialized()) return false;
  }
  if (has_change_config_record()) {
    if (!this->change_config_record_->IsInitialized()) return false;
  }
  if (has_request_id()) {
    if (!this->request_id_->IsInitialized()) return false;
  }
  return true;
}

void ReplicateMsg::Swap(ReplicateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicateMsg::InternalSwap(ReplicateMsg* other) {
  std::swap(id_, other->id_);
  std::swap(write_request_, other->write_request_);
  std::swap(alter_schema_request_, other->alter_schema_request_);
  std::swap(change_config_record_, other->change_config_record_);
  std::swap(request_id_, other->request_id_);
  std::swap(noop_request_, other->noop_request_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(op_type_, other->op_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicateMsg::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicateMsg

// required .kudu.consensus.OpId id = 1;
bool ReplicateMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicateMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicateMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicateMsg::clear_id() {
  if (id_ != NULL) id_->::kudu::consensus::OpId::Clear();
  clear_has_id();
}
const ::kudu::consensus::OpId& ReplicateMsg::id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.id)
  return id_ != NULL ? *id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* ReplicateMsg::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.id)
  return id_;
}
::kudu::consensus::OpId* ReplicateMsg::release_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.id)
  clear_has_id();
  ::kudu::consensus::OpId* temp = id_;
  id_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_id(::kudu::consensus::OpId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.id)
}

// required fixed64 timestamp = 2;
bool ReplicateMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReplicateMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void ReplicateMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReplicateMsg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 ReplicateMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.timestamp)
  return timestamp_;
}
void ReplicateMsg::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ReplicateMsg.timestamp)
}

// required .kudu.consensus.OperationType op_type = 4;
bool ReplicateMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReplicateMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000080u;
}
void ReplicateMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReplicateMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
::kudu::consensus::OperationType ReplicateMsg::op_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.op_type)
  return static_cast< ::kudu::consensus::OperationType >(op_type_);
}
void ReplicateMsg::set_op_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ReplicateMsg.op_type)
}

// optional .kudu.tserver.WriteRequestPB write_request = 5;
bool ReplicateMsg::has_write_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicateMsg::set_has_write_request() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicateMsg::clear_has_write_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicateMsg::clear_write_request() {
  if (write_request_ != NULL) write_request_->::kudu::tserver::WriteRequestPB::Clear();
  clear_has_write_request();
}
const ::kudu::tserver::WriteRequestPB& ReplicateMsg::write_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.write_request)
  return write_request_ != NULL ? *write_request_
                         : *::kudu::tserver::WriteRequestPB::internal_default_instance();
}
::kudu::tserver::WriteRequestPB* ReplicateMsg::mutable_write_request() {
  set_has_write_request();
  if (write_request_ == NULL) {
    write_request_ = new ::kudu::tserver::WriteRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.write_request)
  return write_request_;
}
::kudu::tserver::WriteRequestPB* ReplicateMsg::release_write_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.write_request)
  clear_has_write_request();
  ::kudu::tserver::WriteRequestPB* temp = write_request_;
  write_request_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_write_request(::kudu::tserver::WriteRequestPB* write_request) {
  delete write_request_;
  write_request_ = write_request;
  if (write_request) {
    set_has_write_request();
  } else {
    clear_has_write_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.write_request)
}

// optional .kudu.tserver.AlterSchemaRequestPB alter_schema_request = 6;
bool ReplicateMsg::has_alter_schema_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplicateMsg::set_has_alter_schema_request() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplicateMsg::clear_has_alter_schema_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplicateMsg::clear_alter_schema_request() {
  if (alter_schema_request_ != NULL) alter_schema_request_->::kudu::tserver::AlterSchemaRequestPB::Clear();
  clear_has_alter_schema_request();
}
const ::kudu::tserver::AlterSchemaRequestPB& ReplicateMsg::alter_schema_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.alter_schema_request)
  return alter_schema_request_ != NULL ? *alter_schema_request_
                         : *::kudu::tserver::AlterSchemaRequestPB::internal_default_instance();
}
::kudu::tserver::AlterSchemaRequestPB* ReplicateMsg::mutable_alter_schema_request() {
  set_has_alter_schema_request();
  if (alter_schema_request_ == NULL) {
    alter_schema_request_ = new ::kudu::tserver::AlterSchemaRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.alter_schema_request)
  return alter_schema_request_;
}
::kudu::tserver::AlterSchemaRequestPB* ReplicateMsg::release_alter_schema_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.alter_schema_request)
  clear_has_alter_schema_request();
  ::kudu::tserver::AlterSchemaRequestPB* temp = alter_schema_request_;
  alter_schema_request_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_alter_schema_request(::kudu::tserver::AlterSchemaRequestPB* alter_schema_request) {
  delete alter_schema_request_;
  alter_schema_request_ = alter_schema_request;
  if (alter_schema_request) {
    set_has_alter_schema_request();
  } else {
    clear_has_alter_schema_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.alter_schema_request)
}

// optional .kudu.consensus.ChangeConfigRecordPB change_config_record = 7;
bool ReplicateMsg::has_change_config_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReplicateMsg::set_has_change_config_record() {
  _has_bits_[0] |= 0x00000008u;
}
void ReplicateMsg::clear_has_change_config_record() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReplicateMsg::clear_change_config_record() {
  if (change_config_record_ != NULL) change_config_record_->::kudu::consensus::ChangeConfigRecordPB::Clear();
  clear_has_change_config_record();
}
const ::kudu::consensus::ChangeConfigRecordPB& ReplicateMsg::change_config_record() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.change_config_record)
  return change_config_record_ != NULL ? *change_config_record_
                         : *::kudu::consensus::ChangeConfigRecordPB::internal_default_instance();
}
::kudu::consensus::ChangeConfigRecordPB* ReplicateMsg::mutable_change_config_record() {
  set_has_change_config_record();
  if (change_config_record_ == NULL) {
    change_config_record_ = new ::kudu::consensus::ChangeConfigRecordPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.change_config_record)
  return change_config_record_;
}
::kudu::consensus::ChangeConfigRecordPB* ReplicateMsg::release_change_config_record() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.change_config_record)
  clear_has_change_config_record();
  ::kudu::consensus::ChangeConfigRecordPB* temp = change_config_record_;
  change_config_record_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_change_config_record(::kudu::consensus::ChangeConfigRecordPB* change_config_record) {
  delete change_config_record_;
  change_config_record_ = change_config_record;
  if (change_config_record) {
    set_has_change_config_record();
  } else {
    clear_has_change_config_record();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.change_config_record)
}

// optional .kudu.rpc.RequestIdPB request_id = 8;
bool ReplicateMsg::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReplicateMsg::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ReplicateMsg::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReplicateMsg::clear_request_id() {
  if (request_id_ != NULL) request_id_->::kudu::rpc::RequestIdPB::Clear();
  clear_has_request_id();
}
const ::kudu::rpc::RequestIdPB& ReplicateMsg::request_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.request_id)
  return request_id_ != NULL ? *request_id_
                         : *::kudu::rpc::RequestIdPB::internal_default_instance();
}
::kudu::rpc::RequestIdPB* ReplicateMsg::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == NULL) {
    request_id_ = new ::kudu::rpc::RequestIdPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.request_id)
  return request_id_;
}
::kudu::rpc::RequestIdPB* ReplicateMsg::release_request_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.request_id)
  clear_has_request_id();
  ::kudu::rpc::RequestIdPB* temp = request_id_;
  request_id_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_request_id(::kudu::rpc::RequestIdPB* request_id) {
  delete request_id_;
  request_id_ = request_id;
  if (request_id) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.request_id)
}

// optional .kudu.consensus.NoOpRequestPB noop_request = 999;
bool ReplicateMsg::has_noop_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReplicateMsg::set_has_noop_request() {
  _has_bits_[0] |= 0x00000020u;
}
void ReplicateMsg::clear_has_noop_request() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReplicateMsg::clear_noop_request() {
  if (noop_request_ != NULL) noop_request_->::kudu::consensus::NoOpRequestPB::Clear();
  clear_has_noop_request();
}
const ::kudu::consensus::NoOpRequestPB& ReplicateMsg::noop_request() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ReplicateMsg.noop_request)
  return noop_request_ != NULL ? *noop_request_
                         : *::kudu::consensus::NoOpRequestPB::internal_default_instance();
}
::kudu::consensus::NoOpRequestPB* ReplicateMsg::mutable_noop_request() {
  set_has_noop_request();
  if (noop_request_ == NULL) {
    noop_request_ = new ::kudu::consensus::NoOpRequestPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ReplicateMsg.noop_request)
  return noop_request_;
}
::kudu::consensus::NoOpRequestPB* ReplicateMsg::release_noop_request() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ReplicateMsg.noop_request)
  clear_has_noop_request();
  ::kudu::consensus::NoOpRequestPB* temp = noop_request_;
  noop_request_ = NULL;
  return temp;
}
void ReplicateMsg::set_allocated_noop_request(::kudu::consensus::NoOpRequestPB* noop_request) {
  delete noop_request_;
  noop_request_ = noop_request;
  if (noop_request) {
    set_has_noop_request();
  } else {
    clear_has_noop_request();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ReplicateMsg.noop_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitMsg::kOpTypeFieldNumber;
const int CommitMsg::kCommitedOpIdFieldNumber;
const int CommitMsg::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMsg::CommitMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.CommitMsg)
}
CommitMsg::CommitMsg(const CommitMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commited_op_id()) {
    commited_op_id_ = new ::kudu::consensus::OpId(*from.commited_op_id_);
  } else {
    commited_op_id_ = NULL;
  }
  if (from.has_result()) {
    result_ = new ::kudu::tablet::TxResultPB(*from.result_);
  } else {
    result_ = NULL;
  }
  op_type_ = from.op_type_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.CommitMsg)
}

void CommitMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&commited_op_id_, 0, reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&commited_op_id_) + sizeof(op_type_));
}

CommitMsg::~CommitMsg() {
  // @@protoc_insertion_point(destructor:kudu.consensus.CommitMsg)
  SharedDtor();
}

void CommitMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete commited_op_id_;
  }
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void CommitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitMsg::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[5].descriptor;
}

const CommitMsg& CommitMsg::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitMsg* CommitMsg::New(::google::protobuf::Arena* arena) const {
  CommitMsg* n = new CommitMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.CommitMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_commited_op_id()) {
      GOOGLE_DCHECK(commited_op_id_ != NULL);
      commited_op_id_->::kudu::consensus::OpId::Clear();
    }
    if (has_result()) {
      GOOGLE_DCHECK(result_ != NULL);
      result_->::kudu::tablet::TxResultPB::Clear();
    }
  }
  op_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.CommitMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.OperationType op_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::OperationType_IsValid(value)) {
            set_op_type(static_cast< ::kudu::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.OpId commited_op_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commited_op_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tablet.TxResultPB result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.CommitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.CommitMsg)
  return false;
#undef DO_
}

void CommitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.CommitMsg)
  // required .kudu.consensus.OperationType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional .kudu.consensus.OpId commited_op_id = 2;
  if (has_commited_op_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->commited_op_id_, output);
  }

  // optional .kudu.tablet.TxResultPB result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.CommitMsg)
}

::google::protobuf::uint8* CommitMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.CommitMsg)
  // required .kudu.consensus.OperationType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional .kudu.consensus.OpId commited_op_id = 2;
  if (has_commited_op_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->commited_op_id_, false, target);
  }

  // optional .kudu.tablet.TxResultPB result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->result_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.CommitMsg)
  return target;
}

size_t CommitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.CommitMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .kudu.consensus.OperationType op_type = 1;
  if (has_op_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .kudu.consensus.OpId commited_op_id = 2;
    if (has_commited_op_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commited_op_id_);
    }

    // optional .kudu.tablet.TxResultPB result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.CommitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.CommitMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.CommitMsg)
    MergeFrom(*source);
  }
}

void CommitMsg::MergeFrom(const CommitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.CommitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_commited_op_id()) {
      mutable_commited_op_id()->::kudu::consensus::OpId::MergeFrom(from.commited_op_id());
    }
    if (from.has_result()) {
      mutable_result()->::kudu::tablet::TxResultPB::MergeFrom(from.result());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
  }
}

void CommitMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.CommitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMsg::CopyFrom(const CommitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.CommitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_commited_op_id()) {
    if (!this->commited_op_id_->IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void CommitMsg::Swap(CommitMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMsg::InternalSwap(CommitMsg* other) {
  std::swap(commited_op_id_, other->commited_op_id_);
  std::swap(result_, other->result_);
  std::swap(op_type_, other->op_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitMsg::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitMsg

// required .kudu.consensus.OperationType op_type = 1;
bool CommitMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommitMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CommitMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommitMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
::kudu::consensus::OperationType CommitMsg::op_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.op_type)
  return static_cast< ::kudu::consensus::OperationType >(op_type_);
}
void CommitMsg::set_op_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.CommitMsg.op_type)
}

// optional .kudu.consensus.OpId commited_op_id = 2;
bool CommitMsg::has_commited_op_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitMsg::set_has_commited_op_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitMsg::clear_has_commited_op_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitMsg::clear_commited_op_id() {
  if (commited_op_id_ != NULL) commited_op_id_->::kudu::consensus::OpId::Clear();
  clear_has_commited_op_id();
}
const ::kudu::consensus::OpId& CommitMsg::commited_op_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.commited_op_id)
  return commited_op_id_ != NULL ? *commited_op_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* CommitMsg::mutable_commited_op_id() {
  set_has_commited_op_id();
  if (commited_op_id_ == NULL) {
    commited_op_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.CommitMsg.commited_op_id)
  return commited_op_id_;
}
::kudu::consensus::OpId* CommitMsg::release_commited_op_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.CommitMsg.commited_op_id)
  clear_has_commited_op_id();
  ::kudu::consensus::OpId* temp = commited_op_id_;
  commited_op_id_ = NULL;
  return temp;
}
void CommitMsg::set_allocated_commited_op_id(::kudu::consensus::OpId* commited_op_id) {
  delete commited_op_id_;
  commited_op_id_ = commited_op_id;
  if (commited_op_id) {
    set_has_commited_op_id();
  } else {
    clear_has_commited_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.CommitMsg.commited_op_id)
}

// optional .kudu.tablet.TxResultPB result = 3;
bool CommitMsg::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitMsg::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitMsg::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitMsg::clear_result() {
  if (result_ != NULL) result_->::kudu::tablet::TxResultPB::Clear();
  clear_has_result();
}
const ::kudu::tablet::TxResultPB& CommitMsg::result() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.CommitMsg.result)
  return result_ != NULL ? *result_
                         : *::kudu::tablet::TxResultPB::internal_default_instance();
}
::kudu::tablet::TxResultPB* CommitMsg::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::kudu::tablet::TxResultPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.CommitMsg.result)
  return result_;
}
::kudu::tablet::TxResultPB* CommitMsg::release_result() {
  // @@protoc_insertion_point(field_release:kudu.consensus.CommitMsg.result)
  clear_has_result();
  ::kudu::tablet::TxResultPB* temp = result_;
  result_ = NULL;
  return temp;
}
void CommitMsg::set_allocated_result(::kudu::tablet::TxResultPB* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.CommitMsg.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoOpRequestPB::kPayloadForTestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoOpRequestPB::NoOpRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.NoOpRequestPB)
}
NoOpRequestPB::NoOpRequestPB(const NoOpRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_for_tests_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_for_tests()) {
    payload_for_tests_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_for_tests_);
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.NoOpRequestPB)
}

void NoOpRequestPB::SharedCtor() {
  _cached_size_ = 0;
  payload_for_tests_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NoOpRequestPB::~NoOpRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.NoOpRequestPB)
  SharedDtor();
}

void NoOpRequestPB::SharedDtor() {
  payload_for_tests_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoOpRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoOpRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[6].descriptor;
}

const NoOpRequestPB& NoOpRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoOpRequestPB* NoOpRequestPB::New(::google::protobuf::Arena* arena) const {
  NoOpRequestPB* n = new NoOpRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoOpRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.NoOpRequestPB)
  if (has_payload_for_tests()) {
    GOOGLE_DCHECK(!payload_for_tests_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_for_tests_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NoOpRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.NoOpRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload_for_tests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_for_tests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.NoOpRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.NoOpRequestPB)
  return false;
#undef DO_
}

void NoOpRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.NoOpRequestPB)
  // optional bytes payload_for_tests = 1;
  if (has_payload_for_tests()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload_for_tests(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.NoOpRequestPB)
}

::google::protobuf::uint8* NoOpRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.NoOpRequestPB)
  // optional bytes payload_for_tests = 1;
  if (has_payload_for_tests()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload_for_tests(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.NoOpRequestPB)
  return target;
}

size_t NoOpRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.NoOpRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes payload_for_tests = 1;
  if (has_payload_for_tests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload_for_tests());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoOpRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.NoOpRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const NoOpRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoOpRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.NoOpRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.NoOpRequestPB)
    MergeFrom(*source);
  }
}

void NoOpRequestPB::MergeFrom(const NoOpRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.NoOpRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload_for_tests()) {
    set_has_payload_for_tests();
    payload_for_tests_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_for_tests_);
  }
}

void NoOpRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.NoOpRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoOpRequestPB::CopyFrom(const NoOpRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.NoOpRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoOpRequestPB::IsInitialized() const {
  return true;
}

void NoOpRequestPB::Swap(NoOpRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoOpRequestPB::InternalSwap(NoOpRequestPB* other) {
  payload_for_tests_.Swap(&other->payload_for_tests_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoOpRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoOpRequestPB

// optional bytes payload_for_tests = 1;
bool NoOpRequestPB::has_payload_for_tests() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoOpRequestPB::set_has_payload_for_tests() {
  _has_bits_[0] |= 0x00000001u;
}
void NoOpRequestPB::clear_has_payload_for_tests() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoOpRequestPB::clear_payload_for_tests() {
  payload_for_tests_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_for_tests();
}
const ::std::string& NoOpRequestPB::payload_for_tests() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.NoOpRequestPB.payload_for_tests)
  return payload_for_tests_.GetNoArena();
}
void NoOpRequestPB::set_payload_for_tests(const ::std::string& value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
#if LANG_CXX11
void NoOpRequestPB::set_payload_for_tests(::std::string&& value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
#endif
void NoOpRequestPB::set_payload_for_tests(const char* value) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
void NoOpRequestPB::set_payload_for_tests(const void* value, size_t size) {
  set_has_payload_for_tests();
  payload_for_tests_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.NoOpRequestPB.payload_for_tests)
}
::std::string* NoOpRequestPB::mutable_payload_for_tests() {
  set_has_payload_for_tests();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.NoOpRequestPB.payload_for_tests)
  return payload_for_tests_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoOpRequestPB::release_payload_for_tests() {
  // @@protoc_insertion_point(field_release:kudu.consensus.NoOpRequestPB.payload_for_tests)
  clear_has_payload_for_tests();
  return payload_for_tests_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoOpRequestPB::set_allocated_payload_for_tests(::std::string* payload_for_tests) {
  if (payload_for_tests != NULL) {
    set_has_payload_for_tests();
  } else {
    clear_has_payload_for_tests();
  }
  payload_for_tests_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_for_tests);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.NoOpRequestPB.payload_for_tests)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusStatusPB::kLastReceivedFieldNumber;
const int ConsensusStatusPB::kLastReceivedCurrentLeaderFieldNumber;
const int ConsensusStatusPB::kLastCommittedIdxFieldNumber;
const int ConsensusStatusPB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusStatusPB::ConsensusStatusPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusStatusPB)
}
ConsensusStatusPB::ConsensusStatusPB(const ConsensusStatusPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_received()) {
    last_received_ = new ::kudu::consensus::OpId(*from.last_received_);
  } else {
    last_received_ = NULL;
  }
  if (from.has_last_received_current_leader()) {
    last_received_current_leader_ = new ::kudu::consensus::OpId(*from.last_received_current_leader_);
  } else {
    last_received_current_leader_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::kudu::consensus::ConsensusErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  last_committed_idx_ = from.last_committed_idx_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusStatusPB)
}

void ConsensusStatusPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_received_, 0, reinterpret_cast<char*>(&last_committed_idx_) -
    reinterpret_cast<char*>(&last_received_) + sizeof(last_committed_idx_));
}

ConsensusStatusPB::~ConsensusStatusPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusStatusPB)
  SharedDtor();
}

void ConsensusStatusPB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete last_received_;
  }
  if (this != internal_default_instance()) {
    delete last_received_current_leader_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void ConsensusStatusPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusStatusPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[7].descriptor;
}

const ConsensusStatusPB& ConsensusStatusPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusStatusPB* ConsensusStatusPB::New(::google::protobuf::Arena* arena) const {
  ConsensusStatusPB* n = new ConsensusStatusPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusStatusPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_last_received()) {
      GOOGLE_DCHECK(last_received_ != NULL);
      last_received_->::kudu::consensus::OpId::Clear();
    }
    if (has_last_received_current_leader()) {
      GOOGLE_DCHECK(last_received_current_leader_ != NULL);
      last_received_current_leader_->::kudu::consensus::OpId::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::consensus::ConsensusErrorPB::Clear();
    }
  }
  last_committed_idx_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusStatusPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusStatusPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.OpId last_received = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_committed_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_committed_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_committed_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ConsensusErrorPB error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.OpId last_received_current_leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_received_current_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusStatusPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusStatusPB)
  return false;
#undef DO_
}

void ConsensusStatusPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusStatusPB)
  // required .kudu.consensus.OpId last_received = 1;
  if (has_last_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->last_received_, output);
  }

  // optional int64 last_committed_idx = 2;
  if (has_last_committed_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_committed_idx(), output);
  }

  // optional .kudu.consensus.ConsensusErrorPB error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  // optional .kudu.consensus.OpId last_received_current_leader = 4;
  if (has_last_received_current_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->last_received_current_leader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusStatusPB)
}

::google::protobuf::uint8* ConsensusStatusPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusStatusPB)
  // required .kudu.consensus.OpId last_received = 1;
  if (has_last_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->last_received_, false, target);
  }

  // optional int64 last_committed_idx = 2;
  if (has_last_committed_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_committed_idx(), target);
  }

  // optional .kudu.consensus.ConsensusErrorPB error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, false, target);
  }

  // optional .kudu.consensus.OpId last_received_current_leader = 4;
  if (has_last_received_current_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->last_received_current_leader_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusStatusPB)
  return target;
}

size_t ConsensusStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusStatusPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .kudu.consensus.OpId last_received = 1;
  if (has_last_received()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_received_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .kudu.consensus.OpId last_received_current_leader = 4;
    if (has_last_received_current_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_received_current_leader_);
    }

    // optional .kudu.consensus.ConsensusErrorPB error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional int64 last_committed_idx = 2;
    if (has_last_committed_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_committed_idx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusStatusPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusStatusPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusStatusPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusStatusPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusStatusPB)
    MergeFrom(*source);
  }
}

void ConsensusStatusPB::MergeFrom(const ConsensusStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_last_received()) {
      mutable_last_received()->::kudu::consensus::OpId::MergeFrom(from.last_received());
    }
    if (from.has_last_received_current_leader()) {
      mutable_last_received_current_leader()->::kudu::consensus::OpId::MergeFrom(from.last_received_current_leader());
    }
    if (from.has_error()) {
      mutable_error()->::kudu::consensus::ConsensusErrorPB::MergeFrom(from.error());
    }
    if (from.has_last_committed_idx()) {
      set_last_committed_idx(from.last_committed_idx());
    }
  }
}

void ConsensusStatusPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStatusPB::CopyFrom(const ConsensusStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStatusPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_last_received()) {
    if (!this->last_received_->IsInitialized()) return false;
  }
  if (has_last_received_current_leader()) {
    if (!this->last_received_current_leader_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusStatusPB::Swap(ConsensusStatusPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusStatusPB::InternalSwap(ConsensusStatusPB* other) {
  std::swap(last_received_, other->last_received_);
  std::swap(last_received_current_leader_, other->last_received_current_leader_);
  std::swap(error_, other->error_);
  std::swap(last_committed_idx_, other->last_committed_idx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusStatusPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusStatusPB

// required .kudu.consensus.OpId last_received = 1;
bool ConsensusStatusPB::has_last_received() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusStatusPB::set_has_last_received() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusStatusPB::clear_has_last_received() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusStatusPB::clear_last_received() {
  if (last_received_ != NULL) last_received_->::kudu::consensus::OpId::Clear();
  clear_has_last_received();
}
const ::kudu::consensus::OpId& ConsensusStatusPB::last_received() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_received)
  return last_received_ != NULL ? *last_received_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* ConsensusStatusPB::mutable_last_received() {
  set_has_last_received();
  if (last_received_ == NULL) {
    last_received_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.last_received)
  return last_received_;
}
::kudu::consensus::OpId* ConsensusStatusPB::release_last_received() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.last_received)
  clear_has_last_received();
  ::kudu::consensus::OpId* temp = last_received_;
  last_received_ = NULL;
  return temp;
}
void ConsensusStatusPB::set_allocated_last_received(::kudu::consensus::OpId* last_received) {
  delete last_received_;
  last_received_ = last_received;
  if (last_received) {
    set_has_last_received();
  } else {
    clear_has_last_received();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.last_received)
}

// optional .kudu.consensus.OpId last_received_current_leader = 4;
bool ConsensusStatusPB::has_last_received_current_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusStatusPB::set_has_last_received_current_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusStatusPB::clear_has_last_received_current_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusStatusPB::clear_last_received_current_leader() {
  if (last_received_current_leader_ != NULL) last_received_current_leader_->::kudu::consensus::OpId::Clear();
  clear_has_last_received_current_leader();
}
const ::kudu::consensus::OpId& ConsensusStatusPB::last_received_current_leader() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_ != NULL ? *last_received_current_leader_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* ConsensusStatusPB::mutable_last_received_current_leader() {
  set_has_last_received_current_leader();
  if (last_received_current_leader_ == NULL) {
    last_received_current_leader_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_;
}
::kudu::consensus::OpId* ConsensusStatusPB::release_last_received_current_leader() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
  clear_has_last_received_current_leader();
  ::kudu::consensus::OpId* temp = last_received_current_leader_;
  last_received_current_leader_ = NULL;
  return temp;
}
void ConsensusStatusPB::set_allocated_last_received_current_leader(::kudu::consensus::OpId* last_received_current_leader) {
  delete last_received_current_leader_;
  last_received_current_leader_ = last_received_current_leader;
  if (last_received_current_leader) {
    set_has_last_received_current_leader();
  } else {
    clear_has_last_received_current_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.last_received_current_leader)
}

// optional int64 last_committed_idx = 2;
bool ConsensusStatusPB::has_last_committed_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConsensusStatusPB::set_has_last_committed_idx() {
  _has_bits_[0] |= 0x00000008u;
}
void ConsensusStatusPB::clear_has_last_committed_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConsensusStatusPB::clear_last_committed_idx() {
  last_committed_idx_ = GOOGLE_LONGLONG(0);
  clear_has_last_committed_idx();
}
::google::protobuf::int64 ConsensusStatusPB::last_committed_idx() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.last_committed_idx)
  return last_committed_idx_;
}
void ConsensusStatusPB::set_last_committed_idx(::google::protobuf::int64 value) {
  set_has_last_committed_idx();
  last_committed_idx_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusStatusPB.last_committed_idx)
}

// optional .kudu.consensus.ConsensusErrorPB error = 3;
bool ConsensusStatusPB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsensusStatusPB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsensusStatusPB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsensusStatusPB::clear_error() {
  if (error_ != NULL) error_->::kudu::consensus::ConsensusErrorPB::Clear();
  clear_has_error();
}
const ::kudu::consensus::ConsensusErrorPB& ConsensusStatusPB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusStatusPB.error)
  return error_ != NULL ? *error_
                         : *::kudu::consensus::ConsensusErrorPB::internal_default_instance();
}
::kudu::consensus::ConsensusErrorPB* ConsensusStatusPB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::consensus::ConsensusErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusStatusPB.error)
  return error_;
}
::kudu::consensus::ConsensusErrorPB* ConsensusStatusPB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusStatusPB.error)
  clear_has_error();
  ::kudu::consensus::ConsensusErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void ConsensusStatusPB::set_allocated_error(::kudu::consensus::ConsensusErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusStatusPB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteRequestPB::kDestUuidFieldNumber;
const int VoteRequestPB::kTabletIdFieldNumber;
const int VoteRequestPB::kCandidateUuidFieldNumber;
const int VoteRequestPB::kCandidateTermFieldNumber;
const int VoteRequestPB::kCandidateStatusFieldNumber;
const int VoteRequestPB::kIgnoreLiveLeaderFieldNumber;
const int VoteRequestPB::kIsPreElectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteRequestPB::VoteRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.VoteRequestPB)
}
VoteRequestPB::VoteRequestPB(const VoteRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  candidate_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_candidate_uuid()) {
    candidate_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_uuid_);
  }
  if (from.has_candidate_status()) {
    candidate_status_ = new ::kudu::consensus::ConsensusStatusPB(*from.candidate_status_);
  } else {
    candidate_status_ = NULL;
  }
  ::memcpy(&candidate_term_, &from.candidate_term_,
    reinterpret_cast<char*>(&is_pre_election_) -
    reinterpret_cast<char*>(&candidate_term_) + sizeof(is_pre_election_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.VoteRequestPB)
}

void VoteRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&candidate_status_, 0, reinterpret_cast<char*>(&is_pre_election_) -
    reinterpret_cast<char*>(&candidate_status_) + sizeof(is_pre_election_));
}

VoteRequestPB::~VoteRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.VoteRequestPB)
  SharedDtor();
}

void VoteRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete candidate_status_;
  }
}

void VoteRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[8].descriptor;
}

const VoteRequestPB& VoteRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoteRequestPB* VoteRequestPB::New(::google::protobuf::Arena* arena) const {
  VoteRequestPB* n = new VoteRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.VoteRequestPB)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_candidate_uuid()) {
      GOOGLE_DCHECK(!candidate_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*candidate_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_candidate_status()) {
      GOOGLE_DCHECK(candidate_status_ != NULL);
      candidate_status_->::kudu::consensus::ConsensusStatusPB::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&candidate_term_, 0, reinterpret_cast<char*>(&is_pre_election_) -
      reinterpret_cast<char*>(&candidate_term_) + sizeof(is_pre_election_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoteRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.VoteRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablet_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablet_id().data(), this->tablet_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.VoteRequestPB.tablet_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes candidate_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 candidate_term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_candidate_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &candidate_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidate_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_live_leader = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ignore_live_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_live_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pre_election = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_pre_election();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pre_election_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.VoteRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.VoteRequestPB)
  return false;
#undef DO_
}

void VoteRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.VoteRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.VoteRequestPB.tablet_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes candidate_uuid = 2;
  if (has_candidate_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->candidate_uuid(), output);
  }

  // required int64 candidate_term = 3;
  if (has_candidate_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->candidate_term(), output);
  }

  // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
  if (has_candidate_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->candidate_status_, output);
  }

  // optional bool ignore_live_leader = 5 [default = false];
  if (has_ignore_live_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ignore_live_leader(), output);
  }

  // optional bytes dest_uuid = 6;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->dest_uuid(), output);
  }

  // optional bool is_pre_election = 7 [default = false];
  if (has_is_pre_election()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_pre_election(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.VoteRequestPB)
}

::google::protobuf::uint8* VoteRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.VoteRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.VoteRequestPB.tablet_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablet_id(), target);
  }

  // required bytes candidate_uuid = 2;
  if (has_candidate_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->candidate_uuid(), target);
  }

  // required int64 candidate_term = 3;
  if (has_candidate_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->candidate_term(), target);
  }

  // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
  if (has_candidate_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->candidate_status_, false, target);
  }

  // optional bool ignore_live_leader = 5 [default = false];
  if (has_ignore_live_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ignore_live_leader(), target);
  }

  // optional bytes dest_uuid = 6;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->dest_uuid(), target);
  }

  // optional bool is_pre_election = 7 [default = false];
  if (has_is_pre_election()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_pre_election(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.VoteRequestPB)
  return target;
}

size_t VoteRequestPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.VoteRequestPB)
  size_t total_size = 0;

  if (has_tablet_id()) {
    // required string tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablet_id());
  }

  if (has_candidate_uuid()) {
    // required bytes candidate_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->candidate_uuid());
  }

  if (has_candidate_status()) {
    // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->candidate_status_);
  }

  if (has_candidate_term()) {
    // required int64 candidate_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->candidate_term());
  }

  return total_size;
}
size_t VoteRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.VoteRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required string tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablet_id());

    // required bytes candidate_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->candidate_uuid());

    // required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->candidate_status_);

    // required int64 candidate_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->candidate_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes dest_uuid = 6;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional bool ignore_live_leader = 5 [default = false];
    if (has_ignore_live_leader()) {
      total_size += 1 + 1;
    }

    // optional bool is_pre_election = 7 [default = false];
    if (has_is_pre_election()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.VoteRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.VoteRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.VoteRequestPB)
    MergeFrom(*source);
  }
}

void VoteRequestPB::MergeFrom(const VoteRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.VoteRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_candidate_uuid()) {
      set_has_candidate_uuid();
      candidate_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_uuid_);
    }
    if (from.has_candidate_status()) {
      mutable_candidate_status()->::kudu::consensus::ConsensusStatusPB::MergeFrom(from.candidate_status());
    }
    if (from.has_candidate_term()) {
      set_candidate_term(from.candidate_term());
    }
    if (from.has_ignore_live_leader()) {
      set_ignore_live_leader(from.ignore_live_leader());
    }
    if (from.has_is_pre_election()) {
      set_is_pre_election(from.is_pre_election());
    }
  }
}

void VoteRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.VoteRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequestPB::CopyFrom(const VoteRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.VoteRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (has_candidate_status()) {
    if (!this->candidate_status_->IsInitialized()) return false;
  }
  return true;
}

void VoteRequestPB::Swap(VoteRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteRequestPB::InternalSwap(VoteRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  candidate_uuid_.Swap(&other->candidate_uuid_);
  std::swap(candidate_status_, other->candidate_status_);
  std::swap(candidate_term_, other->candidate_term_);
  std::swap(ignore_live_leader_, other->ignore_live_leader_);
  std::swap(is_pre_election_, other->is_pre_election_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteRequestPB

// optional bytes dest_uuid = 6;
bool VoteRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoteRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void VoteRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoteRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& VoteRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void VoteRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.dest_uuid)
}
#if LANG_CXX11
void VoteRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.dest_uuid)
}
#endif
void VoteRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.dest_uuid)
}
void VoteRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.dest_uuid)
}
::std::string* VoteRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoteRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoteRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.dest_uuid)
}

// required string tablet_id = 1;
bool VoteRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoteRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VoteRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoteRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& VoteRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void VoteRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.tablet_id)
}
#if LANG_CXX11
void VoteRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.tablet_id)
}
#endif
void VoteRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.tablet_id)
}
void VoteRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.tablet_id)
}
::std::string* VoteRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoteRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoteRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.tablet_id)
}

// required bytes candidate_uuid = 2;
bool VoteRequestPB::has_candidate_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoteRequestPB::set_has_candidate_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoteRequestPB::clear_has_candidate_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoteRequestPB::clear_candidate_uuid() {
  candidate_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_candidate_uuid();
}
const ::std::string& VoteRequestPB::candidate_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_uuid)
  return candidate_uuid_.GetNoArena();
}
void VoteRequestPB::set_candidate_uuid(const ::std::string& value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.candidate_uuid)
}
#if LANG_CXX11
void VoteRequestPB::set_candidate_uuid(::std::string&& value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteRequestPB.candidate_uuid)
}
#endif
void VoteRequestPB::set_candidate_uuid(const char* value) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteRequestPB.candidate_uuid)
}
void VoteRequestPB::set_candidate_uuid(const void* value, size_t size) {
  set_has_candidate_uuid();
  candidate_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteRequestPB.candidate_uuid)
}
::std::string* VoteRequestPB::mutable_candidate_uuid() {
  set_has_candidate_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.candidate_uuid)
  return candidate_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoteRequestPB::release_candidate_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.candidate_uuid)
  clear_has_candidate_uuid();
  return candidate_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoteRequestPB::set_allocated_candidate_uuid(::std::string* candidate_uuid) {
  if (candidate_uuid != NULL) {
    set_has_candidate_uuid();
  } else {
    clear_has_candidate_uuid();
  }
  candidate_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.candidate_uuid)
}

// required int64 candidate_term = 3;
bool VoteRequestPB::has_candidate_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoteRequestPB::set_has_candidate_term() {
  _has_bits_[0] |= 0x00000010u;
}
void VoteRequestPB::clear_has_candidate_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoteRequestPB::clear_candidate_term() {
  candidate_term_ = GOOGLE_LONGLONG(0);
  clear_has_candidate_term();
}
::google::protobuf::int64 VoteRequestPB::candidate_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_term)
  return candidate_term_;
}
void VoteRequestPB::set_candidate_term(::google::protobuf::int64 value) {
  set_has_candidate_term();
  candidate_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.candidate_term)
}

// required .kudu.consensus.ConsensusStatusPB candidate_status = 4;
bool VoteRequestPB::has_candidate_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoteRequestPB::set_has_candidate_status() {
  _has_bits_[0] |= 0x00000008u;
}
void VoteRequestPB::clear_has_candidate_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoteRequestPB::clear_candidate_status() {
  if (candidate_status_ != NULL) candidate_status_->::kudu::consensus::ConsensusStatusPB::Clear();
  clear_has_candidate_status();
}
const ::kudu::consensus::ConsensusStatusPB& VoteRequestPB::candidate_status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.candidate_status)
  return candidate_status_ != NULL ? *candidate_status_
                         : *::kudu::consensus::ConsensusStatusPB::internal_default_instance();
}
::kudu::consensus::ConsensusStatusPB* VoteRequestPB::mutable_candidate_status() {
  set_has_candidate_status();
  if (candidate_status_ == NULL) {
    candidate_status_ = new ::kudu::consensus::ConsensusStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteRequestPB.candidate_status)
  return candidate_status_;
}
::kudu::consensus::ConsensusStatusPB* VoteRequestPB::release_candidate_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteRequestPB.candidate_status)
  clear_has_candidate_status();
  ::kudu::consensus::ConsensusStatusPB* temp = candidate_status_;
  candidate_status_ = NULL;
  return temp;
}
void VoteRequestPB::set_allocated_candidate_status(::kudu::consensus::ConsensusStatusPB* candidate_status) {
  delete candidate_status_;
  candidate_status_ = candidate_status;
  if (candidate_status) {
    set_has_candidate_status();
  } else {
    clear_has_candidate_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteRequestPB.candidate_status)
}

// optional bool ignore_live_leader = 5 [default = false];
bool VoteRequestPB::has_ignore_live_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoteRequestPB::set_has_ignore_live_leader() {
  _has_bits_[0] |= 0x00000020u;
}
void VoteRequestPB::clear_has_ignore_live_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoteRequestPB::clear_ignore_live_leader() {
  ignore_live_leader_ = false;
  clear_has_ignore_live_leader();
}
bool VoteRequestPB::ignore_live_leader() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.ignore_live_leader)
  return ignore_live_leader_;
}
void VoteRequestPB::set_ignore_live_leader(bool value) {
  set_has_ignore_live_leader();
  ignore_live_leader_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.ignore_live_leader)
}

// optional bool is_pre_election = 7 [default = false];
bool VoteRequestPB::has_is_pre_election() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoteRequestPB::set_has_is_pre_election() {
  _has_bits_[0] |= 0x00000040u;
}
void VoteRequestPB::clear_has_is_pre_election() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoteRequestPB::clear_is_pre_election() {
  is_pre_election_ = false;
  clear_has_is_pre_election();
}
bool VoteRequestPB::is_pre_election() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteRequestPB.is_pre_election)
  return is_pre_election_;
}
void VoteRequestPB::set_is_pre_election(bool value) {
  set_has_is_pre_election();
  is_pre_election_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteRequestPB.is_pre_election)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteResponsePB::kResponderUuidFieldNumber;
const int VoteResponsePB::kResponderTermFieldNumber;
const int VoteResponsePB::kVoteGrantedFieldNumber;
const int VoteResponsePB::kConsensusErrorFieldNumber;
const int VoteResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteResponsePB::VoteResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.VoteResponsePB)
}
VoteResponsePB::VoteResponsePB(const VoteResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responder_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_responder_uuid()) {
    responder_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responder_uuid_);
  }
  if (from.has_consensus_error()) {
    consensus_error_ = new ::kudu::consensus::ConsensusErrorPB(*from.consensus_error_);
  } else {
    consensus_error_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&responder_term_, &from.responder_term_,
    reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&responder_term_) + sizeof(vote_granted_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.VoteResponsePB)
}

void VoteResponsePB::SharedCtor() {
  _cached_size_ = 0;
  responder_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&consensus_error_, 0, reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&consensus_error_) + sizeof(vote_granted_));
}

VoteResponsePB::~VoteResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.VoteResponsePB)
  SharedDtor();
}

void VoteResponsePB::SharedDtor() {
  responder_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete consensus_error_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void VoteResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[9].descriptor;
}

const VoteResponsePB& VoteResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoteResponsePB* VoteResponsePB::New(::google::protobuf::Arena* arena) const {
  VoteResponsePB* n = new VoteResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.VoteResponsePB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_responder_uuid()) {
      GOOGLE_DCHECK(!responder_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*responder_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_consensus_error()) {
      GOOGLE_DCHECK(consensus_error_ != NULL);
      consensus_error_->::kudu::consensus::ConsensusErrorPB::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::tserver::TabletServerErrorPB::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&responder_term_, 0, reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&responder_term_) + sizeof(vote_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoteResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.VoteResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes responder_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_responder_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 responder_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_responder_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &responder_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vote_granted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_vote_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
      case 998: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(7986u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.TabletServerErrorPB error = 999;
      case 999: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(7994u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.VoteResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.VoteResponsePB)
  return false;
#undef DO_
}

void VoteResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.VoteResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->responder_uuid(), output);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->responder_term(), output);
  }

  // optional bool vote_granted = 3;
  if (has_vote_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vote_granted(), output);
  }

  // optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
  if (has_consensus_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      998, *this->consensus_error_, output);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      999, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.VoteResponsePB)
}

::google::protobuf::uint8* VoteResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.VoteResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->responder_uuid(), target);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->responder_term(), target);
  }

  // optional bool vote_granted = 3;
  if (has_vote_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vote_granted(), target);
  }

  // optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
  if (has_consensus_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        998, *this->consensus_error_, false, target);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        999, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.VoteResponsePB)
  return target;
}

size_t VoteResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.VoteResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes responder_uuid = 1;
    if (has_responder_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->responder_uuid());
    }

    // optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
    if (has_consensus_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->consensus_error_);
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 999;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional int64 responder_term = 2;
    if (has_responder_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->responder_term());
    }

    // optional bool vote_granted = 3;
    if (has_vote_granted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.VoteResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.VoteResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.VoteResponsePB)
    MergeFrom(*source);
  }
}

void VoteResponsePB::MergeFrom(const VoteResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.VoteResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_responder_uuid()) {
      set_has_responder_uuid();
      responder_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responder_uuid_);
    }
    if (from.has_consensus_error()) {
      mutable_consensus_error()->::kudu::consensus::ConsensusErrorPB::MergeFrom(from.consensus_error());
    }
    if (from.has_error()) {
      mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
    }
    if (from.has_responder_term()) {
      set_responder_term(from.responder_term());
    }
    if (from.has_vote_granted()) {
      set_vote_granted(from.vote_granted());
    }
  }
}

void VoteResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.VoteResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponsePB::CopyFrom(const VoteResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.VoteResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponsePB::IsInitialized() const {
  if (has_consensus_error()) {
    if (!this->consensus_error_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void VoteResponsePB::Swap(VoteResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteResponsePB::InternalSwap(VoteResponsePB* other) {
  responder_uuid_.Swap(&other->responder_uuid_);
  std::swap(consensus_error_, other->consensus_error_);
  std::swap(error_, other->error_);
  std::swap(responder_term_, other->responder_term_);
  std::swap(vote_granted_, other->vote_granted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteResponsePB

// optional bytes responder_uuid = 1;
bool VoteResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoteResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void VoteResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoteResponsePB::clear_responder_uuid() {
  responder_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_responder_uuid();
}
const ::std::string& VoteResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.responder_uuid)
  return responder_uuid_.GetNoArena();
}
void VoteResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.responder_uuid)
}
#if LANG_CXX11
void VoteResponsePB::set_responder_uuid(::std::string&& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.VoteResponsePB.responder_uuid)
}
#endif
void VoteResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.VoteResponsePB.responder_uuid)
}
void VoteResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.VoteResponsePB.responder_uuid)
}
::std::string* VoteResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.responder_uuid)
  return responder_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoteResponsePB::release_responder_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.responder_uuid)
  clear_has_responder_uuid();
  return responder_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoteResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid != NULL) {
    set_has_responder_uuid();
  } else {
    clear_has_responder_uuid();
  }
  responder_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responder_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
bool VoteResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoteResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000008u;
}
void VoteResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoteResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
::google::protobuf::int64 VoteResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.responder_term)
  return responder_term_;
}
void VoteResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.responder_term)
}

// optional bool vote_granted = 3;
bool VoteResponsePB::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoteResponsePB::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000010u;
}
void VoteResponsePB::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoteResponsePB::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
bool VoteResponsePB::vote_granted() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.vote_granted)
  return vote_granted_;
}
void VoteResponsePB::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.VoteResponsePB.vote_granted)
}

// optional .kudu.consensus.ConsensusErrorPB consensus_error = 998;
bool VoteResponsePB::has_consensus_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoteResponsePB::set_has_consensus_error() {
  _has_bits_[0] |= 0x00000002u;
}
void VoteResponsePB::clear_has_consensus_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoteResponsePB::clear_consensus_error() {
  if (consensus_error_ != NULL) consensus_error_->::kudu::consensus::ConsensusErrorPB::Clear();
  clear_has_consensus_error();
}
const ::kudu::consensus::ConsensusErrorPB& VoteResponsePB::consensus_error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.consensus_error)
  return consensus_error_ != NULL ? *consensus_error_
                         : *::kudu::consensus::ConsensusErrorPB::internal_default_instance();
}
::kudu::consensus::ConsensusErrorPB* VoteResponsePB::mutable_consensus_error() {
  set_has_consensus_error();
  if (consensus_error_ == NULL) {
    consensus_error_ = new ::kudu::consensus::ConsensusErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.consensus_error)
  return consensus_error_;
}
::kudu::consensus::ConsensusErrorPB* VoteResponsePB::release_consensus_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.consensus_error)
  clear_has_consensus_error();
  ::kudu::consensus::ConsensusErrorPB* temp = consensus_error_;
  consensus_error_ = NULL;
  return temp;
}
void VoteResponsePB::set_allocated_consensus_error(::kudu::consensus::ConsensusErrorPB* consensus_error) {
  delete consensus_error_;
  consensus_error_ = consensus_error;
  if (consensus_error) {
    set_has_consensus_error();
  } else {
    clear_has_consensus_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.consensus_error)
}

// optional .kudu.tserver.TabletServerErrorPB error = 999;
bool VoteResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoteResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void VoteResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoteResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& VoteResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.VoteResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* VoteResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.VoteResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* VoteResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.VoteResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void VoteResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.VoteResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusRequestPB::kDestUuidFieldNumber;
const int ConsensusRequestPB::kTabletIdFieldNumber;
const int ConsensusRequestPB::kCallerUuidFieldNumber;
const int ConsensusRequestPB::kCallerTermFieldNumber;
const int ConsensusRequestPB::kPrecedingIdFieldNumber;
const int ConsensusRequestPB::kCommittedIndexFieldNumber;
const int ConsensusRequestPB::kDEPRECATEDCommittedIndexFieldNumber;
const int ConsensusRequestPB::kOpsFieldNumber;
const int ConsensusRequestPB::kAllReplicatedIndexFieldNumber;
const int ConsensusRequestPB::kSafeTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusRequestPB::ConsensusRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusRequestPB)
}
ConsensusRequestPB::ConsensusRequestPB(const ConsensusRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  caller_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caller_uuid()) {
    caller_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_uuid_);
  }
  if (from.has_preceding_id()) {
    preceding_id_ = new ::kudu::consensus::OpId(*from.preceding_id_);
  } else {
    preceding_id_ = NULL;
  }
  if (from.has_deprecated_committed_index()) {
    deprecated_committed_index_ = new ::kudu::consensus::OpId(*from.deprecated_committed_index_);
  } else {
    deprecated_committed_index_ = NULL;
  }
  ::memcpy(&caller_term_, &from.caller_term_,
    reinterpret_cast<char*>(&safe_timestamp_) -
    reinterpret_cast<char*>(&caller_term_) + sizeof(safe_timestamp_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusRequestPB)
}

void ConsensusRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preceding_id_, 0, reinterpret_cast<char*>(&safe_timestamp_) -
    reinterpret_cast<char*>(&preceding_id_) + sizeof(safe_timestamp_));
}

ConsensusRequestPB::~ConsensusRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusRequestPB)
  SharedDtor();
}

void ConsensusRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete preceding_id_;
  }
  if (this != internal_default_instance()) {
    delete deprecated_committed_index_;
  }
}

void ConsensusRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[10].descriptor;
}

const ConsensusRequestPB& ConsensusRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusRequestPB* ConsensusRequestPB::New(::google::protobuf::Arena* arena) const {
  ConsensusRequestPB* n = new ConsensusRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusRequestPB)
  ops_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_caller_uuid()) {
      GOOGLE_DCHECK(!caller_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caller_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_preceding_id()) {
      GOOGLE_DCHECK(preceding_id_ != NULL);
      preceding_id_->::kudu::consensus::OpId::Clear();
    }
    if (has_deprecated_committed_index()) {
      GOOGLE_DCHECK(deprecated_committed_index_ != NULL);
      deprecated_committed_index_->::kudu::consensus::OpId::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&caller_term_, 0, reinterpret_cast<char*>(&all_replicated_index_) -
      reinterpret_cast<char*>(&caller_term_) + sizeof(all_replicated_index_));
  }
  safe_timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablet_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablet_id().data(), this->tablet_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.ConsensusRequestPB.tablet_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes caller_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_caller_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 caller_term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_caller_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caller_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.OpId preceding_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preceding_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_committed_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kudu.consensus.ReplicateMsg ops = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bytes dest_uuid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 committed_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_committed_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &committed_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 all_replicated_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_all_replicated_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_replicated_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 safe_timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_safe_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &safe_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusRequestPB)
  return false;
#undef DO_
}

void ConsensusRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusRequestPB.tablet_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes caller_uuid = 2;
  if (has_caller_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->caller_uuid(), output);
  }

  // required int64 caller_term = 3;
  if (has_caller_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->caller_term(), output);
  }

  // optional .kudu.consensus.OpId preceding_id = 4;
  if (has_preceding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->preceding_id_, output);
  }

  // optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
  if (has_deprecated_committed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deprecated_committed_index_, output);
  }

  // repeated .kudu.consensus.ReplicateMsg ops = 6;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ops(i), output);
  }

  // optional bytes dest_uuid = 7;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->dest_uuid(), output);
  }

  // optional int64 committed_index = 8;
  if (has_committed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->committed_index(), output);
  }

  // optional int64 all_replicated_index = 9;
  if (has_all_replicated_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->all_replicated_index(), output);
  }

  // optional fixed64 safe_timestamp = 10;
  if (has_safe_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->safe_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusRequestPB)
}

::google::protobuf::uint8* ConsensusRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.ConsensusRequestPB.tablet_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablet_id(), target);
  }

  // required bytes caller_uuid = 2;
  if (has_caller_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->caller_uuid(), target);
  }

  // required int64 caller_term = 3;
  if (has_caller_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->caller_term(), target);
  }

  // optional .kudu.consensus.OpId preceding_id = 4;
  if (has_preceding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->preceding_id_, false, target);
  }

  // optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
  if (has_deprecated_committed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->deprecated_committed_index_, false, target);
  }

  // repeated .kudu.consensus.ReplicateMsg ops = 6;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->ops(i), false, target);
  }

  // optional bytes dest_uuid = 7;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dest_uuid(), target);
  }

  // optional int64 committed_index = 8;
  if (has_committed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->committed_index(), target);
  }

  // optional int64 all_replicated_index = 9;
  if (has_all_replicated_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->all_replicated_index(), target);
  }

  // optional fixed64 safe_timestamp = 10;
  if (has_safe_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->safe_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusRequestPB)
  return target;
}

size_t ConsensusRequestPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.ConsensusRequestPB)
  size_t total_size = 0;

  if (has_tablet_id()) {
    // required string tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablet_id());
  }

  if (has_caller_uuid()) {
    // required bytes caller_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->caller_uuid());
  }

  if (has_caller_term()) {
    // required int64 caller_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->caller_term());
  }

  return total_size;
}
size_t ConsensusRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000026) ^ 0x00000026) == 0) {  // All required fields are present.
    // required string tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablet_id());

    // required bytes caller_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->caller_uuid());

    // required int64 caller_term = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->caller_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .kudu.consensus.ReplicateMsg ops = 6;
  {
    unsigned int count = this->ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ops(i));
    }
  }

  // optional bytes dest_uuid = 7;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional .kudu.consensus.OpId preceding_id = 4;
    if (has_preceding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preceding_id_);
    }

    // optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
    if (has_deprecated_committed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deprecated_committed_index_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int64 committed_index = 8;
    if (has_committed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->committed_index());
    }

    // optional int64 all_replicated_index = 9;
    if (has_all_replicated_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_replicated_index());
    }

  }
  // optional fixed64 safe_timestamp = 10;
  if (has_safe_timestamp()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusRequestPB)
    MergeFrom(*source);
  }
}

void ConsensusRequestPB::MergeFrom(const ConsensusRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ops_.MergeFrom(from.ops_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_caller_uuid()) {
      set_has_caller_uuid();
      caller_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_uuid_);
    }
    if (from.has_preceding_id()) {
      mutable_preceding_id()->::kudu::consensus::OpId::MergeFrom(from.preceding_id());
    }
    if (from.has_deprecated_committed_index()) {
      mutable_deprecated_committed_index()->::kudu::consensus::OpId::MergeFrom(from.deprecated_committed_index());
    }
    if (from.has_caller_term()) {
      set_caller_term(from.caller_term());
    }
    if (from.has_committed_index()) {
      set_committed_index(from.committed_index());
    }
    if (from.has_all_replicated_index()) {
      set_all_replicated_index(from.all_replicated_index());
    }
  }
  if (from.has_safe_timestamp()) {
    set_safe_timestamp(from.safe_timestamp());
  }
}

void ConsensusRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusRequestPB::CopyFrom(const ConsensusRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000026) != 0x00000026) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  if (has_preceding_id()) {
    if (!this->preceding_id_->IsInitialized()) return false;
  }
  if (has_deprecated_committed_index()) {
    if (!this->deprecated_committed_index_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusRequestPB::Swap(ConsensusRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusRequestPB::InternalSwap(ConsensusRequestPB* other) {
  ops_.UnsafeArenaSwap(&other->ops_);
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  caller_uuid_.Swap(&other->caller_uuid_);
  std::swap(preceding_id_, other->preceding_id_);
  std::swap(deprecated_committed_index_, other->deprecated_committed_index_);
  std::swap(caller_term_, other->caller_term_);
  std::swap(committed_index_, other->committed_index_);
  std::swap(all_replicated_index_, other->all_replicated_index_);
  std::swap(safe_timestamp_, other->safe_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusRequestPB

// optional bytes dest_uuid = 7;
bool ConsensusRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& ConsensusRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void ConsensusRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
#if LANG_CXX11
void ConsensusRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
#endif
void ConsensusRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
void ConsensusRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.dest_uuid)
}
::std::string* ConsensusRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.dest_uuid)
}

// required string tablet_id = 1;
bool ConsensusRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& ConsensusRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void ConsensusRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.tablet_id)
}
#if LANG_CXX11
void ConsensusRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.tablet_id)
}
#endif
void ConsensusRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.tablet_id)
}
void ConsensusRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.tablet_id)
}
::std::string* ConsensusRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.tablet_id)
}

// required bytes caller_uuid = 2;
bool ConsensusRequestPB::has_caller_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsensusRequestPB::set_has_caller_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsensusRequestPB::clear_has_caller_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsensusRequestPB::clear_caller_uuid() {
  caller_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caller_uuid();
}
const ::std::string& ConsensusRequestPB::caller_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.caller_uuid)
  return caller_uuid_.GetNoArena();
}
void ConsensusRequestPB::set_caller_uuid(const ::std::string& value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
#if LANG_CXX11
void ConsensusRequestPB::set_caller_uuid(::std::string&& value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
#endif
void ConsensusRequestPB::set_caller_uuid(const char* value) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
void ConsensusRequestPB::set_caller_uuid(const void* value, size_t size) {
  set_has_caller_uuid();
  caller_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusRequestPB.caller_uuid)
}
::std::string* ConsensusRequestPB::mutable_caller_uuid() {
  set_has_caller_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.caller_uuid)
  return caller_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusRequestPB::release_caller_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.caller_uuid)
  clear_has_caller_uuid();
  return caller_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusRequestPB::set_allocated_caller_uuid(::std::string* caller_uuid) {
  if (caller_uuid != NULL) {
    set_has_caller_uuid();
  } else {
    clear_has_caller_uuid();
  }
  caller_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.caller_uuid)
}

// required int64 caller_term = 3;
bool ConsensusRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConsensusRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000020u;
}
void ConsensusRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConsensusRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(0);
  clear_has_caller_term();
}
::google::protobuf::int64 ConsensusRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.caller_term)
  return caller_term_;
}
void ConsensusRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.caller_term)
}

// optional .kudu.consensus.OpId preceding_id = 4;
bool ConsensusRequestPB::has_preceding_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConsensusRequestPB::set_has_preceding_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ConsensusRequestPB::clear_has_preceding_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConsensusRequestPB::clear_preceding_id() {
  if (preceding_id_ != NULL) preceding_id_->::kudu::consensus::OpId::Clear();
  clear_has_preceding_id();
}
const ::kudu::consensus::OpId& ConsensusRequestPB::preceding_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_ != NULL ? *preceding_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* ConsensusRequestPB::mutable_preceding_id() {
  set_has_preceding_id();
  if (preceding_id_ == NULL) {
    preceding_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_;
}
::kudu::consensus::OpId* ConsensusRequestPB::release_preceding_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.preceding_id)
  clear_has_preceding_id();
  ::kudu::consensus::OpId* temp = preceding_id_;
  preceding_id_ = NULL;
  return temp;
}
void ConsensusRequestPB::set_allocated_preceding_id(::kudu::consensus::OpId* preceding_id) {
  delete preceding_id_;
  preceding_id_ = preceding_id;
  if (preceding_id) {
    set_has_preceding_id();
  } else {
    clear_has_preceding_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.preceding_id)
}

// optional int64 committed_index = 8;
bool ConsensusRequestPB::has_committed_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConsensusRequestPB::set_has_committed_index() {
  _has_bits_[0] |= 0x00000040u;
}
void ConsensusRequestPB::clear_has_committed_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConsensusRequestPB::clear_committed_index() {
  committed_index_ = GOOGLE_LONGLONG(0);
  clear_has_committed_index();
}
::google::protobuf::int64 ConsensusRequestPB::committed_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.committed_index)
  return committed_index_;
}
void ConsensusRequestPB::set_committed_index(::google::protobuf::int64 value) {
  set_has_committed_index();
  committed_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.committed_index)
}

// optional .kudu.consensus.OpId DEPRECATED_committed_index = 5;
bool ConsensusRequestPB::has_deprecated_committed_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConsensusRequestPB::set_has_deprecated_committed_index() {
  _has_bits_[0] |= 0x00000010u;
}
void ConsensusRequestPB::clear_has_deprecated_committed_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConsensusRequestPB::clear_deprecated_committed_index() {
  if (deprecated_committed_index_ != NULL) deprecated_committed_index_->::kudu::consensus::OpId::Clear();
  clear_has_deprecated_committed_index();
}
const ::kudu::consensus::OpId& ConsensusRequestPB::deprecated_committed_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_ != NULL ? *deprecated_committed_index_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* ConsensusRequestPB::mutable_deprecated_committed_index() {
  set_has_deprecated_committed_index();
  if (deprecated_committed_index_ == NULL) {
    deprecated_committed_index_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_;
}
::kudu::consensus::OpId* ConsensusRequestPB::release_deprecated_committed_index() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  clear_has_deprecated_committed_index();
  ::kudu::consensus::OpId* temp = deprecated_committed_index_;
  deprecated_committed_index_ = NULL;
  return temp;
}
void ConsensusRequestPB::set_allocated_deprecated_committed_index(::kudu::consensus::OpId* deprecated_committed_index) {
  delete deprecated_committed_index_;
  deprecated_committed_index_ = deprecated_committed_index;
  if (deprecated_committed_index) {
    set_has_deprecated_committed_index();
  } else {
    clear_has_deprecated_committed_index();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
}

// repeated .kudu.consensus.ReplicateMsg ops = 6;
int ConsensusRequestPB::ops_size() const {
  return ops_.size();
}
void ConsensusRequestPB::clear_ops() {
  ops_.Clear();
}
const ::kudu::consensus::ReplicateMsg& ConsensusRequestPB::ops(int index) const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Get(index);
}
::kudu::consensus::ReplicateMsg* ConsensusRequestPB::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Mutable(index);
}
::kudu::consensus::ReplicateMsg* ConsensusRequestPB::add_ops() {
  // @@protoc_insertion_point(field_add:kudu.consensus.ConsensusRequestPB.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >*
ConsensusRequestPB::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:kudu.consensus.ConsensusRequestPB.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::kudu::consensus::ReplicateMsg >&
ConsensusRequestPB::ops() const {
  // @@protoc_insertion_point(field_list:kudu.consensus.ConsensusRequestPB.ops)
  return ops_;
}

// optional int64 all_replicated_index = 9;
bool ConsensusRequestPB::has_all_replicated_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConsensusRequestPB::set_has_all_replicated_index() {
  _has_bits_[0] |= 0x00000080u;
}
void ConsensusRequestPB::clear_has_all_replicated_index() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConsensusRequestPB::clear_all_replicated_index() {
  all_replicated_index_ = GOOGLE_LONGLONG(0);
  clear_has_all_replicated_index();
}
::google::protobuf::int64 ConsensusRequestPB::all_replicated_index() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.all_replicated_index)
  return all_replicated_index_;
}
void ConsensusRequestPB::set_all_replicated_index(::google::protobuf::int64 value) {
  set_has_all_replicated_index();
  all_replicated_index_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.all_replicated_index)
}

// optional fixed64 safe_timestamp = 10;
bool ConsensusRequestPB::has_safe_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConsensusRequestPB::set_has_safe_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void ConsensusRequestPB::clear_has_safe_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConsensusRequestPB::clear_safe_timestamp() {
  safe_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_timestamp();
}
::google::protobuf::uint64 ConsensusRequestPB::safe_timestamp() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusRequestPB.safe_timestamp)
  return safe_timestamp_;
}
void ConsensusRequestPB::set_safe_timestamp(::google::protobuf::uint64 value) {
  set_has_safe_timestamp();
  safe_timestamp_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusRequestPB.safe_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusResponsePB::kResponderUuidFieldNumber;
const int ConsensusResponsePB::kResponderTermFieldNumber;
const int ConsensusResponsePB::kStatusFieldNumber;
const int ConsensusResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusResponsePB::ConsensusResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.ConsensusResponsePB)
}
ConsensusResponsePB::ConsensusResponsePB(const ConsensusResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responder_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_responder_uuid()) {
    responder_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responder_uuid_);
  }
  if (from.has_status()) {
    status_ = new ::kudu::consensus::ConsensusStatusPB(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  responder_term_ = from.responder_term_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.ConsensusResponsePB)
}

void ConsensusResponsePB::SharedCtor() {
  _cached_size_ = 0;
  responder_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&responder_term_) -
    reinterpret_cast<char*>(&status_) + sizeof(responder_term_));
}

ConsensusResponsePB::~ConsensusResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.ConsensusResponsePB)
  SharedDtor();
}

void ConsensusResponsePB::SharedDtor() {
  responder_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete status_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void ConsensusResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[11].descriptor;
}

const ConsensusResponsePB& ConsensusResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusResponsePB* ConsensusResponsePB::New(::google::protobuf::Arena* arena) const {
  ConsensusResponsePB* n = new ConsensusResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.ConsensusResponsePB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_responder_uuid()) {
      GOOGLE_DCHECK(!responder_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*responder_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_status()) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->::kudu::consensus::ConsensusStatusPB::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::tserver::TabletServerErrorPB::Clear();
    }
  }
  responder_term_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConsensusResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.ConsensusResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes responder_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_responder_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 responder_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_responder_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &responder_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ConsensusStatusPB status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.TabletServerErrorPB error = 999;
      case 999: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(7994u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.ConsensusResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.ConsensusResponsePB)
  return false;
#undef DO_
}

void ConsensusResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.ConsensusResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->responder_uuid(), output);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->responder_term(), output);
  }

  // optional .kudu.consensus.ConsensusStatusPB status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      999, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.ConsensusResponsePB)
}

::google::protobuf::uint8* ConsensusResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.ConsensusResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->responder_uuid(), target);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->responder_term(), target);
  }

  // optional .kudu.consensus.ConsensusStatusPB status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->status_, false, target);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 999;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        999, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.ConsensusResponsePB)
  return target;
}

size_t ConsensusResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.ConsensusResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes responder_uuid = 1;
    if (has_responder_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->responder_uuid());
    }

    // optional .kudu.consensus.ConsensusStatusPB status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 999;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional int64 responder_term = 2;
    if (has_responder_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->responder_term());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.ConsensusResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.ConsensusResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.ConsensusResponsePB)
    MergeFrom(*source);
  }
}

void ConsensusResponsePB::MergeFrom(const ConsensusResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.ConsensusResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_responder_uuid()) {
      set_has_responder_uuid();
      responder_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responder_uuid_);
    }
    if (from.has_status()) {
      mutable_status()->::kudu::consensus::ConsensusStatusPB::MergeFrom(from.status());
    }
    if (from.has_error()) {
      mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
    }
    if (from.has_responder_term()) {
      set_responder_term(from.responder_term());
    }
  }
}

void ConsensusResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.ConsensusResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusResponsePB::CopyFrom(const ConsensusResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.ConsensusResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusResponsePB::IsInitialized() const {
  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void ConsensusResponsePB::Swap(ConsensusResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusResponsePB::InternalSwap(ConsensusResponsePB* other) {
  responder_uuid_.Swap(&other->responder_uuid_);
  std::swap(status_, other->status_);
  std::swap(error_, other->error_);
  std::swap(responder_term_, other->responder_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusResponsePB

// optional bytes responder_uuid = 1;
bool ConsensusResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConsensusResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConsensusResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConsensusResponsePB::clear_responder_uuid() {
  responder_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_responder_uuid();
}
const ::std::string& ConsensusResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.responder_uuid)
  return responder_uuid_.GetNoArena();
}
void ConsensusResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
#if LANG_CXX11
void ConsensusResponsePB::set_responder_uuid(::std::string&& value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
#endif
void ConsensusResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
void ConsensusResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  responder_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.ConsensusResponsePB.responder_uuid)
}
::std::string* ConsensusResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.responder_uuid)
  return responder_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusResponsePB::release_responder_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.responder_uuid)
  clear_has_responder_uuid();
  return responder_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid != NULL) {
    set_has_responder_uuid();
  } else {
    clear_has_responder_uuid();
  }
  responder_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responder_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
bool ConsensusResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConsensusResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000008u;
}
void ConsensusResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConsensusResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
::google::protobuf::int64 ConsensusResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.responder_term)
  return responder_term_;
}
void ConsensusResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.ConsensusResponsePB.responder_term)
}

// optional .kudu.consensus.ConsensusStatusPB status = 3;
bool ConsensusResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConsensusResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ConsensusResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConsensusResponsePB::clear_status() {
  if (status_ != NULL) status_->::kudu::consensus::ConsensusStatusPB::Clear();
  clear_has_status();
}
const ::kudu::consensus::ConsensusStatusPB& ConsensusResponsePB::status() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.status)
  return status_ != NULL ? *status_
                         : *::kudu::consensus::ConsensusStatusPB::internal_default_instance();
}
::kudu::consensus::ConsensusStatusPB* ConsensusResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::kudu::consensus::ConsensusStatusPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.status)
  return status_;
}
::kudu::consensus::ConsensusStatusPB* ConsensusResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.status)
  clear_has_status();
  ::kudu::consensus::ConsensusStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
void ConsensusResponsePB::set_allocated_status(::kudu::consensus::ConsensusStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.status)
}

// optional .kudu.tserver.TabletServerErrorPB error = 999;
bool ConsensusResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConsensusResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void ConsensusResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConsensusResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& ConsensusResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.ConsensusResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* ConsensusResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.ConsensusResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* ConsensusResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.ConsensusResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void ConsensusResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.ConsensusResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionStatusPB::kOpIdFieldNumber;
const int TransactionStatusPB::kTxTypeFieldNumber;
const int TransactionStatusPB::kRunningForMicrosFieldNumber;
const int TransactionStatusPB::kDescriptionFieldNumber;
const int TransactionStatusPB::kTraceBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionStatusPB::TransactionStatusPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.TransactionStatusPB)
}
TransactionStatusPB::TransactionStatusPB(const TransactionStatusPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  trace_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_buffer()) {
    trace_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_buffer_);
  }
  if (from.has_op_id()) {
    op_id_ = new ::kudu::consensus::OpId(*from.op_id_);
  } else {
    op_id_ = NULL;
  }
  ::memcpy(&running_for_micros_, &from.running_for_micros_,
    reinterpret_cast<char*>(&tx_type_) -
    reinterpret_cast<char*>(&running_for_micros_) + sizeof(tx_type_));
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.TransactionStatusPB)
}

void TransactionStatusPB::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_id_, 0, reinterpret_cast<char*>(&tx_type_) -
    reinterpret_cast<char*>(&op_id_) + sizeof(tx_type_));
}

TransactionStatusPB::~TransactionStatusPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.TransactionStatusPB)
  SharedDtor();
}

void TransactionStatusPB::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete op_id_;
  }
}

void TransactionStatusPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatusPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[12].descriptor;
}

const TransactionStatusPB& TransactionStatusPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionStatusPB* TransactionStatusPB::New(::google::protobuf::Arena* arena) const {
  TransactionStatusPB* n = new TransactionStatusPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.TransactionStatusPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_trace_buffer()) {
      GOOGLE_DCHECK(!trace_buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trace_buffer_.UnsafeRawStringPointer())->clear();
    }
    if (has_op_id()) {
      GOOGLE_DCHECK(op_id_ != NULL);
      op_id_->::kudu::consensus::OpId::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&running_for_micros_, 0, reinterpret_cast<char*>(&tx_type_) -
      reinterpret_cast<char*>(&running_for_micros_) + sizeof(tx_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionStatusPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.TransactionStatusPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.consensus.OpId op_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.consensus.OperationType tx_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::OperationType_IsValid(value)) {
            set_tx_type(static_cast< ::kudu::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 running_for_micros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_running_for_micros();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_for_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.TransactionStatusPB.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trace_buffer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_buffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trace_buffer().data(), this->trace_buffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kudu.consensus.TransactionStatusPB.trace_buffer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.TransactionStatusPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.TransactionStatusPB)
  return false;
#undef DO_
}

void TransactionStatusPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.TransactionStatusPB)
  // required .kudu.consensus.OpId op_id = 1;
  if (has_op_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->op_id_, output);
  }

  // required .kudu.consensus.OperationType tx_type = 2;
  if (has_tx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tx_type(), output);
  }

  // required int64 running_for_micros = 3;
  if (has_running_for_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->running_for_micros(), output);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.TransactionStatusPB.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string trace_buffer = 6;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.TransactionStatusPB.trace_buffer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trace_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.TransactionStatusPB)
}

::google::protobuf::uint8* TransactionStatusPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.TransactionStatusPB)
  // required .kudu.consensus.OpId op_id = 1;
  if (has_op_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->op_id_, false, target);
  }

  // required .kudu.consensus.OperationType tx_type = 2;
  if (has_tx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tx_type(), target);
  }

  // required int64 running_for_micros = 3;
  if (has_running_for_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->running_for_micros(), target);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.TransactionStatusPB.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string trace_buffer = 6;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kudu.consensus.TransactionStatusPB.trace_buffer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trace_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.TransactionStatusPB)
  return target;
}

size_t TransactionStatusPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.TransactionStatusPB)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_op_id()) {
    // required .kudu.consensus.OpId op_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_id_);
  }

  if (has_running_for_micros()) {
    // required int64 running_for_micros = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->running_for_micros());
  }

  if (has_tx_type()) {
    // required .kudu.consensus.OperationType tx_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_type());
  }

  return total_size;
}
size_t TransactionStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.TransactionStatusPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string description = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required .kudu.consensus.OpId op_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_id_);

    // required int64 running_for_micros = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->running_for_micros());

    // required .kudu.consensus.OperationType tx_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string trace_buffer = 6;
  if (has_trace_buffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatusPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.TransactionStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStatusPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionStatusPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.TransactionStatusPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.TransactionStatusPB)
    MergeFrom(*source);
  }
}

void TransactionStatusPB::MergeFrom(const TransactionStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.TransactionStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_trace_buffer()) {
      set_has_trace_buffer();
      trace_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_buffer_);
    }
    if (from.has_op_id()) {
      mutable_op_id()->::kudu::consensus::OpId::MergeFrom(from.op_id());
    }
    if (from.has_running_for_micros()) {
      set_running_for_micros(from.running_for_micros());
    }
    if (from.has_tx_type()) {
      set_tx_type(from.tx_type());
    }
  }
}

void TransactionStatusPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.TransactionStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatusPB::CopyFrom(const TransactionStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.TransactionStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatusPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_op_id()) {
    if (!this->op_id_->IsInitialized()) return false;
  }
  return true;
}

void TransactionStatusPB::Swap(TransactionStatusPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionStatusPB::InternalSwap(TransactionStatusPB* other) {
  description_.Swap(&other->description_);
  trace_buffer_.Swap(&other->trace_buffer_);
  std::swap(op_id_, other->op_id_);
  std::swap(running_for_micros_, other->running_for_micros_);
  std::swap(tx_type_, other->tx_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionStatusPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionStatusPB

// required .kudu.consensus.OpId op_id = 1;
bool TransactionStatusPB::has_op_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionStatusPB::set_has_op_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionStatusPB::clear_has_op_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionStatusPB::clear_op_id() {
  if (op_id_ != NULL) op_id_->::kudu::consensus::OpId::Clear();
  clear_has_op_id();
}
const ::kudu::consensus::OpId& TransactionStatusPB::op_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.op_id)
  return op_id_ != NULL ? *op_id_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* TransactionStatusPB::mutable_op_id() {
  set_has_op_id();
  if (op_id_ == NULL) {
    op_id_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.op_id)
  return op_id_;
}
::kudu::consensus::OpId* TransactionStatusPB::release_op_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.op_id)
  clear_has_op_id();
  ::kudu::consensus::OpId* temp = op_id_;
  op_id_ = NULL;
  return temp;
}
void TransactionStatusPB::set_allocated_op_id(::kudu::consensus::OpId* op_id) {
  delete op_id_;
  op_id_ = op_id;
  if (op_id) {
    set_has_op_id();
  } else {
    clear_has_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.op_id)
}

// required .kudu.consensus.OperationType tx_type = 2;
bool TransactionStatusPB::has_tx_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionStatusPB::set_has_tx_type() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionStatusPB::clear_has_tx_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionStatusPB::clear_tx_type() {
  tx_type_ = 0;
  clear_has_tx_type();
}
::kudu::consensus::OperationType TransactionStatusPB::tx_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.tx_type)
  return static_cast< ::kudu::consensus::OperationType >(tx_type_);
}
void TransactionStatusPB::set_tx_type(::kudu::consensus::OperationType value) {
  assert(::kudu::consensus::OperationType_IsValid(value));
  set_has_tx_type();
  tx_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.tx_type)
}

// required int64 running_for_micros = 3;
bool TransactionStatusPB::has_running_for_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionStatusPB::set_has_running_for_micros() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionStatusPB::clear_has_running_for_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionStatusPB::clear_running_for_micros() {
  running_for_micros_ = GOOGLE_LONGLONG(0);
  clear_has_running_for_micros();
}
::google::protobuf::int64 TransactionStatusPB::running_for_micros() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.running_for_micros)
  return running_for_micros_;
}
void TransactionStatusPB::set_running_for_micros(::google::protobuf::int64 value) {
  set_has_running_for_micros();
  running_for_micros_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.running_for_micros)
}

// required string description = 4;
bool TransactionStatusPB::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionStatusPB::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionStatusPB::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionStatusPB::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& TransactionStatusPB::description() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.description)
  return description_.GetNoArena();
}
void TransactionStatusPB::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.description)
}
#if LANG_CXX11
void TransactionStatusPB::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.TransactionStatusPB.description)
}
#endif
void TransactionStatusPB::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.TransactionStatusPB.description)
}
void TransactionStatusPB::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.TransactionStatusPB.description)
}
::std::string* TransactionStatusPB::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatusPB::release_description() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatusPB::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.description)
}

// optional string trace_buffer = 6;
bool TransactionStatusPB::has_trace_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionStatusPB::set_has_trace_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionStatusPB::clear_has_trace_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionStatusPB::clear_trace_buffer() {
  trace_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trace_buffer();
}
const ::std::string& TransactionStatusPB::trace_buffer() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.TransactionStatusPB.trace_buffer)
  return trace_buffer_.GetNoArena();
}
void TransactionStatusPB::set_trace_buffer(const ::std::string& value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.TransactionStatusPB.trace_buffer)
}
#if LANG_CXX11
void TransactionStatusPB::set_trace_buffer(::std::string&& value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.TransactionStatusPB.trace_buffer)
}
#endif
void TransactionStatusPB::set_trace_buffer(const char* value) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.TransactionStatusPB.trace_buffer)
}
void TransactionStatusPB::set_trace_buffer(const char* value, size_t size) {
  set_has_trace_buffer();
  trace_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.TransactionStatusPB.trace_buffer)
}
::std::string* TransactionStatusPB::mutable_trace_buffer() {
  set_has_trace_buffer();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.TransactionStatusPB.trace_buffer)
  return trace_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatusPB::release_trace_buffer() {
  // @@protoc_insertion_point(field_release:kudu.consensus.TransactionStatusPB.trace_buffer)
  clear_has_trace_buffer();
  return trace_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatusPB::set_allocated_trace_buffer(::std::string* trace_buffer) {
  if (trace_buffer != NULL) {
    set_has_trace_buffer();
  } else {
    clear_has_trace_buffer();
  }
  trace_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_buffer);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.TransactionStatusPB.trace_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInstanceRequestPB::GetNodeInstanceRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetNodeInstanceRequestPB)
}
GetNodeInstanceRequestPB::GetNodeInstanceRequestPB(const GetNodeInstanceRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetNodeInstanceRequestPB)
}

void GetNodeInstanceRequestPB::SharedCtor() {
  _cached_size_ = 0;
}

GetNodeInstanceRequestPB::~GetNodeInstanceRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetNodeInstanceRequestPB)
  SharedDtor();
}

void GetNodeInstanceRequestPB::SharedDtor() {
}

void GetNodeInstanceRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInstanceRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[13].descriptor;
}

const GetNodeInstanceRequestPB& GetNodeInstanceRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeInstanceRequestPB* GetNodeInstanceRequestPB::New(::google::protobuf::Arena* arena) const {
  GetNodeInstanceRequestPB* n = new GetNodeInstanceRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInstanceRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetNodeInstanceRequestPB)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNodeInstanceRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetNodeInstanceRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetNodeInstanceRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetNodeInstanceRequestPB)
  return false;
#undef DO_
}

void GetNodeInstanceRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetNodeInstanceRequestPB)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetNodeInstanceRequestPB)
}

::google::protobuf::uint8* GetNodeInstanceRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetNodeInstanceRequestPB)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetNodeInstanceRequestPB)
  return target;
}

size_t GetNodeInstanceRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetNodeInstanceRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInstanceRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetNodeInstanceRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInstanceRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInstanceRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetNodeInstanceRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetNodeInstanceRequestPB)
    MergeFrom(*source);
  }
}

void GetNodeInstanceRequestPB::MergeFrom(const GetNodeInstanceRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetNodeInstanceRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void GetNodeInstanceRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetNodeInstanceRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInstanceRequestPB::CopyFrom(const GetNodeInstanceRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetNodeInstanceRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInstanceRequestPB::IsInitialized() const {
  return true;
}

void GetNodeInstanceRequestPB::Swap(GetNodeInstanceRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInstanceRequestPB::InternalSwap(GetNodeInstanceRequestPB* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInstanceRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInstanceRequestPB

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeInstanceResponsePB::kNodeInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeInstanceResponsePB::GetNodeInstanceResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetNodeInstanceResponsePB)
}
GetNodeInstanceResponsePB::GetNodeInstanceResponsePB(const GetNodeInstanceResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_instance()) {
    node_instance_ = new ::kudu::NodeInstancePB(*from.node_instance_);
  } else {
    node_instance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetNodeInstanceResponsePB)
}

void GetNodeInstanceResponsePB::SharedCtor() {
  _cached_size_ = 0;
  node_instance_ = NULL;
}

GetNodeInstanceResponsePB::~GetNodeInstanceResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetNodeInstanceResponsePB)
  SharedDtor();
}

void GetNodeInstanceResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete node_instance_;
  }
}

void GetNodeInstanceResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInstanceResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[14].descriptor;
}

const GetNodeInstanceResponsePB& GetNodeInstanceResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeInstanceResponsePB* GetNodeInstanceResponsePB::New(::google::protobuf::Arena* arena) const {
  GetNodeInstanceResponsePB* n = new GetNodeInstanceResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeInstanceResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetNodeInstanceResponsePB)
  if (has_node_instance()) {
    GOOGLE_DCHECK(node_instance_ != NULL);
    node_instance_->::kudu::NodeInstancePB::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNodeInstanceResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetNodeInstanceResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.NodeInstancePB node_instance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_instance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetNodeInstanceResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetNodeInstanceResponsePB)
  return false;
#undef DO_
}

void GetNodeInstanceResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetNodeInstanceResponsePB)
  // required .kudu.NodeInstancePB node_instance = 1;
  if (has_node_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_instance_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetNodeInstanceResponsePB)
}

::google::protobuf::uint8* GetNodeInstanceResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetNodeInstanceResponsePB)
  // required .kudu.NodeInstancePB node_instance = 1;
  if (has_node_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_instance_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetNodeInstanceResponsePB)
  return target;
}

size_t GetNodeInstanceResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetNodeInstanceResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .kudu.NodeInstancePB node_instance = 1;
  if (has_node_instance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_instance_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInstanceResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetNodeInstanceResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInstanceResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeInstanceResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetNodeInstanceResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetNodeInstanceResponsePB)
    MergeFrom(*source);
  }
}

void GetNodeInstanceResponsePB::MergeFrom(const GetNodeInstanceResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetNodeInstanceResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_instance()) {
    mutable_node_instance()->::kudu::NodeInstancePB::MergeFrom(from.node_instance());
  }
}

void GetNodeInstanceResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetNodeInstanceResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInstanceResponsePB::CopyFrom(const GetNodeInstanceResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetNodeInstanceResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInstanceResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_node_instance()) {
    if (!this->node_instance_->IsInitialized()) return false;
  }
  return true;
}

void GetNodeInstanceResponsePB::Swap(GetNodeInstanceResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeInstanceResponsePB::InternalSwap(GetNodeInstanceResponsePB* other) {
  std::swap(node_instance_, other->node_instance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeInstanceResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeInstanceResponsePB

// required .kudu.NodeInstancePB node_instance = 1;
bool GetNodeInstanceResponsePB::has_node_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetNodeInstanceResponsePB::set_has_node_instance() {
  _has_bits_[0] |= 0x00000001u;
}
void GetNodeInstanceResponsePB::clear_has_node_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetNodeInstanceResponsePB::clear_node_instance() {
  if (node_instance_ != NULL) node_instance_->::kudu::NodeInstancePB::Clear();
  clear_has_node_instance();
}
const ::kudu::NodeInstancePB& GetNodeInstanceResponsePB::node_instance() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_ != NULL ? *node_instance_
                         : *::kudu::NodeInstancePB::internal_default_instance();
}
::kudu::NodeInstancePB* GetNodeInstanceResponsePB::mutable_node_instance() {
  set_has_node_instance();
  if (node_instance_ == NULL) {
    node_instance_ = new ::kudu::NodeInstancePB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_;
}
::kudu::NodeInstancePB* GetNodeInstanceResponsePB::release_node_instance() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
  clear_has_node_instance();
  ::kudu::NodeInstancePB* temp = node_instance_;
  node_instance_ = NULL;
  return temp;
}
void GetNodeInstanceResponsePB::set_allocated_node_instance(::kudu::NodeInstancePB* node_instance) {
  delete node_instance_;
  node_instance_ = node_instance;
  if (node_instance) {
    set_has_node_instance();
  } else {
    clear_has_node_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetNodeInstanceResponsePB.node_instance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunLeaderElectionRequestPB::kDestUuidFieldNumber;
const int RunLeaderElectionRequestPB::kTabletIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunLeaderElectionRequestPB::RunLeaderElectionRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.RunLeaderElectionRequestPB)
}
RunLeaderElectionRequestPB::RunLeaderElectionRequestPB(const RunLeaderElectionRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.RunLeaderElectionRequestPB)
}

void RunLeaderElectionRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RunLeaderElectionRequestPB::~RunLeaderElectionRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.RunLeaderElectionRequestPB)
  SharedDtor();
}

void RunLeaderElectionRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RunLeaderElectionRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunLeaderElectionRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[15].descriptor;
}

const RunLeaderElectionRequestPB& RunLeaderElectionRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunLeaderElectionRequestPB* RunLeaderElectionRequestPB::New(::google::protobuf::Arena* arena) const {
  RunLeaderElectionRequestPB* n = new RunLeaderElectionRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunLeaderElectionRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.RunLeaderElectionRequestPB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RunLeaderElectionRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.RunLeaderElectionRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.RunLeaderElectionRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.RunLeaderElectionRequestPB)
  return false;
#undef DO_
}

void RunLeaderElectionRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.RunLeaderElectionRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.RunLeaderElectionRequestPB)
}

::google::protobuf::uint8* RunLeaderElectionRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.RunLeaderElectionRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.RunLeaderElectionRequestPB)
  return target;
}

size_t RunLeaderElectionRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.RunLeaderElectionRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }
  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunLeaderElectionRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.RunLeaderElectionRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RunLeaderElectionRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunLeaderElectionRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.RunLeaderElectionRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.RunLeaderElectionRequestPB)
    MergeFrom(*source);
  }
}

void RunLeaderElectionRequestPB::MergeFrom(const RunLeaderElectionRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.RunLeaderElectionRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
  }
}

void RunLeaderElectionRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.RunLeaderElectionRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunLeaderElectionRequestPB::CopyFrom(const RunLeaderElectionRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.RunLeaderElectionRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunLeaderElectionRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void RunLeaderElectionRequestPB::Swap(RunLeaderElectionRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunLeaderElectionRequestPB::InternalSwap(RunLeaderElectionRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunLeaderElectionRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunLeaderElectionRequestPB

// optional bytes dest_uuid = 2;
bool RunLeaderElectionRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RunLeaderElectionRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void RunLeaderElectionRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RunLeaderElectionRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& RunLeaderElectionRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void RunLeaderElectionRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
#if LANG_CXX11
void RunLeaderElectionRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
#endif
void RunLeaderElectionRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
void RunLeaderElectionRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
::std::string* RunLeaderElectionRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunLeaderElectionRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunLeaderElectionRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool RunLeaderElectionRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RunLeaderElectionRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RunLeaderElectionRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RunLeaderElectionRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& RunLeaderElectionRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void RunLeaderElectionRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
#if LANG_CXX11
void RunLeaderElectionRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
#endif
void RunLeaderElectionRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
void RunLeaderElectionRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}
::std::string* RunLeaderElectionRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunLeaderElectionRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunLeaderElectionRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionRequestPB.tablet_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunLeaderElectionResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunLeaderElectionResponsePB::RunLeaderElectionResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.RunLeaderElectionResponsePB)
}
RunLeaderElectionResponsePB::RunLeaderElectionResponsePB(const RunLeaderElectionResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.RunLeaderElectionResponsePB)
}

void RunLeaderElectionResponsePB::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

RunLeaderElectionResponsePB::~RunLeaderElectionResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.RunLeaderElectionResponsePB)
  SharedDtor();
}

void RunLeaderElectionResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void RunLeaderElectionResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunLeaderElectionResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[16].descriptor;
}

const RunLeaderElectionResponsePB& RunLeaderElectionResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunLeaderElectionResponsePB* RunLeaderElectionResponsePB::New(::google::protobuf::Arena* arena) const {
  RunLeaderElectionResponsePB* n = new RunLeaderElectionResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunLeaderElectionResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.RunLeaderElectionResponsePB)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::kudu::tserver::TabletServerErrorPB::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RunLeaderElectionResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.RunLeaderElectionResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.tserver.TabletServerErrorPB error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.RunLeaderElectionResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.RunLeaderElectionResponsePB)
  return false;
#undef DO_
}

void RunLeaderElectionResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.RunLeaderElectionResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.RunLeaderElectionResponsePB)
}

::google::protobuf::uint8* RunLeaderElectionResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.RunLeaderElectionResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.RunLeaderElectionResponsePB)
  return target;
}

size_t RunLeaderElectionResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.RunLeaderElectionResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunLeaderElectionResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.RunLeaderElectionResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const RunLeaderElectionResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunLeaderElectionResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.RunLeaderElectionResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.RunLeaderElectionResponsePB)
    MergeFrom(*source);
  }
}

void RunLeaderElectionResponsePB::MergeFrom(const RunLeaderElectionResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.RunLeaderElectionResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
  }
}

void RunLeaderElectionResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.RunLeaderElectionResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunLeaderElectionResponsePB::CopyFrom(const RunLeaderElectionResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.RunLeaderElectionResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunLeaderElectionResponsePB::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void RunLeaderElectionResponsePB::Swap(RunLeaderElectionResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunLeaderElectionResponsePB::InternalSwap(RunLeaderElectionResponsePB* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunLeaderElectionResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunLeaderElectionResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
bool RunLeaderElectionResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RunLeaderElectionResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void RunLeaderElectionResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void RunLeaderElectionResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& RunLeaderElectionResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.RunLeaderElectionResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* RunLeaderElectionResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.RunLeaderElectionResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* RunLeaderElectionResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.RunLeaderElectionResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void RunLeaderElectionResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.RunLeaderElectionResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderStepDownRequestPB::kDestUuidFieldNumber;
const int LeaderStepDownRequestPB::kTabletIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderStepDownRequestPB::LeaderStepDownRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.LeaderStepDownRequestPB)
}
LeaderStepDownRequestPB::LeaderStepDownRequestPB(const LeaderStepDownRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.LeaderStepDownRequestPB)
}

void LeaderStepDownRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LeaderStepDownRequestPB::~LeaderStepDownRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.LeaderStepDownRequestPB)
  SharedDtor();
}

void LeaderStepDownRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderStepDownRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStepDownRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[17].descriptor;
}

const LeaderStepDownRequestPB& LeaderStepDownRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaderStepDownRequestPB* LeaderStepDownRequestPB::New(::google::protobuf::Arena* arena) const {
  LeaderStepDownRequestPB* n = new LeaderStepDownRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderStepDownRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.LeaderStepDownRequestPB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderStepDownRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.LeaderStepDownRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.LeaderStepDownRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.LeaderStepDownRequestPB)
  return false;
#undef DO_
}

void LeaderStepDownRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.LeaderStepDownRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.LeaderStepDownRequestPB)
}

::google::protobuf::uint8* LeaderStepDownRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.LeaderStepDownRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.LeaderStepDownRequestPB)
  return target;
}

size_t LeaderStepDownRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.LeaderStepDownRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }
  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStepDownRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.LeaderStepDownRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderStepDownRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderStepDownRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.LeaderStepDownRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.LeaderStepDownRequestPB)
    MergeFrom(*source);
  }
}

void LeaderStepDownRequestPB::MergeFrom(const LeaderStepDownRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.LeaderStepDownRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
  }
}

void LeaderStepDownRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.LeaderStepDownRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStepDownRequestPB::CopyFrom(const LeaderStepDownRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.LeaderStepDownRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStepDownRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LeaderStepDownRequestPB::Swap(LeaderStepDownRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderStepDownRequestPB::InternalSwap(LeaderStepDownRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderStepDownRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderStepDownRequestPB

// optional bytes dest_uuid = 2;
bool LeaderStepDownRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaderStepDownRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaderStepDownRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaderStepDownRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& LeaderStepDownRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void LeaderStepDownRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
#if LANG_CXX11
void LeaderStepDownRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
#endif
void LeaderStepDownRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
void LeaderStepDownRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}
::std::string* LeaderStepDownRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderStepDownRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderStepDownRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool LeaderStepDownRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaderStepDownRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaderStepDownRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaderStepDownRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& LeaderStepDownRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void LeaderStepDownRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
#if LANG_CXX11
void LeaderStepDownRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
#endif
void LeaderStepDownRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
void LeaderStepDownRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}
::std::string* LeaderStepDownRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderStepDownRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderStepDownRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownRequestPB.tablet_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderStepDownResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderStepDownResponsePB::LeaderStepDownResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.LeaderStepDownResponsePB)
}
LeaderStepDownResponsePB::LeaderStepDownResponsePB(const LeaderStepDownResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.LeaderStepDownResponsePB)
}

void LeaderStepDownResponsePB::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

LeaderStepDownResponsePB::~LeaderStepDownResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.LeaderStepDownResponsePB)
  SharedDtor();
}

void LeaderStepDownResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void LeaderStepDownResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStepDownResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[18].descriptor;
}

const LeaderStepDownResponsePB& LeaderStepDownResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaderStepDownResponsePB* LeaderStepDownResponsePB::New(::google::protobuf::Arena* arena) const {
  LeaderStepDownResponsePB* n = new LeaderStepDownResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderStepDownResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.LeaderStepDownResponsePB)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::kudu::tserver::TabletServerErrorPB::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderStepDownResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.LeaderStepDownResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.tserver.TabletServerErrorPB error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.LeaderStepDownResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.LeaderStepDownResponsePB)
  return false;
#undef DO_
}

void LeaderStepDownResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.LeaderStepDownResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.LeaderStepDownResponsePB)
}

::google::protobuf::uint8* LeaderStepDownResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.LeaderStepDownResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.LeaderStepDownResponsePB)
  return target;
}

size_t LeaderStepDownResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.LeaderStepDownResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStepDownResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.LeaderStepDownResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderStepDownResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderStepDownResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.LeaderStepDownResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.LeaderStepDownResponsePB)
    MergeFrom(*source);
  }
}

void LeaderStepDownResponsePB::MergeFrom(const LeaderStepDownResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.LeaderStepDownResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
  }
}

void LeaderStepDownResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.LeaderStepDownResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStepDownResponsePB::CopyFrom(const LeaderStepDownResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.LeaderStepDownResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStepDownResponsePB::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void LeaderStepDownResponsePB::Swap(LeaderStepDownResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderStepDownResponsePB::InternalSwap(LeaderStepDownResponsePB* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderStepDownResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderStepDownResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
bool LeaderStepDownResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaderStepDownResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaderStepDownResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaderStepDownResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& LeaderStepDownResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.LeaderStepDownResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* LeaderStepDownResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.LeaderStepDownResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* LeaderStepDownResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.LeaderStepDownResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void LeaderStepDownResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.LeaderStepDownResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastOpIdRequestPB::kDestUuidFieldNumber;
const int GetLastOpIdRequestPB::kTabletIdFieldNumber;
const int GetLastOpIdRequestPB::kOpidTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastOpIdRequestPB::GetLastOpIdRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetLastOpIdRequestPB)
}
GetLastOpIdRequestPB::GetLastOpIdRequestPB(const GetLastOpIdRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  opid_type_ = from.opid_type_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetLastOpIdRequestPB)
}

void GetLastOpIdRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opid_type_ = 1;
}

GetLastOpIdRequestPB::~GetLastOpIdRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetLastOpIdRequestPB)
  SharedDtor();
}

void GetLastOpIdRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLastOpIdRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastOpIdRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[19].descriptor;
}

const GetLastOpIdRequestPB& GetLastOpIdRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLastOpIdRequestPB* GetLastOpIdRequestPB::New(::google::protobuf::Arena* arena) const {
  GetLastOpIdRequestPB* n = new GetLastOpIdRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLastOpIdRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetLastOpIdRequestPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    opid_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLastOpIdRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetLastOpIdRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::OpIdType_IsValid(value)) {
            set_opid_type(static_cast< ::kudu::consensus::OpIdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetLastOpIdRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetLastOpIdRequestPB)
  return false;
#undef DO_
}

void GetLastOpIdRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetLastOpIdRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  // optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  if (has_opid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opid_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetLastOpIdRequestPB)
}

::google::protobuf::uint8* GetLastOpIdRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetLastOpIdRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  // optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  if (has_opid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opid_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetLastOpIdRequestPB)
  return target;
}

size_t GetLastOpIdRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetLastOpIdRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }
  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  // optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  if (has_opid_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opid_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastOpIdRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetLastOpIdRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastOpIdRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLastOpIdRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetLastOpIdRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetLastOpIdRequestPB)
    MergeFrom(*source);
  }
}

void GetLastOpIdRequestPB::MergeFrom(const GetLastOpIdRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetLastOpIdRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_opid_type()) {
      set_opid_type(from.opid_type());
    }
  }
}

void GetLastOpIdRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetLastOpIdRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastOpIdRequestPB::CopyFrom(const GetLastOpIdRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetLastOpIdRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastOpIdRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GetLastOpIdRequestPB::Swap(GetLastOpIdRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastOpIdRequestPB::InternalSwap(GetLastOpIdRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(opid_type_, other->opid_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLastOpIdRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLastOpIdRequestPB

// optional bytes dest_uuid = 2;
bool GetLastOpIdRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLastOpIdRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLastOpIdRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLastOpIdRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& GetLastOpIdRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void GetLastOpIdRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
#if LANG_CXX11
void GetLastOpIdRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
#endif
void GetLastOpIdRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
void GetLastOpIdRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}
::std::string* GetLastOpIdRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLastOpIdRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLastOpIdRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool GetLastOpIdRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLastOpIdRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLastOpIdRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLastOpIdRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& GetLastOpIdRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void GetLastOpIdRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
#if LANG_CXX11
void GetLastOpIdRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
#endif
void GetLastOpIdRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
void GetLastOpIdRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}
::std::string* GetLastOpIdRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLastOpIdRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLastOpIdRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdRequestPB.tablet_id)
}

// optional .kudu.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
bool GetLastOpIdRequestPB::has_opid_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLastOpIdRequestPB::set_has_opid_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLastOpIdRequestPB::clear_has_opid_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLastOpIdRequestPB::clear_opid_type() {
  opid_type_ = 1;
  clear_has_opid_type();
}
::kudu::consensus::OpIdType GetLastOpIdRequestPB::opid_type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdRequestPB.opid_type)
  return static_cast< ::kudu::consensus::OpIdType >(opid_type_);
}
void GetLastOpIdRequestPB::set_opid_type(::kudu::consensus::OpIdType value) {
  assert(::kudu::consensus::OpIdType_IsValid(value));
  set_has_opid_type();
  opid_type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.GetLastOpIdRequestPB.opid_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastOpIdResponsePB::kOpidFieldNumber;
const int GetLastOpIdResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastOpIdResponsePB::GetLastOpIdResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetLastOpIdResponsePB)
}
GetLastOpIdResponsePB::GetLastOpIdResponsePB(const GetLastOpIdResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opid()) {
    opid_ = new ::kudu::consensus::OpId(*from.opid_);
  } else {
    opid_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetLastOpIdResponsePB)
}

void GetLastOpIdResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&opid_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&opid_) + sizeof(error_));
}

GetLastOpIdResponsePB::~GetLastOpIdResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetLastOpIdResponsePB)
  SharedDtor();
}

void GetLastOpIdResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete opid_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void GetLastOpIdResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastOpIdResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[20].descriptor;
}

const GetLastOpIdResponsePB& GetLastOpIdResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLastOpIdResponsePB* GetLastOpIdResponsePB::New(::google::protobuf::Arena* arena) const {
  GetLastOpIdResponsePB* n = new GetLastOpIdResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLastOpIdResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetLastOpIdResponsePB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_opid()) {
      GOOGLE_DCHECK(opid_ != NULL);
      opid_->::kudu::consensus::OpId::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::tserver::TabletServerErrorPB::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLastOpIdResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetLastOpIdResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.consensus.OpId opid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.TabletServerErrorPB error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetLastOpIdResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetLastOpIdResponsePB)
  return false;
#undef DO_
}

void GetLastOpIdResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetLastOpIdResponsePB)
  // optional .kudu.consensus.OpId opid = 1;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->opid_, output);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetLastOpIdResponsePB)
}

::google::protobuf::uint8* GetLastOpIdResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetLastOpIdResponsePB)
  // optional .kudu.consensus.OpId opid = 1;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->opid_, false, target);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetLastOpIdResponsePB)
  return target;
}

size_t GetLastOpIdResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetLastOpIdResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .kudu.consensus.OpId opid = 1;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->opid_);
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastOpIdResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetLastOpIdResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastOpIdResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLastOpIdResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetLastOpIdResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetLastOpIdResponsePB)
    MergeFrom(*source);
  }
}

void GetLastOpIdResponsePB::MergeFrom(const GetLastOpIdResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetLastOpIdResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_opid()) {
      mutable_opid()->::kudu::consensus::OpId::MergeFrom(from.opid());
    }
    if (from.has_error()) {
      mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
    }
  }
}

void GetLastOpIdResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetLastOpIdResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastOpIdResponsePB::CopyFrom(const GetLastOpIdResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetLastOpIdResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastOpIdResponsePB::IsInitialized() const {
  if (has_opid()) {
    if (!this->opid_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void GetLastOpIdResponsePB::Swap(GetLastOpIdResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastOpIdResponsePB::InternalSwap(GetLastOpIdResponsePB* other) {
  std::swap(opid_, other->opid_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLastOpIdResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLastOpIdResponsePB

// optional .kudu.consensus.OpId opid = 1;
bool GetLastOpIdResponsePB::has_opid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLastOpIdResponsePB::set_has_opid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLastOpIdResponsePB::clear_has_opid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLastOpIdResponsePB::clear_opid() {
  if (opid_ != NULL) opid_->::kudu::consensus::OpId::Clear();
  clear_has_opid();
}
const ::kudu::consensus::OpId& GetLastOpIdResponsePB::opid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdResponsePB.opid)
  return opid_ != NULL ? *opid_
                         : *::kudu::consensus::OpId::internal_default_instance();
}
::kudu::consensus::OpId* GetLastOpIdResponsePB::mutable_opid() {
  set_has_opid();
  if (opid_ == NULL) {
    opid_ = new ::kudu::consensus::OpId;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdResponsePB.opid)
  return opid_;
}
::kudu::consensus::OpId* GetLastOpIdResponsePB::release_opid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdResponsePB.opid)
  clear_has_opid();
  ::kudu::consensus::OpId* temp = opid_;
  opid_ = NULL;
  return temp;
}
void GetLastOpIdResponsePB::set_allocated_opid(::kudu::consensus::OpId* opid) {
  delete opid_;
  opid_ = opid;
  if (opid) {
    set_has_opid();
  } else {
    clear_has_opid();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdResponsePB.opid)
}

// optional .kudu.tserver.TabletServerErrorPB error = 2;
bool GetLastOpIdResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLastOpIdResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLastOpIdResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLastOpIdResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& GetLastOpIdResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetLastOpIdResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* GetLastOpIdResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetLastOpIdResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* GetLastOpIdResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetLastOpIdResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void GetLastOpIdResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetLastOpIdResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConsensusStateRequestPB::kDestUuidFieldNumber;
const int GetConsensusStateRequestPB::kTabletIdFieldNumber;
const int GetConsensusStateRequestPB::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConsensusStateRequestPB::GetConsensusStateRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetConsensusStateRequestPB)
}
GetConsensusStateRequestPB::GetConsensusStateRequestPB(const GetConsensusStateRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetConsensusStateRequestPB)
}

void GetConsensusStateRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

GetConsensusStateRequestPB::~GetConsensusStateRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetConsensusStateRequestPB)
  SharedDtor();
}

void GetConsensusStateRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetConsensusStateRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConsensusStateRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[21].descriptor;
}

const GetConsensusStateRequestPB& GetConsensusStateRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConsensusStateRequestPB* GetConsensusStateRequestPB::New(::google::protobuf::Arena* arena) const {
  GetConsensusStateRequestPB* n = new GetConsensusStateRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConsensusStateRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetConsensusStateRequestPB)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetConsensusStateRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetConsensusStateRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::consensus::ConsensusConfigType_IsValid(value)) {
            set_type(static_cast< ::kudu::consensus::ConsensusConfigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetConsensusStateRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetConsensusStateRequestPB)
  return false;
#undef DO_
}

void GetConsensusStateRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetConsensusStateRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  // optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetConsensusStateRequestPB)
}

::google::protobuf::uint8* GetConsensusStateRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetConsensusStateRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  // optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetConsensusStateRequestPB)
  return target;
}

size_t GetConsensusStateRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetConsensusStateRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }
  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  // optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConsensusStateRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetConsensusStateRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsensusStateRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConsensusStateRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetConsensusStateRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetConsensusStateRequestPB)
    MergeFrom(*source);
  }
}

void GetConsensusStateRequestPB::MergeFrom(const GetConsensusStateRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetConsensusStateRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void GetConsensusStateRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetConsensusStateRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusStateRequestPB::CopyFrom(const GetConsensusStateRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetConsensusStateRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusStateRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GetConsensusStateRequestPB::Swap(GetConsensusStateRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConsensusStateRequestPB::InternalSwap(GetConsensusStateRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConsensusStateRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConsensusStateRequestPB

// optional bytes dest_uuid = 2;
bool GetConsensusStateRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetConsensusStateRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetConsensusStateRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetConsensusStateRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& GetConsensusStateRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void GetConsensusStateRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
#if LANG_CXX11
void GetConsensusStateRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
#endif
void GetConsensusStateRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
void GetConsensusStateRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}
::std::string* GetConsensusStateRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConsensusStateRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConsensusStateRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool GetConsensusStateRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetConsensusStateRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetConsensusStateRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetConsensusStateRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& GetConsensusStateRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void GetConsensusStateRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
#if LANG_CXX11
void GetConsensusStateRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
#endif
void GetConsensusStateRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
void GetConsensusStateRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}
::std::string* GetConsensusStateRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConsensusStateRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConsensusStateRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateRequestPB.tablet_id)
}

// optional .kudu.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
bool GetConsensusStateRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetConsensusStateRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GetConsensusStateRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetConsensusStateRequestPB::clear_type() {
  type_ = 1;
  clear_has_type();
}
::kudu::consensus::ConsensusConfigType GetConsensusStateRequestPB::type() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateRequestPB.type)
  return static_cast< ::kudu::consensus::ConsensusConfigType >(type_);
}
void GetConsensusStateRequestPB::set_type(::kudu::consensus::ConsensusConfigType value) {
  assert(::kudu::consensus::ConsensusConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.GetConsensusStateRequestPB.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConsensusStateResponsePB::kCstateFieldNumber;
const int GetConsensusStateResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConsensusStateResponsePB::GetConsensusStateResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.GetConsensusStateResponsePB)
}
GetConsensusStateResponsePB::GetConsensusStateResponsePB(const GetConsensusStateResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cstate()) {
    cstate_ = new ::kudu::consensus::ConsensusStatePB(*from.cstate_);
  } else {
    cstate_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.GetConsensusStateResponsePB)
}

void GetConsensusStateResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cstate_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&cstate_) + sizeof(error_));
}

GetConsensusStateResponsePB::~GetConsensusStateResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.GetConsensusStateResponsePB)
  SharedDtor();
}

void GetConsensusStateResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cstate_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void GetConsensusStateResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConsensusStateResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[22].descriptor;
}

const GetConsensusStateResponsePB& GetConsensusStateResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConsensusStateResponsePB* GetConsensusStateResponsePB::New(::google::protobuf::Arena* arena) const {
  GetConsensusStateResponsePB* n = new GetConsensusStateResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConsensusStateResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.GetConsensusStateResponsePB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cstate()) {
      GOOGLE_DCHECK(cstate_ != NULL);
      cstate_->::kudu::consensus::ConsensusStatePB::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::kudu::tserver::TabletServerErrorPB::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetConsensusStateResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.GetConsensusStateResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.consensus.ConsensusStatePB cstate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kudu.tserver.TabletServerErrorPB error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.GetConsensusStateResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.GetConsensusStateResponsePB)
  return false;
#undef DO_
}

void GetConsensusStateResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.GetConsensusStateResponsePB)
  // optional .kudu.consensus.ConsensusStatePB cstate = 1;
  if (has_cstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cstate_, output);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.GetConsensusStateResponsePB)
}

::google::protobuf::uint8* GetConsensusStateResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.GetConsensusStateResponsePB)
  // optional .kudu.consensus.ConsensusStatePB cstate = 1;
  if (has_cstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cstate_, false, target);
  }

  // optional .kudu.tserver.TabletServerErrorPB error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.GetConsensusStateResponsePB)
  return target;
}

size_t GetConsensusStateResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.GetConsensusStateResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .kudu.consensus.ConsensusStatePB cstate = 1;
    if (has_cstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cstate_);
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConsensusStateResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.GetConsensusStateResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsensusStateResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConsensusStateResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.GetConsensusStateResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.GetConsensusStateResponsePB)
    MergeFrom(*source);
  }
}

void GetConsensusStateResponsePB::MergeFrom(const GetConsensusStateResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.GetConsensusStateResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_cstate()) {
      mutable_cstate()->::kudu::consensus::ConsensusStatePB::MergeFrom(from.cstate());
    }
    if (from.has_error()) {
      mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
    }
  }
}

void GetConsensusStateResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.GetConsensusStateResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusStateResponsePB::CopyFrom(const GetConsensusStateResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.GetConsensusStateResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusStateResponsePB::IsInitialized() const {
  if (has_cstate()) {
    if (!this->cstate_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void GetConsensusStateResponsePB::Swap(GetConsensusStateResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConsensusStateResponsePB::InternalSwap(GetConsensusStateResponsePB* other) {
  std::swap(cstate_, other->cstate_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConsensusStateResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConsensusStateResponsePB

// optional .kudu.consensus.ConsensusStatePB cstate = 1;
bool GetConsensusStateResponsePB::has_cstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetConsensusStateResponsePB::set_has_cstate() {
  _has_bits_[0] |= 0x00000001u;
}
void GetConsensusStateResponsePB::clear_has_cstate() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetConsensusStateResponsePB::clear_cstate() {
  if (cstate_ != NULL) cstate_->::kudu::consensus::ConsensusStatePB::Clear();
  clear_has_cstate();
}
const ::kudu::consensus::ConsensusStatePB& GetConsensusStateResponsePB::cstate() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_ != NULL ? *cstate_
                         : *::kudu::consensus::ConsensusStatePB::internal_default_instance();
}
::kudu::consensus::ConsensusStatePB* GetConsensusStateResponsePB::mutable_cstate() {
  set_has_cstate();
  if (cstate_ == NULL) {
    cstate_ = new ::kudu::consensus::ConsensusStatePB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_;
}
::kudu::consensus::ConsensusStatePB* GetConsensusStateResponsePB::release_cstate() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateResponsePB.cstate)
  clear_has_cstate();
  ::kudu::consensus::ConsensusStatePB* temp = cstate_;
  cstate_ = NULL;
  return temp;
}
void GetConsensusStateResponsePB::set_allocated_cstate(::kudu::consensus::ConsensusStatePB* cstate) {
  delete cstate_;
  cstate_ = cstate;
  if (cstate) {
    set_has_cstate();
  } else {
    clear_has_cstate();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateResponsePB.cstate)
}

// optional .kudu.tserver.TabletServerErrorPB error = 2;
bool GetConsensusStateResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetConsensusStateResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void GetConsensusStateResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetConsensusStateResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& GetConsensusStateResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.GetConsensusStateResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* GetConsensusStateResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.GetConsensusStateResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* GetConsensusStateResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.GetConsensusStateResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void GetConsensusStateResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.GetConsensusStateResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartTabletCopyRequestPB::kDestUuidFieldNumber;
const int StartTabletCopyRequestPB::kTabletIdFieldNumber;
const int StartTabletCopyRequestPB::kCopyPeerUuidFieldNumber;
const int StartTabletCopyRequestPB::kCopyPeerAddrFieldNumber;
const int StartTabletCopyRequestPB::kCallerTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartTabletCopyRequestPB::StartTabletCopyRequestPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.StartTabletCopyRequestPB)
}
StartTabletCopyRequestPB::StartTabletCopyRequestPB(const StartTabletCopyRequestPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_uuid()) {
    dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
  }
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tablet_id()) {
    tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
  }
  copy_peer_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_copy_peer_uuid()) {
    copy_peer_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copy_peer_uuid_);
  }
  if (from.has_copy_peer_addr()) {
    copy_peer_addr_ = new ::kudu::HostPortPB(*from.copy_peer_addr_);
  } else {
    copy_peer_addr_ = NULL;
  }
  caller_term_ = from.caller_term_;
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.StartTabletCopyRequestPB)
}

void StartTabletCopyRequestPB::SharedCtor() {
  _cached_size_ = 0;
  dest_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copy_peer_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copy_peer_addr_ = NULL;
  caller_term_ = GOOGLE_LONGLONG(-1);
}

StartTabletCopyRequestPB::~StartTabletCopyRequestPB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.StartTabletCopyRequestPB)
  SharedDtor();
}

void StartTabletCopyRequestPB::SharedDtor() {
  dest_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copy_peer_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete copy_peer_addr_;
  }
}

void StartTabletCopyRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTabletCopyRequestPB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[23].descriptor;
}

const StartTabletCopyRequestPB& StartTabletCopyRequestPB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartTabletCopyRequestPB* StartTabletCopyRequestPB::New(::google::protobuf::Arena* arena) const {
  StartTabletCopyRequestPB* n = new StartTabletCopyRequestPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartTabletCopyRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.StartTabletCopyRequestPB)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_dest_uuid()) {
      GOOGLE_DCHECK(!dest_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tablet_id()) {
      GOOGLE_DCHECK(!tablet_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tablet_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_copy_peer_uuid()) {
      GOOGLE_DCHECK(!copy_peer_uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*copy_peer_uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_copy_peer_addr()) {
      GOOGLE_DCHECK(copy_peer_addr_ != NULL);
      copy_peer_addr_->::kudu::HostPortPB::Clear();
    }
    caller_term_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartTabletCopyRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.StartTabletCopyRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes copy_peer_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_copy_peer_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kudu.HostPortPB copy_peer_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_peer_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 caller_term = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_caller_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caller_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dest_uuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.StartTabletCopyRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.StartTabletCopyRequestPB)
  return false;
#undef DO_
}

void StartTabletCopyRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.StartTabletCopyRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes copy_peer_uuid = 2;
  if (has_copy_peer_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->copy_peer_uuid(), output);
  }

  // required .kudu.HostPortPB copy_peer_addr = 3;
  if (has_copy_peer_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->copy_peer_addr_, output);
  }

  // optional int64 caller_term = 4 [default = -1];
  if (has_caller_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->caller_term(), output);
  }

  // optional bytes dest_uuid = 5;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->dest_uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.StartTabletCopyRequestPB)
}

::google::protobuf::uint8* StartTabletCopyRequestPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.StartTabletCopyRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // required bytes copy_peer_uuid = 2;
  if (has_copy_peer_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->copy_peer_uuid(), target);
  }

  // required .kudu.HostPortPB copy_peer_addr = 3;
  if (has_copy_peer_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->copy_peer_addr_, false, target);
  }

  // optional int64 caller_term = 4 [default = -1];
  if (has_caller_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->caller_term(), target);
  }

  // optional bytes dest_uuid = 5;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dest_uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.StartTabletCopyRequestPB)
  return target;
}

size_t StartTabletCopyRequestPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kudu.consensus.StartTabletCopyRequestPB)
  size_t total_size = 0;

  if (has_tablet_id()) {
    // required bytes tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());
  }

  if (has_copy_peer_uuid()) {
    // required bytes copy_peer_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->copy_peer_uuid());
  }

  if (has_copy_peer_addr()) {
    // required .kudu.HostPortPB copy_peer_addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->copy_peer_addr_);
  }

  return total_size;
}
size_t StartTabletCopyRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.StartTabletCopyRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes tablet_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tablet_id());

    // required bytes copy_peer_uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->copy_peer_uuid());

    // required .kudu.HostPortPB copy_peer_addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->copy_peer_addr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes dest_uuid = 5;
  if (has_dest_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest_uuid());
  }

  // optional int64 caller_term = 4 [default = -1];
  if (has_caller_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->caller_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTabletCopyRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.StartTabletCopyRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const StartTabletCopyRequestPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartTabletCopyRequestPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.StartTabletCopyRequestPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.StartTabletCopyRequestPB)
    MergeFrom(*source);
  }
}

void StartTabletCopyRequestPB::MergeFrom(const StartTabletCopyRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.StartTabletCopyRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_dest_uuid()) {
      set_has_dest_uuid();
      dest_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_uuid_);
    }
    if (from.has_tablet_id()) {
      set_has_tablet_id();
      tablet_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablet_id_);
    }
    if (from.has_copy_peer_uuid()) {
      set_has_copy_peer_uuid();
      copy_peer_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copy_peer_uuid_);
    }
    if (from.has_copy_peer_addr()) {
      mutable_copy_peer_addr()->::kudu::HostPortPB::MergeFrom(from.copy_peer_addr());
    }
    if (from.has_caller_term()) {
      set_caller_term(from.caller_term());
    }
  }
}

void StartTabletCopyRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.StartTabletCopyRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTabletCopyRequestPB::CopyFrom(const StartTabletCopyRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.StartTabletCopyRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTabletCopyRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_copy_peer_addr()) {
    if (!this->copy_peer_addr_->IsInitialized()) return false;
  }
  return true;
}

void StartTabletCopyRequestPB::Swap(StartTabletCopyRequestPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartTabletCopyRequestPB::InternalSwap(StartTabletCopyRequestPB* other) {
  dest_uuid_.Swap(&other->dest_uuid_);
  tablet_id_.Swap(&other->tablet_id_);
  copy_peer_uuid_.Swap(&other->copy_peer_uuid_);
  std::swap(copy_peer_addr_, other->copy_peer_addr_);
  std::swap(caller_term_, other->caller_term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartTabletCopyRequestPB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTabletCopyRequestPB

// optional bytes dest_uuid = 5;
bool StartTabletCopyRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartTabletCopyRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void StartTabletCopyRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartTabletCopyRequestPB::clear_dest_uuid() {
  dest_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_uuid();
}
const ::std::string& StartTabletCopyRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  return dest_uuid_.GetNoArena();
}
void StartTabletCopyRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
#if LANG_CXX11
void StartTabletCopyRequestPB::set_dest_uuid(::std::string&& value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
#endif
void StartTabletCopyRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
void StartTabletCopyRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  dest_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}
::std::string* StartTabletCopyRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  return dest_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTabletCopyRequestPB::release_dest_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
  clear_has_dest_uuid();
  return dest_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTabletCopyRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid != NULL) {
    set_has_dest_uuid();
  } else {
    clear_has_dest_uuid();
  }
  dest_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
bool StartTabletCopyRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StartTabletCopyRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void StartTabletCopyRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void StartTabletCopyRequestPB::clear_tablet_id() {
  tablet_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tablet_id();
}
const ::std::string& StartTabletCopyRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  return tablet_id_.GetNoArena();
}
void StartTabletCopyRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
#if LANG_CXX11
void StartTabletCopyRequestPB::set_tablet_id(::std::string&& value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
#endif
void StartTabletCopyRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
void StartTabletCopyRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  tablet_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}
::std::string* StartTabletCopyRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  return tablet_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTabletCopyRequestPB::release_tablet_id() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
  clear_has_tablet_id();
  return tablet_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTabletCopyRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id != NULL) {
    set_has_tablet_id();
  } else {
    clear_has_tablet_id();
  }
  tablet_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablet_id);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.tablet_id)
}

// required bytes copy_peer_uuid = 2;
bool StartTabletCopyRequestPB::has_copy_peer_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StartTabletCopyRequestPB::set_has_copy_peer_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
void StartTabletCopyRequestPB::clear_has_copy_peer_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
void StartTabletCopyRequestPB::clear_copy_peer_uuid() {
  copy_peer_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_copy_peer_uuid();
}
const ::std::string& StartTabletCopyRequestPB::copy_peer_uuid() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return copy_peer_uuid_.GetNoArena();
}
void StartTabletCopyRequestPB::set_copy_peer_uuid(const ::std::string& value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
#if LANG_CXX11
void StartTabletCopyRequestPB::set_copy_peer_uuid(::std::string&& value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
#endif
void StartTabletCopyRequestPB::set_copy_peer_uuid(const char* value) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
void StartTabletCopyRequestPB::set_copy_peer_uuid(const void* value, size_t size) {
  set_has_copy_peer_uuid();
  copy_peer_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
::std::string* StartTabletCopyRequestPB::mutable_copy_peer_uuid() {
  set_has_copy_peer_uuid();
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return copy_peer_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartTabletCopyRequestPB::release_copy_peer_uuid() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  clear_has_copy_peer_uuid();
  return copy_peer_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartTabletCopyRequestPB::set_allocated_copy_peer_uuid(::std::string* copy_peer_uuid) {
  if (copy_peer_uuid != NULL) {
    set_has_copy_peer_uuid();
  } else {
    clear_has_copy_peer_uuid();
  }
  copy_peer_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copy_peer_uuid);
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}

// required .kudu.HostPortPB copy_peer_addr = 3;
bool StartTabletCopyRequestPB::has_copy_peer_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StartTabletCopyRequestPB::set_has_copy_peer_addr() {
  _has_bits_[0] |= 0x00000008u;
}
void StartTabletCopyRequestPB::clear_has_copy_peer_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
void StartTabletCopyRequestPB::clear_copy_peer_addr() {
  if (copy_peer_addr_ != NULL) copy_peer_addr_->::kudu::HostPortPB::Clear();
  clear_has_copy_peer_addr();
}
const ::kudu::HostPortPB& StartTabletCopyRequestPB::copy_peer_addr() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_ != NULL ? *copy_peer_addr_
                         : *::kudu::HostPortPB::internal_default_instance();
}
::kudu::HostPortPB* StartTabletCopyRequestPB::mutable_copy_peer_addr() {
  set_has_copy_peer_addr();
  if (copy_peer_addr_ == NULL) {
    copy_peer_addr_ = new ::kudu::HostPortPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_;
}
::kudu::HostPortPB* StartTabletCopyRequestPB::release_copy_peer_addr() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  clear_has_copy_peer_addr();
  ::kudu::HostPortPB* temp = copy_peer_addr_;
  copy_peer_addr_ = NULL;
  return temp;
}
void StartTabletCopyRequestPB::set_allocated_copy_peer_addr(::kudu::HostPortPB* copy_peer_addr) {
  delete copy_peer_addr_;
  copy_peer_addr_ = copy_peer_addr;
  if (copy_peer_addr) {
    set_has_copy_peer_addr();
  } else {
    clear_has_copy_peer_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyRequestPB.copy_peer_addr)
}

// optional int64 caller_term = 4 [default = -1];
bool StartTabletCopyRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StartTabletCopyRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000010u;
}
void StartTabletCopyRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void StartTabletCopyRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(-1);
  clear_has_caller_term();
}
::google::protobuf::int64 StartTabletCopyRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyRequestPB.caller_term)
  return caller_term_;
}
void StartTabletCopyRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:kudu.consensus.StartTabletCopyRequestPB.caller_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartTabletCopyResponsePB::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartTabletCopyResponsePB::StartTabletCopyResponsePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_consensus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kudu.consensus.StartTabletCopyResponsePB)
}
StartTabletCopyResponsePB::StartTabletCopyResponsePB(const StartTabletCopyResponsePB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::kudu::tserver::TabletServerErrorPB(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kudu.consensus.StartTabletCopyResponsePB)
}

void StartTabletCopyResponsePB::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

StartTabletCopyResponsePB::~StartTabletCopyResponsePB() {
  // @@protoc_insertion_point(destructor:kudu.consensus.StartTabletCopyResponsePB)
  SharedDtor();
}

void StartTabletCopyResponsePB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void StartTabletCopyResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTabletCopyResponsePB::descriptor() {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[24].descriptor;
}

const StartTabletCopyResponsePB& StartTabletCopyResponsePB::default_instance() {
  protobuf_consensus_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartTabletCopyResponsePB* StartTabletCopyResponsePB::New(::google::protobuf::Arena* arena) const {
  StartTabletCopyResponsePB* n = new StartTabletCopyResponsePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartTabletCopyResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:kudu.consensus.StartTabletCopyResponsePB)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::kudu::tserver::TabletServerErrorPB::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartTabletCopyResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kudu.consensus.StartTabletCopyResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kudu.tserver.TabletServerErrorPB error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kudu.consensus.StartTabletCopyResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kudu.consensus.StartTabletCopyResponsePB)
  return false;
#undef DO_
}

void StartTabletCopyResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kudu.consensus.StartTabletCopyResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kudu.consensus.StartTabletCopyResponsePB)
}

::google::protobuf::uint8* StartTabletCopyResponsePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kudu.consensus.StartTabletCopyResponsePB)
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kudu.consensus.StartTabletCopyResponsePB)
  return target;
}

size_t StartTabletCopyResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kudu.consensus.StartTabletCopyResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .kudu.tserver.TabletServerErrorPB error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTabletCopyResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kudu.consensus.StartTabletCopyResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const StartTabletCopyResponsePB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartTabletCopyResponsePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kudu.consensus.StartTabletCopyResponsePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kudu.consensus.StartTabletCopyResponsePB)
    MergeFrom(*source);
  }
}

void StartTabletCopyResponsePB::MergeFrom(const StartTabletCopyResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kudu.consensus.StartTabletCopyResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    mutable_error()->::kudu::tserver::TabletServerErrorPB::MergeFrom(from.error());
  }
}

void StartTabletCopyResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kudu.consensus.StartTabletCopyResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTabletCopyResponsePB::CopyFrom(const StartTabletCopyResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kudu.consensus.StartTabletCopyResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTabletCopyResponsePB::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void StartTabletCopyResponsePB::Swap(StartTabletCopyResponsePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartTabletCopyResponsePB::InternalSwap(StartTabletCopyResponsePB* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartTabletCopyResponsePB::GetMetadata() const {
  protobuf_consensus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_consensus_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTabletCopyResponsePB

// optional .kudu.tserver.TabletServerErrorPB error = 1;
bool StartTabletCopyResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartTabletCopyResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void StartTabletCopyResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartTabletCopyResponsePB::clear_error() {
  if (error_ != NULL) error_->::kudu::tserver::TabletServerErrorPB::Clear();
  clear_has_error();
}
const ::kudu::tserver::TabletServerErrorPB& StartTabletCopyResponsePB::error() const {
  // @@protoc_insertion_point(field_get:kudu.consensus.StartTabletCopyResponsePB.error)
  return error_ != NULL ? *error_
                         : *::kudu::tserver::TabletServerErrorPB::internal_default_instance();
}
::kudu::tserver::TabletServerErrorPB* StartTabletCopyResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::kudu::tserver::TabletServerErrorPB;
  }
  // @@protoc_insertion_point(field_mutable:kudu.consensus.StartTabletCopyResponsePB.error)
  return error_;
}
::kudu::tserver::TabletServerErrorPB* StartTabletCopyResponsePB::release_error() {
  // @@protoc_insertion_point(field_release:kudu.consensus.StartTabletCopyResponsePB.error)
  clear_has_error();
  ::kudu::tserver::TabletServerErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
void StartTabletCopyResponsePB::set_allocated_error(::kudu::tserver::TabletServerErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:kudu.consensus.StartTabletCopyResponsePB.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace kudu

// @@protoc_insertion_point(global_scope)
